#!/bin/bash  
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	#return 123
         # Source Needed files
        COMMON_GLASSFISH=/ericsson/glassfish/bin/common_glassfish.sh

        #Checking if the file with common glassfish variables and functions is present
        if [ ! -f $COMMON_GLASSFISH ]; then
               echo "ERROR! $COMMON_GLASSFISH not found "
               echo "Cannot proceed Exiting..."
               return 1
        else
                echo "Sourcing needed files $COMMON_GLASSFISH "
                . $COMMON_GLASSFISH
        fi



         ###################
        #restart glassfish
        ###################
        function restart_glassfish_this()
        {
        set -a
        . /ericsson/glassfish/bin/common_glassfish.sh

        restart_glassfish
        if [ $? -eq 0 ]; then
                echo
                printf "Restart glassfish service is successful!....\n"
        else
                printf "Restart glassfish failed!!...Exiting....\n"
                exit 1
        fi
        return 0
        }

 
	################################
        #Main
        ################################
        retcode=0
        soapear=/opt/ericsson/nms_soapirp/lib/SoapBasicCMIRP.ear
        threshold=77


        #glassfish time test using soapbasic .ear file 
        #undeploy soap basic
        su nmsadm -c "/opt/ericsson/nms_soapirp/bin/undeployEJBOnGlassfish.sh SoapBasicCMIRP"
        if [ $? -ne 0 ]; then
           echo  -e "\n Undeploy of SoapBasicCMIRP has failed "
           retcode=$(($retcode+1))
        fi 

        if [ ! -f $soapear ]; then
           echo  -e "\n $soapear not found"
           retcode=$(($retcode+1))
        fi

        

        # restart glassfish to clear any cached cslib
        echo  -e "\n restart glassfish"
        restart_glassfish_this
        echo " and were back"

        rtime="$( TIMEFORMAT='%3R';time ( su nmsadm -c "/opt/ericsson/nms_soapirp/bin/deployEJBOnGlassfish.sh $soapear" ) 2>&1 1>/dev/null )"
         if [ $? -ne 0 ]; then
           echo  -e "\n Deploy of SoapBasicCMIRP has failed "
           retcode=$(($retcode+1))
        fi
 	
        echo -e "\n Time taken to deploy Soap Basic is $rtime seconds realtime"

        # convert to int for simpler comparison 
	int_rtime=$( echo "$rtime/1" | bc)
        
	if [ "$int_rtime"  -gt   "$threshold" ]; then
                echo -e "\n Time to deplpy soap basic exceeds threshold at $rtime seconds.  "
                retcode=$(($retcode+1))
        else
                echo -e  "\n Time to deploy soap basic is $rtime  ...\n"
        fi


        if [ $retcode -ne 0 ]; then
               echo -e " Glassfish deploy time is not as expected"
               return 1
        fi



}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
