#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	#return 0
        retcode=0 
        
        # Source Needed files
        COMMON_GLASSFISH=/ericsson/glassfish/bin/common_glassfish.sh
        EGREP=/usr/xpg4/bin/egrep



        #Checking if the file with common glassfish variables and functions is present
        if [ ! -f $COMMON_GLASSFISH ]; then
               echo "ERROR! $COMMON_GLASSFISH not found "
               echo "Cannot proceed Exiting..."
               return 1
        else
                echo "Sourcing needed files $COMMON_GLASSFISH "
                . $COMMON_GLASSFISH
        fi

        # create temp password file to
        create_password_file


        # Verify Max history Values are as expected.
        ##########################################
        expectval=1
        option=`/opt/glassfish3/glassfish/bin/asadmin --host=masterservice --port 50500 --user admin --passwordfile $V3_PASSWORD_FILE list-log-attributes | grep maxHistoryFiles`

        val=$(echo $option | awk -F'< ' '{print $2}'  |sed s/.$//)
        echo  -e "\n glassfish logging maxHistoryFiles is $val"
        if [ $expectval -ne $val ]; then
                echo "maxHistoryFiles is $val expected to see a value of $expectval"
                retcode=$(($retcode+1))
        else
                echo " maxHistoryFiles of $val is correctly set"
        fi


        expectval=100000000
        option=`/opt/glassfish3/glassfish/bin/asadmin --host=masterservice --port 50500 --user admin --passwordfile $V3_PASSWORD_FILE list-log-attributes | grep rotationLimitInBytes`
        val=$(echo $option | awk -F'< ' '{print $2}'  |sed s/.$//)
        echo  -e "\n glassfish log rotationLimitInBytes is set to $val"
        if [ $expectval -ne $val ]; then
                echo "rotationLimitInBytes is $val expected to see a value of $expectval"
                retcode=$(($retcode+1))

        else
                echo " rotationLimitInBytess of $val is correctly set"
        fi

        if [ $retcode -ne 0 ]; then
               echo -e " One or more settings in Domain.xml are not as expected"
               return 1
        else
               return 0
        fi


}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
