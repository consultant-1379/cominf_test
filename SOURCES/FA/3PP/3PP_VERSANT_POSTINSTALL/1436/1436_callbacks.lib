#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required


        ECHO=/usr/bin/echo
        DATE=/usr/bin/date
        VRSNT_DBTOOL_WRAPPER=/opt/versant/ODBMS/bin/dbtool
        VRSNT_DBTOOL_FILE=/opt/versant/ODBMS/lib/dbtool
        VRSNT_DBTOOL_NOTWANTED=/ericsson/versant/bin/dbtool
        
        retcode=0
        echo -e " \n Verify versant dbtool wrapper exists"

        # This file resulted ina  TR.  it should not exist
        if [ -f $VRSNT_DBTOOL_NOTWANTED ]; then
                echo "$ $VRSNT_DBTOOL_NOTWANTED should not be here "
                retcode=$(($retcode+1))
        fi
       
        # wrapper should exist as a bash script, not a vrsnt binary
        if [ ! -f $VRSNT_DBTOOL_WRAPPER ]; then
                echo "\n $VRSNT_DBTOOL_WRAPPER not found "
                retcode=$(($retcode+1))
        else
                EXPECTED_FILETYPE="executable /bin/bash script"
                FILETYPE=$(file $VRSNT_DBTOOL_WRAPPER |  nawk -F: '{print $2}')
                if [ 'grep  "$EXPECTED_FILETYPE" "$FILETYPE"' ]; then
                        echo "$VRSNT_DBTOOL_WRAPPER is $EXPECTED_FILETYPE as expectd"
                else
                        echo "$VRSNT_DBTOOL_WRAPPER is $FILETYPE "
                        retcode=$(($retcode+1))
                fi
        fi


        if [ ! -f $VRSNT_DBTOOL_FILE ]; then
                echo "$ $VRSNT_DBTOOL_FILE not found  "
                retcode=$(($retcode+1))
        else
                EXPECTED_FILETYPE="ELF 64-bit MSB executable SPARCV9"
                FILETYPE=$(file $VRSNT_DBTOOL_FILE |  nawk -F: '{print $2}')
                if [ 'grep  "$EXPECTED_FILETYPE" "$FILETYPE"' ]; then
                        echo "$VRSNT_DBTOOL_FILE is $EXPECTED_FILETYPE as expectd"
                else
                        echo "$VRSNT_DBTOOL_FILE is $FILETYPE "
                        retcode=$(($retcode+1))
                fi
        fi




        if [ $retcode -ne 0 ]; then
                echo -e "\n  Versant dbtool file wrapper not as as expected"
                return 1
        else
                return 0
        fi


}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
