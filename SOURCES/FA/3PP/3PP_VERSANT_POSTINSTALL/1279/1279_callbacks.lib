#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

# Init --------------------------------------------
# Init --------------------------------------------
RETURN_STATUS=0

while getopts ":d" option
do
    case $option in
        d) DEBUG=1;;
   esac
done

if [ $DEBUG ]; then
    set -x
fi
# -------------------------------------------------


# Mandatory information ---------------------------
echo [OUTPUT:TESTCASENAME:Vers_3PP_TC_11]
echo [OUTPUT:TESTCASEDESCRIPTION:Test for Creation of VERSANT Database ]
echo [OUTPUT:SCRIPTVERSION:PA1]
# -------------------------------------------------


# Do the test -------------------------------------
#

SYS_ENV=/etc/opt/ericsson/system.env

if [ -f $SYS_ENV ]
then
set -a
 . $SYS_ENV
fi

DB=TEST_AUTO

echo "Making database: $DB..."
su nmsadm -c "$VERSANT_HOME/bin/makedb $DB"
EXITVALUE=$?

if [ $EXITVALUE -ne  0 ]; then
    echo "The makedb command failed..."
    su nmsadm -c "$VERSANT_HOME/bin/removedb -f -rmdir $DB"
    CLEANUPEXIT=$?
    if [ $CLEANUPEXIT -ne  0 ]; then
        echo "The cleanup was not successful (removedb exitvalue = "$CLEANUPEXIT")."
    else
        echo "Successfully cleaned up: $DB"
    fi

        echo "RE Making database: $DB..."
        su nmsadm -c "$VERSANT_HOME/bin/makedb $DB"
        EXITVALUE=$?
#    exit $EXITVALUE
fi

echo "Creating database: $DB..."
su nmsadm -c "$VERSANT_HOME/bin/createdb $DB"
EXITVALUE=$?

if [ $EXITVALUE -ne  0 ]; then
    echo "The createdb command failed."
    exit $EXITVALUE
fi



echo "Granting public access: $DB..."
su nmsadm -c "$VERSANT_HOME/bin/dbuser -add -P $DB"
EXITVALUE=$?

if [ $EXITVALUE -ne  0 ]; then
    echo "Failed to grant public access: $DB."
    exit $EXITVALUE
fi


echo "Database $DB ready."

exit $EXITVALUE
# -------------------------------------------------



# Return status and reason ------------------------
if [ "$RETURN_STATUS_REASON" ]; then
  echo [OUTPUT:REASON:$RETURN_STATUS_REASON]
fi

return $RETURN_STATUS
# -------------------------------------------------

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
