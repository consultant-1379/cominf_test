#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required


        ECHO=/usr/bin/echo
        DATE=/usr/bin/date
        VRSNT_BACKUP_SCRIPT=/ericsson/versant/bin/vrsnt_dbdump
        VRSNT_DAILY_BACKUP=/ericsson/versant/etc/vrsnt_daily_backup.sh
        BACKUP_DIR="/ossrc/versant/dbdumps/db"
        CONSISTENCY_CHECK_DB="DMDB ONRM_CS WRAN_SUBNETWORK_MIRROR_CS"
        EGREP=/usr/xpg4/bin/egrep
        SYSTEM_ENV=/etc/opt/ericsson/system.env
        CURR_DIR=${PWD}
        EXPECT=/usr/local/bin/expect
        EXP_BACKUP_FILE=$CURR_DIR/1289_backup.exp
        EXP_RESTORE_TEMPLATE=$CURR_DIR/1289_restore.exp
        EXP_RESTORE_FILE=/tmp/vrsnt_restore_tc.exp
        EXP_RESTORE_NEW=/tmp/vrsnt_restore_new.exp
        TMP_DUMPSET_NUM=0
        DUMPSET_NUM=0
        retcode=0

        # Carry out a backup 
        $EXPECT $EXP_BACKUP_FILE 
        if [ $? -ne 0 ]; then
                echo "Versant admin menu option 10 Backup a single database, do not execute as expected"
                retcode=$(($retcode+1))
        fi



        #### eolikil 27/03/14
        #### Sorry Need to hardcode some stuff to ensure expect restores the latest backup.
        ###  Need to clarifty relationship between dumpset and dumpfile, is dumpfile always 1. 

        DB=ONRM_CS 
        TMP_DUMPSET_NUM=$(ls -ltr  $BACKUP_DIR | grep $DB | grep CONSISTENCY | wc -l)
        echo "TMP_DUMPSET NUM is ++++$TMP_DUMPSET_NUM"++++
        # NOW Strip out white space 
        DUMPSET_NUM=$( echo "${TMP_DUMPSET_NUM}"| sed -e 's/^ *//' -e 's/ *$//');

        # Get rid of any stuff lying around from previous test case run 
        filelist="EXP_RESTORE_FILE $EXP_RESTORE_NEW"
        for file in $filelist; do
                if [ -f $file ]; then
                        rm $file 
                fi
        done


        #Create exp script from template 
        cp $EXP_RESTORE_TEMPLATE $EXP_RESTORE_FILE
        if [ $? -ne 0 ]; then
                echo "File copy from  $EXP_RESTORE_TEMPLATE to $EXP_RESTORE_FILE reported an Error.  "
                retcode=$(($retcode+1))
        fi


        # Not that we know the dumpset number 
        # Pass it to the expect script 
        placeholder="DUMPSET_NUMBER"
        rep="$DUMPSET_NUM"

        sed -e "s/${placeholder}/${rep}/g" $EXP_RESTORE_FILE > $EXP_RESTORE_NEW
        mv $EXP_RESTORE_NEW $EXP_RESTORE_FILE 
        if [ $? -ne 0 ]; then
                echo "File copy from  $EXP_RESTORE_NEW to $EXP_RESTORE_FILE reported an Error.  "
                retcode=$(($retcode+1))
        fi


        #  Do a Restore 
        $EXPECT $EXP_RESTORE_FILE
        if [ $? -ne 0 ]; then
                echo "Versant admin menu option 11 Restore a single database  , do not execute as expected "
                retcode=$(($retcode+1))
        fi
        #  Cannot rely on returncode from vrsnt admin menu.  Need to
        #  verify differently 


        if [ $retcode -ne 0 ]; then
                echo -e "Versant admin menu option 10  & 11 Backup and Restore a single database"
               return 1
        else
               return 0
        fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
