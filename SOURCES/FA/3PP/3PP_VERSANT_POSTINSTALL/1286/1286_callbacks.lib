#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

# Init --------------------------------------------

RETURN_STATUS=0
OPERATION="dump"
SCRIPT=/ericsson/versant/bin/vrsnt_dbdump
TARGET_DB="testdb_extra_vol"
DB_DIR=/export/versant/db/$TARGET_DB
TEMP_VOL="temp_vol"


while getopts ":d" option
do
    case $option in
        d) DEBUG=1;;
   esac
done

if [ $DEBUG ]; then
    set -x
fi
# -------------------------------------------------


# Mandatory information ---------------------------
echo [OUTPUT:TESTCASENAME:"Vers_3PP_TC_19"]
echo [OUTPUT:TESTCASEDESCRIPTION:"Test for dumping target database with extra system volume by using
vrsnt_dbdump script"]
echo [OUTPUT:SCRIPTVERSION:"PA1"]
# -------------------------------------------------

# Do the test -------------------------------------

# Check if the vrsnt_dbdump file exist
check_vrsnt_dbdump()
{
	if [ !  -x $SCRIPT ]; then
		RETURN_STATUS=7 #Failed, can not execute
		RETURN_STATUS_REASON="vrsnt_dbdump does NOT exist!"
		echo [OUTPUT:REASON:$RETURN_STATUS_REASON]

		exit $RETURN_STATUS
	fi

}
#Create the testdb_extra_vol database and add extra data volume
create_database_vol()
{	
	if [  -d $DB_DIR ]; then
		echo "$TARGET_DB exists!! recreate $TARGET_DB..."

		su - nmsadm -c "/opt/versant/ODBMS/bin/stopdb -s $TARGET_DB"
		su - nmsadm -c "/opt/versant/ODBMS/bin/removedb -noprint $TARGET_DB -rmdir"

		if [ $? -ne 0 ]; then
		
			RETURN_STATUS=7
			RETURN_STATUS_REASON="Error occurred when removing the $TARGET_DB!"
			echo [OUTPUT:REASON:$RETURN_STATUS_REASON]

			exit $RETURN_STATUS
		else
		
			echo "$TARGET_DB has been removed..."
		fi

	fi

	su - nmsadm -c "/opt/versant/ODBMS/bin/makedb $TARGET_DB"
	su - nmsadm -c "/opt/versant/ODBMS/bin/createdb $TARGET_DB"

	if [ $? -ne 0 ]; then
		
		RETURN_STATUS=7
		RETURN_STATUS_REASON="Error occurred when creating the $TARGET_DB!"
		echo [OUTPUT:REASON:$RETURN_STATUS_REASON]			
		exit $RETURN_STATUS

	else
		
		echo "$TARGET_DB has been created...Creating extra data volumn $TEMP_VOL"
	fi

	#Create extra volume
	su - nmsadm -c "/opt/versant/ODBMS/bin/addvol -n $TEMP_VOL -p $TEMP_VOL -s 50M $TARGET_DB"
	
	if [ $? -ne 0 ]; then
	
		RETURN_STATUS=7
		RETURN_STATUS_REASON="Error occurred when creating extra volumn $TEMP_VOL for
$TARGET_DB!"
		echo [OUTPUT:REASON:$RETURN_STATUS_REASON]

		exit $RETURN_STATUS
	fi
		
}


# Dump target database 
dump_database_vol()
{
	
	su - nmsadm -c "$SCRIPT $OPERATION $TARGET_DB"

	RETURN_STATUS=$?
	
	if [ $RETURN_STATUS -ne 0 ]; then

		RETURN_STATUS_REASON="Terminated with error!!"
		echo [OUTPUT:REASON:$RETURN_STATUS_REASON]
	fi

	exit $RETURN_STATUS

}




# Main --------------------------------------------
check_vrsnt_dbdump

create_database_vol

dump_database_vol



return $RETURN_STATUS


}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
