#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	#return 123


        
        ECHO=/usr/bin/echo
        DATE=/usr/bin/date
        SYSTEM_ENV=/etc/opt/ericsson/system.env
        SYSTEM_ENV=/etc/opt/ericsson/system.env
        VERSANT_BIN=/ericsson/versant/bin
        VINFO=/opt/versant/ODBMS/bin/vinfo
        VINFO_OUT=/tmp/vinfo_notok.txt
        #VERSANT_ROOT=/opt/versant/ODBMS
        

        if [ -f $VINFO_OUT ]; then
                rm $VINFO_OUT
        fi

        retcode=0
        
        if [ ! -f $SYSTEM_ENV ]; then
                echo "$SYSTEM_ENV not found cannot proceed"
                return 1
        else
                # Source needed files
                echo "Sourcing system.env $SYSTEM_ENV "
                set -a 
                . $SYSTEM_ENV
        fi
        # TC wont run withoutexporting VERSANT_ROOT first 

        export VERSANT_HOST_NAME=masterservice
        export VERSANT_DB=/export/versant/db
        export VERSANT_DBID=/export/versant/dbid
        export VERSANT_DBID_NODE=masterservice
        export VERSANT_HOME=/opt/versant/ODBMS
        export VERSANT_ROOT=/opt/versant/ODBMS




        # Call Vinfo -v
        echo  -e "\n Verify Versant Binaries "
        # write lines to tmp file which do not report back ok 
        $VINFO -v | grep -v "ok" > $VINFO_OUT 
        while read -r line
        do
                # We know dbtool will fail as it is a wrapper
                EXPECTED_FAILURE="bin/dbtool"
                echo "$line" | grep "$EXPECTED_FAILURE" > /dev/null 2>&1 
                if   [ $? -ne 0 ] ; then
                     echo "$line failed Versants VINFO check "
                     retcode=$(($retcode+1))
                fi
        done < "$VINFO_OUT"


        if [ $retcode -ne 0 ]; then
                echo -e "\n  Some Versant binaries failed vinfo -v check "
                return 1
        else
                echo -e "\n  Versant Binaries Check out ok "
        return 0
        fi


}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
