#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
# Get the name of our product from the framework
echo "[INPUT:PRODUCT]"
read PROD

RETURN_STATUS=0

#inc library
if [ ${PROD} = "syb" ]; then
. /ericsson/syb/lib/syb_libsvc.sh
fi

while getopts "dn:s:" option
do
    case $option in
        d) DEBUG=1;;
		 n) TEST_CASE=$OPTARG;;
		 s) SERVICES=`echo $OPTARG | sed -e "s/:/ /g"`;;
	esac
done

if [ $DEBUG ]; then
    set -x
fi
# -------------------------------------------------


# Mandatory information ---------------------------
echo "[OUTPUT:TESTCASENAME:$TEST_CASE]"
echo "[OUTPUT:TESTCASEDESCRIPTION:Checks that SMF services are running if they exist]"
echo "[OUTPUT:SCRIPTVERSION:PA1]"
# -------------------------------------------------


# Do the test -------------------------------------

if [ ${PROD} = "syb" ]; then
        svc_online
        RESULT=$?
        if [ $RESULT -ne 0 ]; then
                RETURN_STATUS_REASON="${RETURN_STATUS_REASON}Sybase SMF services cannot be enabled"
		echo [OUTPUT:REASON:$RETURN_STATUS_REASON]
		exit 1
        fi
fi


for foo in $SERVICES; do
	# Count lines that includes $foo
	PROCS=`svcs -a 2>/dev/null | grep ${foo} | cut -d' ' -f1 | wc -l`
	# Count lines that includes $foo and are online
	ONLINE_PROCS=`svcs -a 2>/dev/null | grep ${foo} | cut -d' ' -f1 | grep online | wc -l`

	# Check if all of the services were online
	if [ ! $PROCS = $ONLINE_PROCS ]; then
		RETURN_STATUS_REASON="${RETURN_STATUS_REASON:=Services offline}:${foo}"
		RETURN_STATUS=1
	fi
done


grep INFO /ericsson/eric3pp/etc/logging.properties > /dev/null 2>&1
if [ ! $? -eq 0 ]; then
RETURN_STATUS_REASON="${RETURN_STATUS_REASON}: Current RMI Logging level is not INFO!!!"
fi



# Return status and reason ------------------------
if [ "$RETURN_STATUS_REASON" ]; then
  echo [OUTPUT:REASON:$RETURN_STATUS_REASON]
fi

return $RETURN_STATUS
# -------------------------------------------------

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
