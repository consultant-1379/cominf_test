#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	#return 1
	return 0 

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

        # Check both JDK and ERIC3pp packages are installed on the
        # server
        pkginfo -q ERICjdk16
        ERICJDK=$?
        pkginfo -q EXTRjdk16
        EXTRJDK=$?
        pkginfo -q ERIC3pp
        ERIC3PP=$?

        if [ $ERICJDK -gt 0 -o $EXTRJDK -gt 0 -o $ERIC3PP -gt 0 ]; then
              echo "Required package not installed! ERICJDK=$ERICJDK, EXTRJDK=$EXTRJDK, ERIC3PP=$ERIC3PP"
              return 6
        fi
        # Check if RMI Registry is listed service then check if it's online
        RMIRESULT=`svcs -H rmiregistry_external`
        RMIRETURN=$?

        if [ $RMIRETURN -gt 0 ]; then
                echo "RMI Registry is not listed as a service!"
                return 5
        else
                echo "$RMIRESULT" | grep -i "^online *" >> /dev/null

                if [ $? -gt 0 ]; then
                      echo "RMI Registry is NOT online!"
                      echo $RMIRESULT
                      return 4
                fi


        fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    #  Will need to test this by running an RMI server and a client through port 50042, shouldn't be too hard
	return 123

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
    # Either the server & client are torn from the registry, or check if the service is stil up

	return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
