#!/bin/bash
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CMP=/usr/bin/cmp
CP=/usr/bin/cp
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
EXPR=/usr/bin/expr
FIND=/usr/bin/find
GREP=/usr/bin/grep
HEAD=/usr/bin/head
HOSTNAME=/usr/bin/hostname
ISQL=/opt/sybase/sybase/OCS-15_0/bin/isql
ID=/usr/bin/id
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MORE=/usr/bin/more
MV=/usr/bin/mv
NAWK=/usr/bin/nawk
PGREP=/usr/bin/pgrep
PWD=/usr/bin/pwd
RM=/usr/bin/rm
SAP=/opt/sybase/sybase/admin/etc/.sap
SED=/usr/bin/sed
SLEEP=/usr/bin/sleep
SORT=/usr/bin/sort
SVCADM=/usr/sbin/svcadm
SVCS=/usr/bin/svcs
SYBASE=/opt/sybase/sybase
SYBASE_ASE=/opt/sybase/sybase/ASE-15_0
SYBASE_OCS=/opt/sybase/sybase/OCS-15_0
TSS=/opt/ericsson/bin/pwAdmin
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
WC=/usr/bin/wc


# Sybase SQL server name
SQL_SERVER=masterdataservice

# Sybase SQL admin User
SA_USER="sa"

# Sybase Log directory
SYB_LOG_DIR=/var/opt/sybase/sybase/log

# ********************************************************************
#
#       Pre-execution Operations
#
# ********************************************************************
# Set the umask
umask 022


. /ericsson/syb/lib/syb_libsec.sh

# ********************************************************************
#
# 	functions
#
# ********************************************************************

### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
_err_msg_=$1

if [ ! "$_err_msg_" ]; then
        _err_msg_="Script aborted.......\n"
fi

$ECHO "\n$_err_msg_\n"

cd $SCRIPTHOME

$RM -f $_tem_conf_file_

exit 1
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#	none
# Return Values:
#	none
check_id() 
{
_check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
if [ "$_check_id_" != "$1" ]; then
    _err_msg_="You must be $1 to execute this script."
    abort_script "$_err_msg_"
fi
}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#	none
# Return Values:
#	none
get_absolute_path() 
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}



# Check SA password

SA_USER="sa"

if [ ! "$DSQUERY" ]; then
    SQL_SERVER=`$HEAD -n 2 $SYBASE/interfaces | $TAIL -1`
else
    SQL_SERVER=$DSQUERY
fi

#Check SA pwd if tss is available

if [ -x ${TSS} ]; then
    SA_PASS=`${TSS} -get $SQL_SERVER SQL $SA_USER 2>/dev/null`
    if [ ! "${SA_PASS}" ]; then
        if [ -s ${SYBASE}/admin/etc/.sybpw ]; then
            SA_PASS=`$CAT $SYBASE/admin/etc/.sybpw`
        fi
    fi
fi

if [ -s $SAP -a -z "${SA_PASS}" ]; then
    sys_dcsap
    SA_PASS=`cat $SAP`
    sys_ecsap
fi

if [ ! "${SA_PASS}" ]; then
    $ECHO "TSS is Unavailable & the Temporary Password file does not exist"
    exit 1
fi





### Function: test_js_login ###
test_js_login()
{
#
# Test that Job Scheduler is in Place 
#
#if [ -f /ericsson/syb/tmp/js_test ]; then
#rm /ericsson/syb/tmp/js_test
#fi
$ISQL -U$SA_USER -P$SA_PASS -o /ericsson/syb/tmp/js_test << EOISQL
select name from sysdatabases where name like "sybmgmtdb"
go
EOISQL
chmod 777 /ericsson/syb/tmp/js_test /dev/null 2>/dev/null
if [ "`grep -i -c sybmgmtdb /ericsson/syb/tmp/js_test`" -lt "1" ]; then
echo ""
echo "Validation - Failure sybmgmtdb database does not exist"
exit 1
else
echo ""
echo "Validation - Confirm sybmgmtdb database exists - "
fi
}




### Function: Validate Diagnostics
validate_diagnostics()
{
if [ -f /ericsson/syb/tmp/monon.diag ]; then
rm /ericsson/syb/tmp/monon.diag
fi

if [ -f /ericsson/syb/tmp/js.diag ]; then
rm /ericsson/syb/tmp/js.diag
fi

if [ -f /ericsson/syb/tmp/stat_pipe.diag ]; then
rm /ericsson/syb/tmp/stat_pipe.diag
fi

$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/monon.diag<< EOISQL
sp_configure "enable monitoring"
go
EOISQL

$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/js.diag<< EOISQL
sp_configure "enable job scheduler"
go
EOISQL

$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/stat_pipe.diag<< EOISQL
set nocount on
go
sp_configure "statement pipe max messages"
go
EOISQL

$ECHO "\nValidating Sybase Monitoring Configuration "

MON_ON=`$TAIL -4 /ericsson/syb/tmp/monon.diag | head -1 | awk -F" " '{print $6}'`
JS_ON=`$TAIL -4 /ericsson/syb/tmp/js.diag | head -1 | awk -F" " '{print $6}'`
STAT_PIPE=`$TAIL -2 /ericsson/syb/tmp/stat_pipe.diag | head -1 | awk -F" " '{print $7}'`
if [ "${MON_ON}" -eq 1 ]; then
$ECHO "\nSybase Monitoring is configured ON "
else
$ECHO "\nSybase Monitoring is configured OFF"
fi

if [ "${STAT_PIPE}" -ge 5000 ]; then
$ECHO "\nSybase Monitoring Configuration Validation Check for Statement Pipe Passed"
fi
$ECHO "\nValidating Sybase Job Scheduler Configuration "

if [ "${JS_ON}" -eq 1 ]; then
$ECHO "\nOK ==>Sybase Job Scheduler is configured ON "
else
$ECHO "\nNOK ==>Sybase Job Scheduler is configured Off "
fi

RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`


if [ -f /ericsson/syb/tmp/mda_max_time ]; then
rm /ericsson/syb/tmp/mda_max_time
fi


$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/mda_max_time<< EOISQL
set nocount on
go
select max(LastCheckpointTime) from monOpenDatabases
go
EOISQL
MDA_MAX_TIME=`$TAIL -1 /ericsson/syb/tmp/mda_max_time |sed -e 's/^[ \t]*//'`

if [ -f /ericsson/syb/tmp/mda_min_time ]; then
rm /ericsson/syb/tmp/mda_min_time
fi

$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/mda_min_time<< EOISQL
set nocount on
go
select min(LastCheckpointTime) from monOpenDatabases
go
EOISQL
MDA_MIN_TIME=`$TAIL -1 /ericsson/syb/tmp/mda_min_time |sed -e 's/^[ \t]*//'`

if [ -f /ericsson/syb/tmp/syb_boottime ]; then
rm /ericsson/syb/tmp/syb_boottime
fi

$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/syb_boottime<< EOISQL
set nocount on
go
select @@boottime
go
EOISQL
BOOTTIME=`$TAIL -1 /ericsson/syb/tmp/syb_boottime |sed -e 's/^[ \t]*//'`

$ECHO "\nQuick Audit of Sybase Default mda tables "
$ECHO "--------------------------------------------"
$ECHO "Sybase Server Last Started at $BOOTTIME"
$ECHO "Oldest MDA Data is from $MDA_MIN_TIME"
$ECHO "Current MDA Data is from $MDA_MAX_TIME"
$ECHO "Current Server Time is  $RUN_TIME"

if [ -f /ericsson/syb/tmp/admindb_min_time ]; then
rm /ericsson/syb/tmp/admindb_min_time
fi

$ISQL -Usa_monitor -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/admindb_min_time<< EOISQL
set nocount on
go
select min (InsertTime) from mon_t_pcache_db
go
EOISQL

DIAG_MIN_TIME=`$TAIL -1 /ericsson/syb/tmp/mda_min_time |sed -e 's/^[ \t]*//'`

if [ -f /ericsson/syb/tmp/admindb_max_time ]; then
rm /ericsson/syb/tmp/admindb_max_time
fi


$ISQL -Usa_monitor -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/admindb_max_time<< EOISQL
set nocount on
go
select max (InsertTime) from mon_t_dbspace
go
EOISQL

DIAG_MAX_TIME=`$TAIL -1 /ericsson/syb/tmp/admindb_max_time |sed -e 's/^[ \t]*//'`



if [ -f /ericsson/syb/tmp/syb_time ]; then
rm /ericsson/syb/tmp/syb_time
fi
$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/syb_time<< EOISQL
set nocount on
go
select convert(char(24),getdate(),100)
go
EOISQL

SYB_TIME=`$TAIL -1 /ericsson/syb/tmp/syb_time |sed -e 's/^[ \t]*//'`


if [ -f /ericsson/syb/tmp/lapse_time ]; then
rm /ericsson/syb/tmp/lapse_time
fi
$ISQL -Usa -P${SA_PASS} -w5000 -o/ericsson/syb/tmp/lapse_time<< EOISQL
set nocount on
go
select datediff(mi,"$DIAG_MAX_TIME","$SYB_TIME")
go
EOISQL

DIAG_LAPSE=`$TAIL -1 /ericsson/syb/tmp/lapse_time |sed -e 's/^[ \t]*//'`


$ECHO "\nQuick Audit of Ericsson Diagnostic tables "
$ECHO "--------------------------------------------"
$ECHO "Sybase Server Last Started at $BOOTTIME"
$ECHO "Oldest Admindb Diagnostic and Instrumentation Data is from $DIAG_MIN_TIME"
$ECHO "Current Admindb Diagnostic and Instrumentation Data is from $DIAG_MAX_TIME"
$ECHO "Current Server Time is  $RUN_TIME"
$ECHO "Current Sybase Server Clock Time is  $SYB_TIME"
$ECHO "Last Time Diagnostics Ran was $DIAG_LAPSE Minutes ago"

if [ "$DIAG_LAPSE" -gt 4 ];then 
$ECHO "\nMDA & Diagnostics if configured ON ...should be up to date i.e ran every 3 minutes!"
$ECHO "However Last Diagnostics is $DIAG_MAX_TIME...over $DIAG_LAPSE minutes ago"
$ECHO "\n==>NOK Test Fail"
else
$ECHO "\nMDA & Diagnostics is up to date i.e. ran last at $DIAG_MAX_TIME"
$ECHO "\n==>OK Test Pass"
fi

}


# ********************************************************************
#
#       Main body of program
#
# ********************************************************************
#
RUN_TIME=`$DATE '+%Y-%b-%d_%H.%M.%S'`



validate_diagnostics

chmod 777 /ericsson/syb/tmp/* > /dev/null 2>/dev/null

exit 0
