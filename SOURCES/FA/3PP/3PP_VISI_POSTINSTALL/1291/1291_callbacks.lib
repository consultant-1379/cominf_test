#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

        # Coded to fail in case TC_AUTOMATED=1 before automation completed
        # Change return code as required
        HOST_FILE=/etc/hosts
        NAMESERV_SCRIPT=/ericsson/bes/bin/nameservice-init-functions.sh

        svcs -a |grep -i nameservice | grep online
        nameservice=$?
        grep masterservice-v6 $HOST_FILE 
        ipv6=$?
        grep ipnodes $NAMESERV_SCRIPT
        ipnodes=$?

        if [[ $nameservice -ne 0 || $ipv6 -ne 0 || $ipnodes -ne 0 ]] ; then
           echo "NOT OK!"
           echo "Possiblity for failure: 1) nameservice is not online 2) did not find an ipv6 adress in $HOST_FILE 3) ipnodes is not found in $NAMESERV_SCRIPT"
           exit 0
         else
           echo "OK nameservice is online and ipv6 is present in hosts file"
           return 0
        fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE      success
# != SPEC_TC_TEST_PASSCODE      failure

tc_test() {

        # Coded to fail in case TC_AUTOMATED=1 before automation complete
        # Change return code as required
        MASTER_IPV6=`getent ipnodes masterservice-v6 | nawk -F"\t" '{print $1}'`
        ip=$?
        /opt/borland/bes/bin/nsutil -VBJprop ORBInitRef=NameService=corbaloc::${MASTER_IPV6}:50073/NameService list
        context=$?
        count=0
        while [ $ip -ne 0 ] && [ $context -ne 0 ] && [ ${count} -lt 20 ]; do
                count=`expr ${count} + 1`
                sleep 1
        done

        return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
