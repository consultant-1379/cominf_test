#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	xsougha		First Version	

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
FLAG=0
	# Verifying whether the attribute "pwdMustChange" is "TRUE" or not. If not, change it to "TRUE"
	passwordMustChange_value=($(ldapsearch -T -p 389 -D "cn=directory manager" -w "ldappass"  -b "cn=securitypolicy,dc=vts,dc=com" objectclass=ldapsubentry | grep pwdMustChange | awk -f":" '{print $2}'))

	if [ "$passwordMustChange_value" != "TRUE" ]
	then
		# Changing passwordMustChange attribute to TRUE
        	echo "dn: cn=SecurityPolicy,dc=vts,dc=com
changetype: modify
replace: pwdMustChange
pwdMustChange: TRUE" > /var/tmp/1685_modify_security_policy.ldif

        	# Performing ldapmodify with the changed security settings
        	ldapmodify -D "cn=directory manager" -w ldappass -a -v -f /var/tmp/1685_modify_security_policy.ldif || {
                	echo "Failed to perform ldapmodify with the changed security settings"
                	return 1
        	}
		FLAG=1
	fi	

	# Adding user 
	${AT_BIN}/con_ex.bsh -d 1685_add_user.in -o 1685_add_user.exp -c "/ericsson/sdee/bin/add_user.sh -d vts.com"
	/usr/local/bin/expect 1685_add_user.exp 
	CONSOLE_OUTPUT_CONTAINS "OK: Account created" || {
		echo "Failed to add a user in vts.com"
		return 2
	}
	# Logging in through the created user account, and changing the password
        ${AT_BIN}/con_ex.bsh -d 1685_change_password.in -o 1685_change_password.exp -c "ssh u1685@ossmaster"
        /usr/local/bin/expect 1685_change_password.exp || {
                echo "Failed to add a user in vts.com"
                return 1
        }

	# Logging in through the created user account, and trying to change password again
        ${AT_BIN}/con_ex.bsh -d 1685_check_password_change.in -o 1685_check_password_change.exp -c "ssh u1685@ossmaster"
        /usr/local/bin/expect 1685_check_password_change.exp 
	CONSOLE_OUTPUT_CONTAINS "passwd: Password can not be changed yet, not enough time has passed." || {
                echo "Failed to add a user in vts.com"
                return 2
        }
	[ $FLAG = 1 ] && {
		# Changing passwordMustChange attribute to TRUE
        	echo "dn: cn=SecurityPolicy,dc=vts,dc=com
changetype: modify
replace: pwdMustChange
pwdMustChange: FALSE" > /var/tmp/1685_modify_security_policy.ldif

        	# Performing ldapmodify with the changed security settings
        	ldapmodify -D "cn=directory manager" -w ldappass -a -v -f /var/tmp/1685_modify_security_policy.ldif || {
                	echo "Failed to perform ldapmodify with the changed security settings"
                	return 1
        	}
	}
		
	 

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Deleting user
	${AT_BIN}/con_ex.bsh -d 1685_del_user.in -o 1685_del_user.exp -c "/ericsson/sdee/bin/del_user.sh"
	/usr/local/bin/expect 1685_del_user.exp
	CONSOLE_OUTPUT_CONTAINS "OK: Account deleted" || {
		echo "Failed to delete user from vts.com"
		return 3
	}
	rm -rf *.exp

	return 0
}
