#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	xsougha		First Version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
        # Change the LDAP directory manager password
        ${AT_BIN}/con_ex.bsh -d 1683_chg_ds_admin_password.in -o 1683_chg_ds_admin_password.exp  -c "/ericsson/sdee/bin/chg_ds_admin_password.sh"
        /usr/local/bin/expect 1683_chg_ds_admin_password.exp
        CONSOLE_OUTPUT_CONTAINS "Changing LDAP Directory Manager password ... OK" || {
                echo "Failed to change LDAP Directory Manager password"
                return 1
        }

        # Execute ldapsearch command with changed password ldap1683 to verify the same
        ldapsearch -D "cn=directory manager" -w ldap1683 -b "dc=vts,dc=com" "objectclass=*" &>/dev/null || {
                echo "Failed to perform ldapsearch with changed ldap directory manager password"
                return 1
        }

        # Change the LDAP directory manager password with -d <domain name>
        ${AT_BIN}/con_ex.bsh -d 1683_chg_ds_admin_password_d.in -o 1683_chg_ds_admin_password_d.exp  -c "/ericsson/sdee/bin/chg_ds_admin_password.sh -d vts.com"
        /usr/local/bin/expect 1683_chg_ds_admin_password_d.exp
        CONSOLE_OUTPUT_CONTAINS "Changing LDAP Directory Manager password ... OK" || {
                echo "Failed to change LDAP Directory Manager password"
                return 1
        }

        # Execute ldapsearch command with changed password ldap1683 to verify the same
        ldapsearch -D "cn=directory manager" -w ldap1683_2 -b "dc=vts,dc=com" "objectclass=*" &>/dev/null || {
                echo "Failed to perform ldapsearch with changed ldap directory manager password"
                return 1
        }

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	# Change the ldap directory manager password back to the original password
        ${AT_BIN}/con_ex.bsh -d 1683_reset_ds_admin_password.in -o 1683_reset_ds_admin_password.exp  -c "/ericsson/sdee/bin/chg_ds_admin_password.sh"
        /usr/local/bin/expect 1683_reset_ds_admin_password.exp
        CONSOLE_OUTPUT_CONTAINS "Changing LDAP Directory Manager password ... OK" || {
                echo "Failed to change LDAP Directory Manager password"
                return 1
        }

        # Execute ldapsearch command with reset original password ldappass to verify the same
        ldapsearch -D "cn=directory manager" -w ldappass -b "dc=vts,dc=com" "objectclass=*" &>/dev/null || {
                echo "Failed to perform ldapsearch with changed ldap directory manager password"
                return 1
        }

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	# Removing any temporary files used
	rm -rf *.exp

	return 0
}
