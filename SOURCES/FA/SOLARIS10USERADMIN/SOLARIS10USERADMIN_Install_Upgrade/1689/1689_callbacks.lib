#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	xsougha		First Version	

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	# Adding a ldap domain with domain name length more than 65 chars
        ${AT_BIN}/con_ex.bsh -d 1689_add_ldap_domain.in -o 1689_add_ldap_domain.exp -c "/ericsson/sdee/bin/prepSUNDS.sh -c"
        /usr/local/bin/expect 1689_add_ldap_domain.exp || {
                echo "Failed to add new ldap domain with name length more than 65 characters"
                return 1
        }

	# Adding user to the newly added domain
	${AT_BIN}/con_ex.bsh -d 1689_add_user.in -o 1689_add_user.exp -c "/ericsson/sdee/bin/add_user.sh -d vts.com"
	/usr/local/bin/expect 1689_add_user.exp 
	CONSOLE_OUTPUT_CONTAINS "Ok: Account created" || {
		echo "Failed to add a user in vts.com"
		return 1
	}

        # Inactivating the user account u1689
        /opt/SUNWdsee/ds6/bin/ns-inactivate -D "cn=directory manager" -w ldappass -I "uid=u1689,ou=people,dc=vts,dc=com"
        CONSOLE_OUTPUT_CONTAINS "uid=u1689,ou=people,dc=vts,dc=com inactivated." || {
                echo "Failed to inactivate user account u1689"
                return 1
        }

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
        # Activating the user account u1689
        /opt/SUNWdsee/ds6/bin/ns-activate -D "cn=directory manager" -w ldappass -I "uid=u1689,ou=people,dc=vts,dc=com"
        CONSOLE_OUTPUT_CONTAINS "uid=u1689,ou=people,dc=vts,dc=com activated." || {
                echo "Failed to activate user account u1689"
                return 1
        }



	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	# Deleting user from the newly created domain
	${AT_BIN}/con_ex.bsh -d 1689_del_user.in -o 1689_del_user.exp -c "/ericsson/sdee/bin/del_user.sh"
	/usr/local/bin/expect 1689_del_user.exp
	CONSOLE_OUTPUT_CONTAINS "Ok: Account deleted" || {
		echo "Failed to delete user from vts.com"
		return 1
	}
        # Deleting the created ldap domain
        ${AT_BIN}/con_ex.bsh -d 1689_delete_ldap_domain.in -o 1689_delete_ldap_domain.exp -c "/ericsson/sdee/bin/prepSUNDS.sh -r"
        /usr/local/bin/expect 1689_delete_ldap_domain.exp
        CONSOLE_OUTPUT_CONTAINS "INFO Domain [1689_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde_abcde] successfully removed: OK" || {
                echo "Failed to delete the newly created ldap domain with name length more than 65 characters"
                return 1
        }
	rm -rf *.exp

	return 0
}
