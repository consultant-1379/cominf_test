#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

        ##LDAP Client Configuration##
        echo "LDAP Client Configuration"
        echo "-------------------------"
	. ${AT_ROOT}/preinirate_${HOSTNAME}
	echo "$LDAPSERVERIP = $LDAPSERVERIP"
	echo "SECONDARYLDAPSERVERIP = $SECONDARYLDAPSERVERIP"
        /opt/ericsson/sck/bin/configure_ldap.bsh -g -y
        if [ $? -eq 0 ]
        then
                echo "/opt/ericsson/sck/bin/configure_ldap.bsh -g -y completed successfully"
        else
                echo "ERROR: /opt/ericsson/sck/bin/configure_ldap.bsh -g -y failed"
                return 1
        fi

        sleep 5

        if [ ! -f /var/ldap/ldap_client_file ] ;
        then
                echo "ERROR: could not find /var/ldap/ldap_client_file"
                return 1
        fi

        grep "NS_LDAP_SERVERS" /var/ldap/ldap_client_file | grep ","
        if [ $? -eq 0 ]
        then
                ldap_ip=$( grep "NS_LDAP_SERVERS" /var/ldap/ldap_client_file | sed 's/,//' | awk '{print $2}')
        else
                ldap_ip=$( grep "NS_LDAP_SERVERS" /var/ldap/ldap_client_file | awk '{print $2}' )
        fi
	if [ -z "$ldap_ip" ]; then
		echo "ERROR: ldap_ip is empty"
		return 1
	fi
	if [ "$ldap_ip" != "$LDAPSERVERIP" ]; then
		echo "ERROR: IP addresses do not match. \"$ldap_ip\" != \"$LDAPSERVERIP\" " 
		return 1
	fi
        hname=`hostname`
        hsname=${hname}.com
        hostname_is=$hsname

/usr/local/bin/expect << EOF
	set timeout 1800
        log_file config_ldap
        spawn /opt/ericsson/sck/bin/configure_ldap.bsh -m
        expect "Run the LDAP migration now on the Master Server"
        send "y\r"
        expect "LDAP DS IP address"
        send "${ldap_ip}\r"
        expect "LDAP domain name :"
        send "${hsname}\r"
        expect "LDAP migration bind DN "
        send "\r"
        expect "Are the values ok"
        send "y\r"
        expect "LDAP migration bind password:ldapadmin"
        send "ldapadmin\r"
        expect closed
EOF

        if [ $? -eq 0 ]
        then
                echo "/opt/ericsson/sck/bin/configure_ldap.bsh -m completed successfully"
        else
                echo "ERROR: /opt/ericsson/sck/bin/configure_ldap.bsh -m failed"
                return 1
        fi

        rm -rf config_ldap > /dev/null 2>&1

        sleep 5

        /opt/ericsson/sck/bin/configure_ldap.bsh -e
        if [ $? -eq 0 ]
        then
                echo "/opt/ericsson/sck/bin/configure_ldap.bsh -e completed successfully"
        else
                echo "ERROR: /opt/ericsson/sck/bin/configure_ldap.bsh -e failed"
                return 1
        fi

        sleep 5

/usr/local/bin/expect << EOF
        log_file maintain_ldap
        spawn /opt/ericsson/sck/bin/maintain_ldap.bsh
        set timeout 120
        while 1 {
        expect { 
                "Continue to update LDAP" {
	                send "y\r"}
	        "LDAP domain name DN" {
	                send "\r"}
	        "LDAP DS IP address list" {
	                send "\r"} 
	        "LDAP maintenance bind DN" {
	                send "\r"}
	        "Are the values ok" {
	                send "y\r"}
	        "LDAP maintenance bind password:" {
	                send "ldapadmin\r"}
                "No LDAP update required" {
                        break}
	        timeout {
                        puts "Timeout"
                        exit 1}
                }       
        }
EOF

        if [ $? -eq 0 ]
        then
                echo "/opt/ericsson/sck/bin/maintain_ldap.bsh completed successfully"
        else
                echo "ERROR: /opt/ericsson/sck/bin/maintain_ldap.bsh failed"
		return 1
        fi

        rm -rf maintain_ldap > /dev/null 2>&1

        return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	return 0

}
