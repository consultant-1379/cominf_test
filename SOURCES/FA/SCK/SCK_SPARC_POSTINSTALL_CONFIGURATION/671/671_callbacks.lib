#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

        ##Defining Mirror using DMR##
        echo "Defining Mirror using DMR"
        echo "-------------------------"

        if [ -f /ericsson/dmr/etc/dm_define ]
        then
                echo "dmtool is already configured"
                return 1
        fi

/usr/local/bin/expect << EOF
        log_file mirror_dmr_logs
        spawn /ericsson/dmr/bin/dmtool
        expect "How many mirrors should be defined"
        send "2\r"
        expect "Continue "
        send "y\r"
        expect "Enter selection"
        send "q\r"
        expect closed
EOF

>disk_info_file
        root_disk_count=$(vxdisk list | grep - | awk '$4 == "-" {print $1}' | wc -l | sed 's/ //g' | cut -c1)
        while [ $root_disk_count -ne 0 ]
        do
                root_disk=$(vxdisk list | grep - | head -$root_disk_count |tail -1 | awk '{print$1}')
                echo "ROOT_DISK_$root_disk_count=$root_disk" >> disk_info_file
                root_disk_count=`expr $root_disk_count - 1`
        done

        data_disk_count=$(vxdisk list | grep ossdg | wc -l | sed 's/ //g' | sed 's/ //g' | cut -c1)
        while [ $data_disk_count -ne 0 ]
        do
                data_disk=$(vxdisk list | grep ossdg | head -$data_disk_count |tail -1 | awk '{print $1}')
                echo "DATA_DISK_$data_disk_count=$data_disk" >> disk_info_file
                data_disk_count=`expr $data_disk_count - 1`
        done

        root_disk_one=$(grep ROOT_DISK_1 disk_info_file | cut -f2 -d"=")
        root_disk_one_entry=$(grep $root_disk_one mirror_dmr_logs | nawk '{if(match($2,/'"$root_disk_one"'/)) {print $1}}')

        root_disk_two=$(grep ROOT_DISK_2 disk_info_file | cut -f2 -d"=")
        root_disk_two_entry=$(grep $root_disk_two mirror_dmr_logs | nawk '{if(match($2,/'"$root_disk_two"'/)) {print $1}}')

        data_disk_one=$(grep DATA_DISK_1 disk_info_file | cut -f2 -d"=")
        data_disk_one_entry=$(grep $data_disk_one mirror_dmr_logs | nawk '{if(match($2,/'"$data_disk_one"'/)) {print $1}}')

        data_disk_two=$(grep DATA_DISK_2 disk_info_file | cut -f2 -d"=")
        data_disk_two_entry=$(grep $data_disk_two mirror_dmr_logs | nawk '{if(match($2,/'"$data_disk_two"'/)) {print $1}}')

        echo "root_disk_one is $root_disk_one"
        echo "root_disk_one_entry is $root_disk_one_entry"

        echo "root_disk_two is $root_disk_two"
        echo "root_disk_two_entry is $root_disk_two_entry"

        echo "data_disk_one is $data_disk_one"
        echo "data_disk_one_entry is $data_disk_one_entry"

        echo "data_disk_two is $data_disk_two"
        echo "data_disk_two_entry is $data_disk_two_entry"

        rm mirror_dmr_logs


/usr/local/bin/expect << EOF
        set stty_init "rows 100"
        spawn /ericsson/dmr/bin/dmtool
        set timeout -1
        expect "How many mirrors should be defined"
        send "2\r"
        expect "Is this a good mirror definition" { send "y\r" ; exp_continue } \
               "Continue (y/n)" { send "y\r" }
        expect -re "Enter ROOT disk for Mirror 1.*Enter selection" { send "$root_disk_one_entry\r" ; exp_continue } \
               -re "Enter all DATA disks for Mirror 1.*Enter selection" { send "$data_disk_one_entry\r" ; exp_continue } \
               -re "Enter ROOT disk for Mirror 2.*Enter selection" { send "$root_disk_two_entry\r" ; exp_continue } \
               -re "Enter all DATA disks for Mirror 2.*Enter selection" { send "$data_disk_two_entry\r" }
        expect "Is this correct" 
        send "y\r"
        expect -re "===> Mirror Status.*Enter selection"
        send "q\r"
        expect closed
EOF

#/usr/local/bin/expect << EOF
#        spawn /ericsson/dmr/bin/dmtool
#        expect "WARNING: There is another dmtool running!.*Do you really want to continue" { send "y\n"; exp_continue } \
#               "Enter selection" { send "sy\r" }
#        expect "Attach those plexes"
#        send "y\r"
#        expect -re "Attach Mirror.*Enter selection"
#        send "q\r"
#        expect closed
#EOF

        return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	return 0

}
