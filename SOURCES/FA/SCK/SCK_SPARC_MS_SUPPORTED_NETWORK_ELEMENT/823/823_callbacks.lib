#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

# Checking the MC's Status

        echo "checking the status of MC's"

        MC_Status=`/opt/ericsson/nms_cif_sm/bin/smtool list | grep -v started | egrep  'MAF|ONRM_CS|ARNEServer' | wc -l | awk '{print $1}'`

        if [ ${MC_Status} -ne 0 ]; then

                 echo "check the failed MC"
                 echo "Online the Faulted MC's from the below list to import the nodes to OSS "
                /opt/ericsson/nms_cif_sm/bin/smtool list | egrep  'MAF|ONRM_CS|ARNEServer' | egrep 'failed|unlicensed|stopped|offline'
                 return 1
        else
                 echo "No failed MC"
                 return 0
        fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

 	# Validating the ARNE xml files
        # Importing the ARNE xml files

	ADMINHOSTNAME=`uname -a | awk '{print $2}'`
        arne_xml=${AT_ROOT}/CORE_O13_2_${ADMINHOSTNAME}_create.xml
        IMPORT_LOG=/var/tmp/CORE_import.log
	VAL_LOG=/var/tmp/CORE_validation.log

        if [[ -f $arne_xml ]]; then
                echo "Arne xml found"
                echo "validating arne xml file"
                /opt/ericsson/arne/bin/import.sh -f $arne_xml -val:rall > $VAL_LOG
        else
                echo "Arne file not found"
                return 1
        fi


        _error=`tail -1 $VAL_LOG | awk '{print $3}'`

        if [ ${_error} -eq 0 ]; then
                echo "Importing ARNE xml file"
                /opt/ericsson/arne/bin/import.sh -f $arne_xml -import -i_nau > $IMPORT_LOG

        else
                echo "Validation of arne xml failed"
                return 1
	fi


        _error1=`tail -1 $IMPORT_LOG | awk '{print $3}'`

        if [ ${_error1} == "No" ]; then
                echo "Import is sucessfull"

        else
                echo "ARNE Import Failed check the Import Logs"

                return 1
        fi
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

        # Checking the Logs for errors
        # Checking the Number of Managed elements imported

        arne_xml=${AT_ROOT}/CORE_O13_2_${ADMINHOSTNAME}_create.xml

        NUM_NODES_IMPORTED=`grep "Site userLabel" $arne_xml | wc -l`

        echo "Number of CORE Nodes Imported is $NUM_NODES_IMPORTED"

        return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
