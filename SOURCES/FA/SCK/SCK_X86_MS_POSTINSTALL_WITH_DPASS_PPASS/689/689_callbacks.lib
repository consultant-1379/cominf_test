#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
        #we have funcs to check if we have two good mirrors.
        #Called from eg split_cluster scipt.
        #But in a cluster we will have ossdg in one and sybasedg in the other.
        #But dm-define shold define both.
        #So not so easy to check it.

        ##Defining Mirror using DMR##
        echo "Defining Mirror using DMR"
        echo "-------------------------"
        . ${AT_ROOT}/${HOSTNAME}.env || return 1

        if [  -f /ericsson/dmr/etc/dm_define ]; then
                /ericsson/dmr/bin/dmtool check_startup | egrep -e '(WARNING|"NO MIRROR DEFINITION FOUND")'
                if  [ $? -eq 0 ]; then
                               echo "Error: Issue with /ericsson/dmr/etc/dm_define "
                               return 1
                fi
                echo "/ericsson/dmr/etc/dm_define exists. not updating."
                #Since you have the info about root and data disks to use from inirator, just put that info into dm_define.
                return 0
        fi
        # if dm_define doesn't exist then peform this section
        if [ ! -z "${CI_DMRDEF[0]}" ]; then
                echo "Creating /ericsson/dmr/etc/dm_define."
                echo "${CI_DMRDEF[0]}" > /ericsson/dmr/etc/dm_define
                echo "${CI_DMRDEF[1]}" >> /ericsson/dmr/etc/dm_define
                echo "${CI_DMRDEF[2]}" >> /ericsson/dmr/etc/dm_define
                /ericsson/dmr/bin/dmtool  check_startup | egrep -e '(WARNING|"NO MIRROR DEFINITION FOUND")'
                if  [ $? -eq 0 ]; then
                        echo "Error: Issue with /ericsson/dmr/etc/dm_define "
                         return 1
                fi
                return 0
        fi
# just keeping this below for later test case. it is not used.

/usr/local/bin/expect << EOF
        set stty_init "rows 100"
        spawn /ericsson/dmr/bin/dmtool

        set timeout 50
        expect "     Enter selection:" { send "q\n" } \
               "How many mirrors should be defined" { send "2\n" ; exp_continue } \
               "Is this a good mirror definition" { send "y\n" } \
               -re "WARNING: There is another dmtool running.*Do you really want to continue " { send "n\n" } \
               "     Enter selection:" { send "q\n" }
EOF
        echo "Sleeping for a bit. Observerved that it may take a sec for dm_define to get created."
        sleep 10
        if [[ ! -f /ericsson/dmr/etc/dm_define ]] ;
        then
                echo "Error in DMR configuration"
                return 1
        fi
        echo "Testing if dmr is Successfully configured vxdisk list | grep auto:SVM | awk '{print $1}'"
        if [[ $(tail -2 /ericsson/dmr/etc/dm_define | awk '{print $1}') == \
              $(vxdisk list | grep auto:SVM | awk '{print $1}') ]] ;
        then
                echo "Sucessfully configured"
                return 0
        else
                echo "Error in DMR configuration"
                return 1
        fi
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	return 0

}
