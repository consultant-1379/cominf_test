#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 17/12/12	xamamcg		Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	# Delete Test Network and Test Client before failover
      	DHCP_NETWORK_EXISTS 114.41.93.0 &>/dev/null && {
                echo "Test Network already exists, removing...."
                /ericsson/ocs/bin/ai_manager.sh -delete net -a 114.41.93.0 -q || {
                        echo "Error removing test network, error code $?"
                        return 1
                }
        }
	DHCP_CLIENT_IN_CONFIG node1 114.41.93.7 &>/dev/null && {
		echo "Test Client already exists, removing...."
		/ericsson/ocs/bin/ai_manager.sh -delete client -i node1 -q || {
			echo "Error removing test client, error code $?"
			return 1
		}
	}

	# This is to test failback, so in setup failover!
	echo "Failing Over..."
	ssh -o StrictHostKeyChecking=no om_serv_slave '/ericsson/ocs/bin/activate_isc_dhcp.sh om_serv_slave' &>/dev/null || { 
		echo "Failed to run activate_isc_dhcp $? on the om_serv_slave"
		return 1
	}
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	DHCP_SERVER_RUNNING &>/dev/null && { 
		echo "dhcpd running on primary"
		return 1
	}
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /var/run/dhcpd.pid' &>/dev/null || { 
		echo "dhcpd running on secondary"
		return 2
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	# Add a network so that can prove that it does sync the network files up
	ssh -o StrictHostKeyChecking=no om_serv_slave '/ericsson/ocs/bin/ai_manager.sh -add net -a 114.41.93.0 -m 255.255.255.0 -r 114.41.93.1 -d abcdef.com -n 127.0.0.1 -q' &>/dev/null || { 
		echo "Failed to add network $?"
		return 1
	}
	# Add a client so that can prove that it does sync the client files up
	ssh -o StrictHostKeyChecking=no om_serv_slave '/ericsson/ocs/bin/ai_manager.sh -add client -a 114.41.93.7 -h node1.abcdef.com -i node1 -s 127.0.0.1 -p /var/tmp/temp.xml -q' &>/dev/null || { 
		echo "Failed to add client $?" 
		return 2
	}
	# Do a list to prove both are there
	ssh -o StrictHostKeyChecking=no om_serv_slave '/ericsson/ocs/bin/ai_manager.sh -list all' > all_sec.tmp
	grep node1 all_sec.tmp &>/dev/null || { 
		echo "Client not seen on list before failover"
		return 3
	}
        grep 114.41.93.0 all_sec.tmp &>/dev/null || { 
		echo "Network not seen on list before failover"
		return 4
	}

	# Now failover
	echo "Failing over to master"
	/ericsson/ocs/bin/activate_isc_dhcp.sh om_serv_master &>/dev/null || { 
		echo "Failed to run activate_isc_dhcp $? on the om_serv_master"
		return 5
	}

	# Do a list to prove both are there
	/ericsson/ocs/bin/ai_manager.sh -list all > all_prim.tmp
	grep node1 all_prim.tmp &>/dev/null || { 
		echo "Client not seen on list after failover"
		return 6
	}
        grep 114.41.93.0 all_prim.tmp &>/dev/null || { 
		echo "Network not seen on list after failover"
		return 7
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	# Verify running on primary
	DHCP_SERVER_RUNNING &>/dev/null || { 
		echo "dhcpd NOT running on primary"
		return 1; 
	}
	# Verify NOT running on secondary
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /var/run/dhcpd.pid' &>/dev/null && { 
		echo "dhcpd running on secondary"
		return 2
	}
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /var/run/dhcpd6.pid' &>/dev/null && { 
		echo "dhcpd6 running on secondary"
		return 2
	}

	# Verify dhcp files synch'd
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /usr/local/etc/dhcpd.conf' > dhcpd.conf.tmp
	diff /usr/local/etc/dhcpd.conf dhcpd.conf.tmp || { 
		echo "dhcpd.conf differs"
		return 3
	}
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /usr/local/etc/dhcpd.conf_subnet' > dhcpd.conf_subnet.tmp
	diff /usr/local/etc/dhcpd.conf_subnet dhcpd.conf_subnet.tmp || { 
		echo "dhcpd.conf_subnet differs"
		return 4
	}
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /usr/local/etc/dhcpd.conf_static' > dhcpd.conf_static.tmp
	diff /usr/local/etc/dhcpd.conf_static dhcpd.conf_static.tmp || { 
		echo "dhcpd.conf_static differs"
		return 5
	}
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /var/lib/dhcp/dhcpd.leases' > dhcpd.leases.tmp
	diff /var/lib/dhcp/dhcpd.leases dhcpd.leases.tmp || { 
		echo "dhcpd.leases differs"
		return 6
	}


#	CONSOLE_OUTPUT_CONTAINS "INFO Stopping the DHCP IPv4 service on the om_serv_slave" || { echo "No message about stopping DHCP on slave"; return 11; }
#	CONSOLE_OUTPUT_CONTAINS "INFO Stopping the DHCP IPv6 service on the om_serv_slave" || { echo "No message about stopping DHCP6 on slave"; return 12; }
#	CONSOLE_OUTPUT_CONTAINS "INFO Starting the DHCP IPv4 service on om_serv_master" || { echo "No message about starting DHCP on master"; return 13; }
#	CONSOLE_OUTPUT_CONTAINS "INFO Starting the DHCP IPv6 server on om_serv_master" || { echo "No message about starting DHCP6 on master"; return 14; }


	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Switch dhcp off on secondary (in case test failed)
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /var/run/dhcpd.pid' &>/dev/null && { 
		ssh -o StrictHostKeyChecking=no om_serv_slave '/etc/rc2.d/S96dhcpd stop' &>/dev/null || {
			echo "Unable to switch off dhcp on secondary"
			return 1
		}
	}
	ssh -o StrictHostKeyChecking=no om_serv_slave 'cat /var/run/dhcpd6.pid' &>/dev/null && { 
		ssh -o StrictHostKeyChecking=no om_serv_slave '/etc/rc2.d/S96dhcpd stop' &>/dev/null || {
			echo "Unable to switch off dhcp6 on secondary"
			return 2
		}
	}

	# Switch dhcp on on primary
	DHCP_SERVER_RUNNING &>/dev/null || { 
		/etc/rc2.d/S96dhcpd start || {
			echo "Unable to start DHCP on primary"
			return 3
		}
	}
	/ericsson/ocs/bin/ai_manager.sh -delete client -i node1 -q &>/dev/null || {
		echo "Unable to delete test client"
		return 5
	}
	/ericsson/ocs/bin/ai_manager.sh -delete net -a 114.41.93.0 -q &>/dev/null || {
		echo "Unable to delete test network"
		reutrn 6
	}
	# Remove any temporary files
	rm -f *.tmp
}
