#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-08-09    xfeldan    Initial version
# 2012-08-16    xsimrea    Added checks on GET_CONFIG_SECTION

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	echo "Adding networks:"
	for net in 234.234.232.0 106.206.184.0 114.41.88.0 149.170.254.0; do
		DHCP_NETWORK_EXISTS $net &>/dev/null || {
			/ericsson/ocs/bin/ai_manager.sh -add net -a $net -m 255.255.255.0 -r ${net%0}12 -d conservapedia.org -n 1.1.1.1 -q &>/dev/null 
		}
	done

#	# Do not add IPv6 network - ai_manager.sh does not support it
#	/ericsson/ocs/bin/ai_manager.sh -add net -a 2300:ff80:1080:0:0:0:0:0 -m ffff:ffff:ffff:f000:0:0:0:0 -r 2300:ff80:1080:49:19:6:2:1f -d conservapedia.org -n 1.1.1.1

#	DHCP_NETWORK_EXISTS $net || {
#		/ericsson/ocs/bin/ai_manager.sh -add net -a $net -m 255.255.248.0 -r $ip -d conservapedia.org -n 1.1.1.1
#	}

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	DHCP_SERVER_INSTALLED || {
		echo "DHCP server not installed"
		return 1
	}

	DHCP_SERVER_RUNNING &>/dev/null || {
		echo "DHCP server not running"
		return 2
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	echo "Test 1: Add LTE client in quiet mode with NTP primary and zero offset"

	echo "As root: /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 234.234.232.12 -h valid -i testclient1 -s 2.2.2.2 -p 3.3.3.3 -t \"4.4.4.4\" -u 0 -q"
	/ericsson/ocs/bin/ai_manager.sh -add lte_client -a 234.234.232.12 -h valid -i testclient1 -s 2.2.2.2 -p 3.3.3.3 -t "4.4.4.4" -u 0 || {
		echo "Error creating test LTE client, error code $?"
		return 1
	}

	echo "\nTest 2: Add LTE client in quiet mode with NTP primary and non-zero offset"
	echo "As root: /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 106.206.184.12 -h valid -i testclient2 -s 2.2.2.2 -p 3.3.3.3 -t \"4.4.4.4\" -u 3 -q"
	/ericsson/ocs/bin/ai_manager.sh -add lte_client -a 106.206.184.12 -h valid -i testclient2 -s 2.2.2.2 -p 3.3.3.3 -t "4.4.4.4" -u 3 -q || {
		echo "Error creating test LTE client with NTP primary, error code $?"
		return 2
	}

	echo "\nTest 3: Add LTE client in quiet mode with NTP secondary"
	echo "As root: /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 114.41.88.12 -h valid -i testclient3 -s 2.2.2.2 -p 3.3.3.3 -t \"4.4.4.4 5.5.5.5\" -u 0 -q"
	/ericsson/ocs/bin/ai_manager.sh -add lte_client -a 114.41.88.12 -h valid -i testclient3 -s 2.2.2.2 -p 3.3.3.3 -t "4.4.4.4 5.5.5.5" -u 0 || {
		echo "Error creating test LTE client with NTP secondary, error code $?"
		return 3
	}
	CLIENT=om_serv_slave
#	GET_CONFIG_SECTION $G_CONFIG_INI_FILE host CONFIG $CLIENT>tmp_config
#	IPV6_ADDR=$(awk -F= '$1 ~ /^IPV6_ADDR$/{print $2;exit}' tmp_config)
#	[ -n "$IPV6_ADDR" ] || {
#		echo "\$IPV6_ADDR variable not set, check $G_CONFIG_INI_FILE"
#		return 1
#	}
	#Obtain om_serv_slave ip address by grep from the /etc/hosts file
	MASTER_IP=$(grep om_serv_slave /etc/hosts | awk {'print $1'})

	#grep -v \# is so that it ignores any comments in the file
	NTP_IP=$(grep server /etc/inet/ntp.conf | grep -v \# | awk {'print $2'})

	echo "Test 4: Add real LTE client (use om_serv_slave) with NTP primary and offset 0"
	echo "As root: /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 149.170.254.12 -h $CLIENT -i LTE_MALAKAI -s $MASTER_IP -p /var/tmp/test.xml -t \"$NTP_IP\" -u 0 -q"
	/ericsson/ocs/bin/ai_manager.sh -add lte_client -a 149.170.254.12 -h $CLIENT -i LTE_MALAKAI -s $MASTER_IP -p /var/tmp/test.xml -t "$NTP_IP" -u 0 -q || {
		echo "Error creating test LTE client, error code $?"
		return 4
	}

#	# Do not do Test 5 - ai_manager.sh does not yet support IPv6
#	echo "Test 5: add real LTE client (om_serv_slave) using IPv6 address"
#	# Using IPv6 address
#	echo "As root: /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 2300:ff80:1080:0:0:0:0:0 -h $CLIENT -i LTE_MALAKAI6 -s $MASTER_IP -p /var/tmp/test.xml -t \"$IPV6_ADDR\" -u 0"
#	/ericsson/ocs/bin/ai_manager.sh -add lte_client -a 2300:ff80:1080:0:0:0:0:0 -h $CLIENT -i LTE_MALAKAI6 -s $MASTER_IP -p /var/tmp/test.xml -t "$IPV6_ADDR" -u 0 || {
#		echo "Error creating test LTE client, error code $?"
#		return 5
#	}
        echo "Test 5: Check that LTE clients are listed"
        for j in 1 2 3; do
                /ericsson/ocs/bin/ai_manager.sh -list hosts|grep "testclient$j" &>/dev/null || {
                        echo "Test LTE client, testclient$j, was not listed"
                        return 5
                }
        done

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	DHCP_CLIENT_IN_CONFIG LTE_MALAKAI 149.170.254.12 >/dev/null || {
		echo "Client entry was not found in /usr/local/etc/dhcpd.conf_static"
		return 1
	}
	DHCP_CLIENT_IN_CONFIG testclient1 234.234.232.12 >/dev/null || {
		echo "Client entry was not found in /usr/local/etc/dhcpd.conf_static"
		return 1
	}
	DHCP_CLIENT_IN_CONFIG testclient2 106.206.184.12 >/dev/null || {
		echo "Client entry was not found in /usr/local/etc/dhcpd.conf_static"
		return 1
	}
	DHCP_CLIENT_IN_CONFIG testclient3 114.41.88.12 >/dev/null || {
		echo "Client entry was not found in /usr/local/etc/dhcpd.conf_static"
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Remove test LTE clients
	for CLIENT in testclient1 testclient2 testclient3 LTE_MALAKAI; do # LTE_MALAKAI6; do
		echo "Deleting client, $CLIENT"
		/ericsson/ocs/bin/ai_manager.sh -delete client -i $CLIENT 2&>1 /dev/null
	done

	# Delete networks
	echo "Deleting networks:"
	for net in 234.234.232.0 106.206.184.0 114.41.88.0 149.170.248.0; do
		DHCP_NETWORK_EXISTS $net &>/dev/null && {
			/ericsson/ocs/bin/ai_manager.sh -delete net -a $net -q
		}
	done

#	# Do not delete IPv6 ntwork - it hasn't been added because ai_manager.sh does not support IPv6
#	${AT_BIN}/con_ex.bsh -d delete.in -o expect.exp -c "/ericsson/ocs/bin/ai_manager.sh -delete net -a 2300:ff80:1080:0:0:0:0:0"
#	expect expect.exp &>/dev/null

	return 0

}
