#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-12-13    xamamcg    Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	cp /usr/local/etc/dhcpd.conf ./dhcpd.conf.bak
	if [ -r /usr/local/etc/dhcpd.conf_subnet ]; then
		cp /usr/local/etc/dhcpd.conf_subnet ./dhcpd.conf_subnet.bak
	fi
	# Need to add network first
	echo "Test 1: Adding network, 114.41.95.0"
	/ericsson/ocs/bin/ai_manager.sh -add net -a 114.41.95.0 -m 255.255.255.0 -r 114.41.95.1 -d conservapedia.org -n "1.1.1.1" || {
		echo "Error creating test network, error code $?"
		return 1
	}

	echo "Test 2: Adding range to network"
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.95.1 -b 114.41.95.10 -e 114.41.95.15 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q || {
		echo "Error creating test network, error code $?"
		return 2
	}

	# Add another network with no ranges
	echo "Test 3: Adding network, 114.41.96.0"
	/ericsson/ocs/bin/ai_manager.sh -add net -a 114.41.96.0 -m 255.255.255.0 -r 114.41.96.1 -d misc.org -n "1.1.1.1" || {
		echo "Error creating test network, error code $?"
		return 3
	}
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	DHCP_SERVER_INSTALLED || {
		echo "DHCP server not installed"
		return 1
	}

	DHCP_SERVER_RUNNING || {
		echo "DHCP server not running"
		return 2
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	echo "Test 1a: Adding range to network missing -n" 
	/ericsson/ocs/bin/ai_manager.sh -add range -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102" -q && {
		echo "Error allowed to add range with missing -n, error code $?"
		return 10
	}

	echo "Test 1b: Adding range to network missing -r" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with missing -r, error code $?"
		return 11
	}

	echo "Test 1c: Adding range to network missing -s" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with missing -s, error code $?"
		return 12
	}

	echo "Test 1d: Adding range to network missing -t" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with missing -t, error code $?"
		return 13
	}

	echo "Test 1e: Adding range to network missing -w" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100"  -q && {
		echo "Error allowed to add range with missing -n, error code $?"
		return 14
	}

	echo "Test 1f: Adding range to network missing -b" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with missing -b, error code $?"
		return 15
	}

	echo "Test 1g: Adding range to network missing -e" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with missing -e, error code $?"
		return 16
	}

	echo "Test 1h: Adding range to network - end before begin" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.15 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with end before begin, error code $?"
		return 17
	}

	echo "Test 1i: Adding range to network invalid -n" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 1.2.3.256 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -n, error code $?"
		return 18
	}

	echo "Test 1j: Adding range to network invalid -r" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 0114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -r, error code $?"
		return 19
	}

	echo "Test 1k: Adding range to network invalid -b" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20.1 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -b, error code $?"
		return 20
	}

	echo "Test 1l: Adding range to network invalid -e" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.A1.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -e, error code $?"
		return 21
	}

	echo "Test 1m: Adding range to network invalid -s" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10:45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -s, error code $?"
		return 22
	}

	echo "Test 1n: Adding range to network invalid -l" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3A500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -l, error code $?"
		return 23
	}

	echo "Test 1o: Adding range to network invalid -l" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l -3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -l, error code $?"
		return 24
	}
	echo "Test 1p: Adding range to network invalid -l" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 10.0 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -l, error code $?"
		return 25
	}

	echo "Test 1q: Adding range to network invalid -t" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.256" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -t, error code $?"
		return 26
	}

	echo "Test 1s: Adding range to network invalid -w" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101:10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -w, error code $?"
		return 27
	}

	echo "Test 1t: Adding range to network invalid -s" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.20 -e 114.41.96.25 -s 10:45:201:45:: -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with invalid -s, error code $?"
		return 28
	}

	echo "Test 1u: Adding range to network - extra option" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.10 -e 114.41.96.15 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q -i 123 && {
		echo "Error allowed to add range with -i, error code $?"
		return 29
	}

	echo "Test 1v: Adding -- in the options"
	/ericsson/ocs/bin/ai_manager.sh -add range --n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.10 -e 114.41.96.15 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
	echo "Error allowed to add range with --, error code $?"
	return 31
	}

	echo "Test 2: Adding range to non-existent network" 
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.97.1 -b 114.41.97.20 -e 114.41.97.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range to network that doesn't exist, error code $?"
		return 2
	}

	echo "Test 3: Adding range to network that already has range"
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.95.1 -b 114.41.95.20 -e 114.41.95.25 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add another range, error code $?"
		return 3
	}

	echo "Test 4: add range with start=end"
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.10 -e 114.41.96.10 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with end=start, error code $?"
		return 4
	}

	echo "Test 5: add range of size 2"
	/ericsson/ocs/bin/ai_manager.sh -add range -n 255.255.255.0 -r 114.41.96.1 -b 114.41.96.10 -e 114.41.96.11 -s 10.45.201.45 -l 3500 -t "10.42.52.99,10.42.52.100" -w "10.42.52.101,10.42.52.102"  -q && {
		echo "Error allowed to add range with only 2 IPs, error code $?"
		return 5
	}


	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Prove subnet file is as expected
	#RANGELINES=$(wc -l range.txt | cut -c7-16 | cut -d ' ' -f1) 
#	diff range.txt <(tail -$RANGELINES /usr/local/etc/dhcpd.conf_subnet) || { echo "Subnet file not as expected"; cat /usr/local/etc/dhcpd.conf_subnet; return 1; }
	diff range.txt /usr/local/etc/dhcpd.conf_subnet && { echo "Subnet file not as expected"; return 1; } 

	/ericsson/ocs/bin/ai_manager.sh -list nets 2> err.tmp 1> nets.tmp || { echo "Failed to list networks"; return 2; }

	# Check range is in output
	grep "range 114.41.95.10 114.41.95.15" nets.tmp || { echo "List networks doesn't contain range"; cat nets.tmp; return 3; }
	grep "range 114.41.95.20 114.41.95.25" nets.tmp && { echo "List networks contains unexpected range"; cat nets.tmp; return 4; }
	grep "range 114.41.97.20 114.41.97.25" nets.tmp && { echo "List networks contains unexpected range"; cat nets.tmp; return 5; }
	grep "range 114.41.96.20 114.41.96.25" nets.tmp && { echo "List networks contains unexpected range"; cat nets.tmp; return 6; }


	# Check for expected error messages
	CONSOLE_OUTPUT_CONTAINS "A Range is already defined for [114.41.95.0]" || { echo "No single range per network msg"; return 10; }
	CONSOLE_OUTPUT_CONTAINS "Network [114.41.97.0] doesn't exist. Create network before adding a range." || { echo "No range no network msg"; return 11; }
	CONSOLE_OUTPUT_CONTAINS "Range Ending IP must be of a higher value than Range Beginning IP" || { echo "No range end after start"; return 12; }
	CONSOLE_OUTPUT_CONTAINS "ERROR: You must specify subnet mask using the -n parameter" || { echo "No missing -n"; return 13; }
	CONSOLE_OUTPUT_CONTAINS "ERROR: You must specify a default router using the -r parameter" || { echo "No missing -r"; return 14; }
	CONSOLE_OUTPUT_CONTAINS "ERROR: You must specify an SMRS server address using -s paramter" || { echo "No missing -s"; return 15; }
	CONSOLE_OUTPUT_CONTAINS "ERROR: You must specify primary/secondary/both  NTP time servers using the -t parameter" || { echo "No missing -t"; return 16; }
	CONSOLE_OUTPUT_CONTAINS "ERROR: You must specify primary/secondary/both web server using the -w parameter" || { echo "No missing -w"; return 17; }
	CONSOLE_OUTPUT_CONTAINS "ERROR: You must specify a beginning IP for the range using the -b parameter" || { echo "No missing -b"; return 18; }
	CONSOLE_OUTPUT_CONTAINS "ERROR: You must specify an ending IP for the range using the -e parameter" || { echo "No missing -e"; return 19; }
	CONSOLE_OUTPUT_CONTAINS "Out of range in the IP Address [1.2.3.256]" || { echo "No invalid IP"; return 20; }
	CONSOLE_OUTPUT_CONTAINS "Invalid IP address [0114.41.96.1]" || { echo "No invalid IP"; return 21; }
	CONSOLE_OUTPUT_CONTAINS "Invalid IP address [10:45.201.45]" || { echo "No invalid IP"; return 22; }
	CONSOLE_OUTPUT_CONTAINS "Invalid IP address [114.A1.96.25]" || { echo "No invalid IP"; return 23; }
	CONSOLE_OUTPUT_CONTAINS "Invalid IP address [10:45.201.45]" || { echo "No invalid IP"; return 24; }
	CONSOLE_OUTPUT_CONTAINS "Non numeric value in lease time 3A500" || { echo "No invalid leasetime"; return 25; }
	CONSOLE_OUTPUT_CONTAINS "Non numeric value in lease time -3500" || { echo "No invalid leasetime"; return 26; }
	CONSOLE_OUTPUT_CONTAINS "Non numeric value in lease time 10.0" || { echo "No invalid leasetime"; return 27; }
	CONSOLE_OUTPUT_CONTAINS "Out of range in the IP Address [10.42.52.256]" || { echo "No invalid IP"; return 28; }
	CONSOLE_OUTPUT_CONTAINS "Invalid IP address [10.42.52.101:10.42.52.102]" || { echo "No invalid IP"; return 29; }
	CONSOLE_OUTPUT_CONTAINS "Invalid IP address [10:45:201:45::]" || { echo "No IP6 not supported"; return 30; }
	CONSOLE_OUTPUT_CONTAINS "illegal option -- -" || { echo "No -i msg"; return 31; }
	CONSOLE_OUTPUT_CONTAINS "There must be at least 3 IP addresses in the range" || { echo "No size 3 msg"; return 32; }
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	/ericsson/ocs/bin/ai_manager.sh -delete net -a 114.41.95.0 -q
	/ericsson/ocs/bin/ai_manager.sh -delete net -a 114.41.96.0 -q

	if [ -r ./dhcpd.conf_subnet.bak ]; then 
		cat ./dhcpd.conf_subnet.bak > /usr/local/etc/dhcpd.conf_subnet
	else
		rm /usr/local/etc/dhcpd.conf_subnet
	fi

	rm -f *.tmp
	rm -f *.bak
	return 0

}
