#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 2012-08-17    xfeldan    Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	
        # Need to add network first
        # -add net -a <ip address> -m <netmask> -r <router> -d <DNS domain name>
        DHCP_NETWORK_EXISTS 234.234.232.0 &>/dev/null || {
        	echo "Need to add a network first"
                /ericsson/ocs/bin/ai_manager.sh -add net -a 234.234.232.0 -m 255.255.248.0 -r 234.234.232.1 -d conservapedia.org -n "1.1.1.1" -q &>/dev/null || {
                echo "Error creating test network, error code $?"
		return 1
                }
                touch created.tmp
        }

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

       DHCP_SERVER_INSTALLED || {
                echo "DHCP server not installed"
                return 1
        }

        DHCP_SERVER_RUNNING &>/dev/null || {
                echo "DHCP server not running"
                return 2
        }

return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	i=1
	echo "Create client with missing parameters" # 1-5
	all_params=" -a 234.234.232.12 -h ahostname -i valid -s 2.2.2.2 -p /var/tmp/arf.txt"
	for param in " -a 234.234.232.12" " -h ahostname" " -i valid" " -s 2.2.2.2" " -p /var/tmp/arf.txt"; do
		/ericsson/ocs/bin/ai_manager.sh -add client ${all_params//$param/} 2>$i.out&& {
			echo "Creation of test client with missing parameter, ${param:1:3}, did not return error code"
			return $i
		}
		let i=i+1
	done

	echo "Create client with invalid IP addresses (-a option)" # 6-11
	for param in invalid 120.4.16 45.foo.bar.212 10.55.98.419 120.61..1 ....; do
		/ericsson/ocs/bin/ai_manager.sh -add client -a $param -h valid -i valid -s 2.2.2.2 -p /var/tmp/arf.txt 2>/dev/null >$i.out&& {
			echo "Creation of test client with invalid IP address, $param, did not return error code"
			return $i
		}
		let i=i+1
	done

	echo "Create client with invalid IP address (-s option)" # 12
	/ericsson/ocs/bin/ai_manager.sh -add client -a 1.2.3.4 -h valid -i valid -s 2.22.2 -p /var/tmp/arf.txt 2>/dev/null >$i.out&& {
		echo "Creation of test client with invalid IP address, 2.22.2, did not return error code"
		return $i
	}
	let i=i+1

	echo "Create client with additional invalid parameter" # 13
	/ericsson/ocs/bin/ai_manager.sh -add client -a 1.1.1.1 -h valid -i valid -s 2.2.2.2 -p /var/tmp/arf.txt -t invalid >$i.out 2>&1&& {
		echo "Creation of test client with additional invalid parameter did not return error code"
		return $i
	}
	let i=i+1

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Usage statement should be in the output of only some invalid commands
	for i in 1 2 3 4 5 13; do
		grep "\-add client -a <ip address>" $i.out >/dev/null|| {
			echo "Usage statement not found in output of test $i"
			return $i
		}
	done

	i=1
	grep "You must specify an address using the -a parameter" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
	grep "You must specify a hostname using the -h parameter" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
	grep "You must specify a client identifier using the -i" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
	grep "You must specify a SMRS server address using -s" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
	grep "You must specify a summary file path using the -p" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}

	for i in 6 7 8 10 11 12; do
		grep "Invalid IP address" $i.out>/dev/null || {
			echo "Could not find error message in test $i"
			return $i
		}
	done
        i=9
        grep "Out of range in the IP Address" $i.out>/dev/null || {
                echo "Could not find error message in test $i"
                return $i
        }
	i=13
	grep "illegal option -- t" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

        #Remove network if it was created
        [ -r created.tmp ] && {
                echo "Deleting network"
                /ericsson/ocs/bin/ai_manager.sh -delete net -a 234.234.232.0 -q || {
			echo "Unable to delete test network on cleanup"
			return 9
		}
                rm created.tmp
        }

	rm -f *.out
	return 0

}
