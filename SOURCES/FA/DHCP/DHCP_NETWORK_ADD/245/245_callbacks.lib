#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	DHCP_SERVER_INSTALLED || {
		echo "DHCP server not installed"
		return 1
	}

	DHCP_SERVER_RUNNING || {
		echo "DHCP server not running"
		return 2
	}

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	i=1
	echo "Create network with missing parameters" # 1-5
	all_params=" -a 1.2.3.4 -m 255.255.255.0 -r 147.44.84.48 -d ericsson.se -n 1.2.4.8"
	for param in " -a 1.2.3.4" " -m 255.255.255.0" " -r 147.44.84.48" " -d ericsson.se" " -n 1.2.4.8"
	do
	/ericsson/ocs/bin/ai_manager.sh -add net ${all_params//$param/} 2>$i.out&& {
			echo "Creation of test network with missing parameter, ${param:1:3}, did not return error code"
			return $i
	}
		let i=i+1
	done
	echo "Create network with invalid IP address to -a parameter"
	/ericsson/ocs/bin/ai_manager.sh -add net -a 1.2.3.4 -m invalid -r 147.44.84.48 -d ericsson.se -n \"1.2.4.8\" 2>/dev/null >$i.out&& {
		echo "Creation of test network with invalid IP address to -a parameter did not return error code"
		return $i
	}
	let i=i+1
	echo "Create network with invalid IP address to -r parameter"
	/ericsson/ocs/bin/ai_manager.sh -add net -a 1.2.3.4 -m 1.2.3.4 -r invalid -d ericsson.se -n \"1.2.4.8\" 2>/dev/null >$i.out&& {
		echo "Creation of test network with invalid IP address to -r parameter did not return error code"
		return $i
	}
	let i=i+1
	echo "Create network with invalid network mask to -m parameter"
	/ericsson/ocs/bin/ai_manager.sh -add net -a 1.2.3.4 -m 255.259.0.4 -r 147.44.84.48 -d ericsson.se -n \"1.2.4.8\" 2>/dev/null >$i.out&& {
		echo "Creation of test network with invalid network mask to -m parameter did not return error code"
		return $i
	}
	let i=i+1
	echo "Create network with invalid option to -n parameter"
	/ericsson/ocs/bin/ai_manager.sh -add net -a 1.2.3.4 -m 255.255.255.31 -r 147.44.84.48 -d ericsson.se -n \"7.7.7.7,8.8.8.8\" 2>/dev/null >$i.out&& {
		echo "Creation of test network with invalid option to -n parameter did not return error code"
		return $i
	}
	let i=i+1

	echo "Create network with additional invalid parameter"
	/ericsson/ocs/bin/ai_manager.sh -add net -a 1.2.3.4 -m 200.200.200.200 -r 234.234.234.234 -d conservapedia.org -n "1.1.1.1" -t invalid 2>$i.out && {
		echo "Creation of test network with additional invalid parameter did not return error code"
		return $i
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Usage statement should be in the output of only some invalid commands
	for i in 1 3 4 5 10; do
		grep "\-add client -a <ip address>" $i.out >/dev/null|| {
			echo "Usage statement not found in output of test $i"
			return $i
		}
	done

	i=1
	grep "You must specify a network address" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
	grep "You must specify a netmask using the -m" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
 	# This test message used to have " parameter" at the end, but that is now on the next output line
	grep "You must specify a default router using the -r" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
	grep "You must specify a DNS domain using the -d paramter" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}
	let i=i+1
	grep "You must specify one or more n=DNS servers" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}

	for i in 7 9; do
		grep "Invalid IP address" $i.out>/dev/null || {
			echo "Could not find error message in test $i"
			return $i
		}
	done

	i=8
	grep "Out of range in the IP Address" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}

	i=10
	grep "illegal option -- t" $i.out>/dev/null || {
		echo "Could not find error message in test $i"
		return $i
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	#rm -f *.out
	return 0

}
