#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-08-09    xfeldan    Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

        DHCP_SERVER_RUNNING &>/dev/null || {
                echo "DHCP server not running to create network"
                return 2
        }

	# Add network
	DHCP_NETWORK_EXISTS 234.234.232.0 &>/dev/null || {
		echo "Need to add test network"
		/ericsson/ocs/bin/ai_manager.sh -add net -a 234.234.232.0 -m 255.255.248.0 -r 234.234.234.234 -d conservapedia.org -n "1.1.1.1" -q || {
			echo "Error creating test network, error code $?"
			return 3
		}
		touch creatednet.tmp
	}

	# Add client
	DHCP_CLIENT_IN_CONFIG valid139 234.234.232.119 &>/dev/null || {
		echo "Need to add test client"
		/ericsson/ocs/bin/ai_manager.sh -add client -a 234.234.232.119 -h valid139 -i valid139 -s 2.2.2.2 -p 1.1.1.1 -q || {
			echo "Error creating test client, error code $?"
			return 1
		}
		touch createdclient.tmp
	}
	# Stop DHCP service(s)
	/etc/rc2.d/S96dhcpd stop || {
		echo "Unable to stop the DHCP service(s)"
		return 1
	}
	return $?

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
       DHCP_SERVER_INSTALLED || {
                echo "DHCP server not installed"
                return 1
        }

        DHCP_SERVER_RUNNING && {
              echo "DHCP server still running" 
                return 2
        }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	# Remove test client with DHCP down
	/ericsson/ocs/bin/ai_manager.sh -delete client -i valid139 -q || {
		echo "Deleting test client with DHCP down returned an error code"
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Start DHCP Service(s) again to cleanup	
	/etc/rc2.d/S96dhcpd start || {
		echo "Failed to restart DHCP service, unable to cleanup from test case"
		return 1
	}

        # Remove client marker if it was created
        [ -r createdclient.tmp ] && {
                # If the test case has failed and the client still exists
                DHCP_CLIENT_IN_CONFIG valid139 234.234.232.119 &>/dev/null && {
                        echo "Deleting test client"
                        /ericsson/ocs/bin/ai_manager.sh -delete client -i valid139 -q || {
                                echo "Failed to delete test client in cleanup"
                                return $?
                        }
                }
                rm createdclient.tmp
        }

        # Remove network if it was created
        [ -r creatednet.tmp ] && {
                echo "Deleting network"
                /ericsson/ocs/bin/ai_manager.sh -delete net -a 234.234.232.0 -q || {
                        echo "Test network was not deleted in cleanup"
                        return $?
                }
                rm creatednet.tmp
        }

	return 0
}
