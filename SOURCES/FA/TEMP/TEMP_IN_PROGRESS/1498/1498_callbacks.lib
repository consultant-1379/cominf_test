#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	#return 1

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	#return 1

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	#return 123
        echo  "in test case "
        
        #WA for 14.3.7 key issCall TC on Admin 1
        ECHO=/usr/bin/echo
        DATE=/usr/bin/date
        EGREP=/usr/xpg4/bin/egrep
        CURR_DIR=${PWD}
        EXPECT=/usr/local/bin/expect
        #CI_ADMIN1_HOSTNAME=atrcxb2640

        . /var/tmp/platform_taf/harness/lib/atnfd.lib

        # One way trust already there admin1-admin2 , using it .
        scp root@$CI_ADMIN2_HOSTNAME-priv:/.ssh/id_rsa.pub /tmp/rsa.tmp
        if [ $? -ne 0 ]; then
                echo "key not copied from @$CI_ADMIN1_HOSTNAME-priv  id_rsa.pub"
                retcode=$(($retcode+1))
        fi


        # Get your RSA key into variable.
        KEY=""
        for line in $(cat /tmp/rsa.tmp)
        do
                KEY="$KEY $line"
        done

        if [ -z "$KEY" ] ; then
                $ECHO "Empty RSA key"
                exit 1
                retcode=$(($retcode+1))
        fi


       # Add your RSA key to the machine's authorized_keys if it's not already there 
        grep  "$KEY" /.ssh/authorized_keys || echo "$KEY" >>/.ssh/authorized_keys



        # double check
        grep  "$KEY" /.ssh/authorized_keys > /dev/null
        if [ $? -ne 0 ]; then
                echo " $CI_ADMIN1_HOSTNAME-priv key not updated in  authorized keys"
                retcode=$(($retcode+1))
        fi

        
        # tidy up
        if  [ -f  /tmp/rsa.tmp ]; then
                rm /tmp/rsa.tmp
                fi

# return
return $retcode




}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	#return 1

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	#return 1

}
