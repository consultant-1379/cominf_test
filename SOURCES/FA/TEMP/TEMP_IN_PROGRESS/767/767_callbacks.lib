#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################
#SOURCE ENVIRONMENT FILE for GLOBAL variables
. ${AT_ROOT}/*.env

# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result


#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
        echo "{CI_MACHINE} = ${CI_MACHINE}"
        echo "{CI_MACHINE_ILO}= ${CI_MACHINE_ILO}"
        echo "${CI_SERVER_ROOTPW[0]}"

        return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

        if [[ -z ${CI_MACHINE_ILO} ]]; then
                echo "ERROR: CI_MACHINE_ILO is not defined in env file"
                return 1
        fi
        if [[ -z ${CI_ILO_ROOTPW} ]]; then
                echo "ERROR: CI_ILO_ROOTPW is not defined in env file"
                return 1
        fi
        
        confirmConnection ${CI_MACHINE_ILO}.athtem.eei.ericsson.se 
        [[ $? -ne 0 ]] && return 1  

        return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
        EXPECT=/usr/bin/expect
        # Start log
        LOG_DIR=`pwd`
        LOG_FILE=`/bin/basename $0`_$( date +%y%m%d-%H_%M_%S ).log
	startLog ${LOG_DIR} ${LOG_FILE} 


        echo -e "\n==========================================================================================="
        echo -e "Starting reboot of  ${CI_MACHINE} using ${CI_MACHINE_ILO} at `date` "
        echo -e "===========================================================================================\n"


${EXPECT}<<EOF


spawn ssh -ostricthostkeychecking=no root12@${CI_MACHINE_ILO}.athtem.eei.ericsson.se
#exp_internal 1
#expect_after timeout exit
set timeout 60
while 1 {
        expect {
                "Are you sure you want to continue connecting" {
                        send "yes\r"}
		"password:" {
			send "${CI_ILO_ROOTPW}\r"}
		"XSCF>" {
			send "console -f -d 0 -y\r"}
                "console login: " {
                        send "root\r"
                        sleep 1}
                "Password:" {
                        send "${CI_SERVER_ROOTPW[0]}\r"
                        break}
                eof {
                        puts "Warning: timed out"
                        exit 1}
                timeout {
                        puts "Warning: timed out"
                        exit 1}
                }
        }

	expect "#"

	set timeout 900
	send "reboot\r"
                while 1 {
                        expect {
                                "closed by remote host" {
                                        break }
				"console login:" {
					break }
		                "Password:" {
                       			 send "${CI_SERVER_ROOTPW[0]}\r"
                        		 break }
                                eof  {
                                        exit 1 }
                                timeout {
                                        puts "Warning: timed out reboot - more than 15 minutes"
                                        exit 1 }
                                }
                        }
EOF

        [[ $? -ne 0 ]] && return 1

        echo -e "\n================================================================="
        echo -e "Reboot of ${CI_MACHINE_ILO} completed at `date` "
        echo -e "=================================================================\n"

	sleep 30 
	
        echo -e "\n================================================================="
        echo -e "Verify logon to ${CI_MACHINE} at `date` "
        echo -e "=================================================================\n"


${EXPECT}<<EOF4

	spawn ssh -ostricthostkeychecking=no root@${CI_MACHINE}.athtem.eei.ericsson.se
	set timeout 90
	while 1 {
       	 	expect {
                	"Are you sure you want to continue connecting" {
                        	send "yes\r"}
                	"Password:" {
                        	send "${CI_SERVER_ROOTPW[0]}\r"}
			"#" {
				send "/bin/uptime\r"
				break}
                	eof {
                        	puts "Warning: timed out"
                        	exit 1 }
                	timeout  {
                        	puts "Warning: timed out"
                        	exit 1 }
                	}
        	}

        expect "load average"
        send "date\r"; expect "201"

        set timeout 1800
        send "${G_SMTOOL} -progress\r"
        while 1 {
                expect {
                        "root is not authorized to run this application" { sleep 20
                                                  send "${G_SMTOOL} -progress\r"}
                        "masterservice  done"   { puts "\nINFO: MC restart completed"
                                                break }
                        }
                }

        send "date\r"; expect "201"

        set timeout 60
        send "/bin/uptime\r"
        expect "load average"

        send "${G_SMTOOL} -list |grep -v started\r"
        expect "#"
        sleep 10
        send "date\r"; expect "201"

        puts "Number of unexpected non-started MCs:"
        send "${G_SMTOOL} -list |grep -v started|grep -v BI_SMRS_MC|grep -v netop_ems|grep -v eam_handlerMtp|grep -v eam_handlerText|wc -l | grep 0\r"
        send "echo RES \$\?\r" 
        expect {
                "RES 0"     { puts "INFO: All expected MCs are online after Reboot" }
		"RES 1"     { puts "ERROR: There are unexpected MCs not online after Reboot, see $LOGFILE"
				exit 1}
		"RES 2"     { puts "ERROR: Problem with smtool command"
				exit 1}
                timeout	    { puts "ERROR: There are unexpected MCs not online after Reboot, see $LOGFILE"
                                exit 1 }
                 }
 
        send "exit\r"
        expect "logout"


EOF4

        RET_CODE=$?

        echo -e "\n================================================================="
        echo -e "Logon/logoff to ${CI_MACHINE} completed at `date` "
        echo -e "Log file for the reboot is available at :" 
        echo -e $LOGFILE
        echo -e "=================================================================\n"

        if [[ ${RET_CODE} -eq 0 ]]; then
                return 0
        else
                return 1
        fi
}

#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required


        # Stop log
        stop_log         

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
      
	return 0

}
