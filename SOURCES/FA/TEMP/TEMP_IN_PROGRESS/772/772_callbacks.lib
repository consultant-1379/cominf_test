#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
	
        mkdir /tmp/chris
        if [ ! -d /tmp/chris ]; then
                echo "ERROR: mount point not created."
                return 1
        fi
        umount /tmp/chris
        mount 10.44.192.247:/JUMP/OM_MEDIA /tmp/chris/
        if [ $? -ne 0 ]; then
                echo "ERROR: mount failed"
                return 1
        fi
        var=`awk ' NR <= 1 {print$2}'
/var/opt/ericsson/sck/data/cp.status`
        var1=`echo $var | awk '{ FS="_" } {print $5 }'`
        var2=` find /tmp/chris | grep -i JASScustm | grep $var1`
        var2="/tmp/chris/OSSRC_O13_2/13.2.5_LLSVB/om/security/JASScustm.pkg"
        [ -z "$var1" ] && { echo "ERROR: var1 is null"; return 1; }
        [ -z "$var2" ] && { echo "ERROR: var2 is null"; return 1; }
        echo "var1=$var1"
        echo "var2=$var2"
        cp $var2 /tmp
        umount /tmp/chris
        rm -rf /tmp/chris


        JASS=`pkginfo | grep -i JASScustm | awk ' { print $2 }'`
        # Check if JASScustm is installed and remove if it already exists.	
      if [ "$JASS" == "JASScustm" ]
        then

        # /var/tmp/platform_taf/harness/bin/con_ex.bsh
        ${AT_BIN}/con_ex.bsh -d jass_rm.in -o rm_expect.exp -c "/usr/sbin/pkgrm JASScustm"
        if [ $? -ne 0 ];then
                echo "Error: con_ex.bsh problem"
                return 1
        fi

        /usr/local/bin/expect rm_expect.exp >output.tmp
        if [ $? -ne 0 ];then
                echo "Error: pkgrm JASScustm problem"
                return 1
        fi
        # check that JASScustm was removed
       fi


}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	# Install JASScustm
	
	${AT_BIN}/con_ex.bsh -d jass_add.in -o add_expect.exp -c "/usr/sbin/pkgadd -d /tmp/JASScustm.pkg"
        if [ $? -ne 0 ];then
                echo "Error: con_ex.bsh problem"
                return 1
        fi
        /usr/local/bin/expect add_expect.exp >>output.tmp
        if [ $? -ne 0 ];then
                echo "Error: pkgadd JASScustm problem"
                return 1
        fi
        # check that JASScustm was added
	Admin2=`getAdmin2Hostname`
        grep "Installation of <JASScustm> was successful." output.tmp
	scp /tmp/JASScustm.pkg $Admin2:/tmp
         ssh $Admin2 ${AT_BIN}/con_ex.bsh -d jass_add1.in -o add_expect.exp -c "/usr/sbin/pkgadd -d /tmp/JASScustm.pkg"
 
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
