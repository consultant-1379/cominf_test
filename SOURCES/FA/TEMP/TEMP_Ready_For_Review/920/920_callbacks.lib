#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
        banner "~~~~~~~~~~"
        echo -e "\t\tTest: ${SPEC_TC_ID}\n\t\t${SPEC_TC_SLOGAN}"
        banner "__________"
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	IsIIorUpgradeSuccessful
VALUE=$?
echo "++++++++++++++++++++++++++++++++++++++Value=$VALUE+++++++++++++++++++++++++"

if [ "$VALUE" -eq "1" -o "$VALUE" -eq "2" ]; then
   return 0
else
   return 1
fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

echo "Verifying the current sybase password"
echo
syb_pwd_ma=$(/opt/ericsson/bin/pwAdmin -get masterdataservice SQL sa)
        echo "Password for the master data service is : $syb_pwd_ma"
syb_pwd_fm=$(/opt/ericsson/bin/pwAdmin -get fmdataservice SQL sa)
        echo "Password for the fmdataservice is : $syb_pwd_fm"
syb_pwd_pm=$(/opt/ericsson/bin/pwAdmin -get pmdataservice SQL sa)
        echo "Password for the pmdataservice is : $syb_pwd_pm"

if [ "$syb_pwd_ma" == "$syb_pwd_fm" ] && [ "$syb_pwd_ma" == "$syb_pwd_pm" ]; then
        syb_pwd=$syb_pwd_ma
else
        echo "Error : Sybase masterdataservice, fmdataservice and pmdataservice are not similar"
        echo "$syb_pwd_ma"
        echo "$syb_pwd_fm"
        echo "$syb_pwd_pm"
        exit 0
fi

syb_pwd2=sybase12
if [ $syb_pwd2 == $syb_pwd ]; then
        syb_pwd2=sybase11
fi

echo "Verifying whether the Sybase1 group is online on the server"

getAdmin2Hostname $*
echo "CI_ADMIN2_HOSTNAME=$RESULT"
Oss_OFFLINE=`/opt/VRTS/bin/hagrp -display Oss -attribute State | grep OFFLINE | awk '{print $3}'`
Sybase1_ONLINE=`/opt/VRTS/bin/hagrp -display Sybase1 -attribute State | grep ONLINE | awk '{print $3}'`

if [ $Oss_OFFLINE == $Sybase1_ONLINE ];then
echo "Sybase1 group is online on server $Sybase1_ONLINE"
echo "Changing the sybase password from $syb_pwd to $syb_pwd2"

ssh root@$RESULT <<EOF3
#!/bin/bash
hostname

EXPECT=/usr/local/bin/expect
$EXPECT << EOF2
spawn /ericsson/syb/bin/change_sybase_pw.ksh
expect "Enter current Sybase SA password"
send "${syb_pwd}\r"
send "${syb_pwd}\r"
expect "Enter new Sybase SA password"
send "${syb_pwd2}\r"
expect "Enter new Sybase SA password again"
send "${syb_pwd2}\r"
expect "Possible to connect to ISQL using sa  new password - OK"
expect "Changing password in /opt/sybase/sybase/admin/etc/.sap file and setting owner to"
expect "Possible to connect to ISQL as sa_monitor using new password - OK"
expect "Sybase <sa> Password and <sa_monitor> Password Successfully Updated in Sybase &"
expect closed
EOF2

EOF3

echo
echo "Verifying the New sybase password"
echo

syb_pwd_new_ma=$(/opt/ericsson/bin/pwAdmin -get masterdataservice SQL sa)
syb_pwd_new_fm=$(/opt/ericsson/bin/pwAdmin -get fmdataservice SQL sa)
syb_pwd_new_pm=$(/opt/ericsson/bin/pwAdmin -get pmdataservice SQL sa)


if [ $syb_pwd_new_ma == $syb_pwd_new_fm ] && [ $syb_pwd_new_ma == $syb_pwd_new_pm ]; then
        syb_pwd_new=$syb_pwd_new_ma
        echo "New sybase password successfylly changed to : $syb_pwd_new"

$EXPECT << EOF1
spawn /opt/VRTS/bin/hastatus -sum
sleep 5
spawn /ericsson/core/cluster/bin/hatool p v
expect "Do you really want to stop 'had' on all hosts now (y/n)?"
send "y\r"
expect "Done"
sleep 2
spawn /opt/VRTS/bin/hastatus -sum
expect "VCS ERROR"
expect "VCS WARNING"

spawn /ericsson/core/bin/convert_to_cluster encrypt_sybasepw
sleep 6
expect "Encrypting Sybase sa password in cluster.ini"

spawn scp /ericsson/config/cluster.ini $RESULT-priv:/ericsson/config/
sleep 5
expect "cluster.ini          100%"

spawn /ericsson/core/cluster/bin/create_maincf
sleep 15
expect "Copying new main.cf to /etc/VRTSvcs/conf/config/main.cf"

spawn /ericsson/core/cluster/bin/hatool t c
sleep 30
expect "StorLan      State                 $RESULT |ONLINE|"
sleep 40
spawn /opt/VRTS/bin/hastatus -sum
expect "B  Sybase1         $RESULT           Y          N ONLINE"
EOF1

        return 0
else
        echo "Error : New Sybase masterdataservice, fmdataservice and pmdataservice passwords are not similar"
        echo "$syb_pwd_new_ma"
        echo "$syb_pwd_new_fm"
        echo "$syb_pwd_new_pm"
        return 1

fi

else
        echo "Sybase is not online on this server and hence not changing the sybase password"
        return 1
fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
