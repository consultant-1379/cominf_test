#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

        RESULT="PASS"

cat  /var/opt/ericsson/nms_cif_smssr/log/* | grep FM_handler_1 |egrep "SYSTEM_SHUTDOWN|SYSTEM_START" > /tmp/FM1

# Get the FM_handler_1 process restart time by taking time at
# SYSYEM_SHUTDOWN follows directly by SYSTEM_START.
# start time is the time of restart starts (shutdown) 
# stop time is time restart ends (FM_Handler_1 starts)

{       while read line ; do

                DATE=`echo ${line} |awk '{print $1}'`
                REST=`echo ${line} |awk '{print $2}'`
                TIME=`echo ${REST} |awk -F';' '{print $1}'`
                TYPE=`echo ${REST} |awk -F';' '{print $4}'`

                if [[ ${TYPE} == "SYSTEM_START" && ${LAST_TYPE} == "SYSTEM_SHUTDOWN" ]]; then
                        echo -e "\nFM_handler_1 Shutdown at: ${START_DATE} ${START_TIME}     Started at: ${DATE} ${TIME}"

                        typeset  STOP_HOUR=`echo ${TIME}   |awk -F':' '{print $1}' | sed 's/^0//'`
                        typeset  STOP_MIN=`echo ${TIME}    |awk -F':' '{print $2}' | sed 's/^0//'`
                        typeset  STOP_SEC=`echo ${TIME}    |awk -F':' '{print $3}'`
                        typeset  START_HOUR=`echo ${START_TIME} |awk -F':' '{print $1}' | sed 's/^0//' `
                        typeset  START_MIN=`echo ${START_TIME}  |awk -F':' '{print $2}' | sed 's/^0//' `
                        typeset  START_SEC=`echo ${START_TIME}  |awk -F':' '{print $3}'`

                        if [[ $START_HOUR -gt $STOP_HOUR ]]; then
                                STOP_HOUR="$(( $STOP_HOUR + 24 | bc -l )) "
                        fi

                        TOT1="$(( $START_HOUR * 60 + $START_MIN  | bc -l )) "
                        TOT2="$(( $STOP_HOUR * 60 + $STOP_MIN  | bc -l )) "
                        TOT3="$(( $TOT2 - $TOT1 | bc -l  ))"
                        echo "Total Time: ${TOT3} Minutes"

                        if [[ $TOT3 -gt 25 ]]; then
                                echo "Error: Start of FM greater than 25 minutes"
                                RESULT="FAIL"
                        else
                                echo "Info: Pass"
                        fi

                else
                        START_TIME=${TIME}
                        START_DATE=${DATE}
                fi

                LAST_TYPE=${TYPE}
        done
} < /tmp/FM1


        [[ ${RESULT} == "FAIL" ]] && return 1
	return 0     

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

        rm -rf /tmp/FM1  >/dev/null 2>&1
	return 0

}
