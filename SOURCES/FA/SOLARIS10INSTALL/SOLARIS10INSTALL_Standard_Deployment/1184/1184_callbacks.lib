#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0 

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
        tmp1=$(cat /ericsson/config/config.ini |grep DHCP_CONF|cut -d "=" -f 2)     
            if [ "$tmp1" != "yes" ] ; then
            tmp=$(ps -ef |grep  -c /usr/local/sbin/dhcpd)
            if [ $tmp -eq 0 ] ; then
            echo "failure in dhcp connecton"
           return 1 
           fi
         fi
	return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
        #Action 1
        tmp2=$(crontab -l |grep -c /ericsson/ocs/bin/dhcp_restart.sh)
        if [ $tmp2 -eq 0 ] ; then
         echo "dhcp_cron.sh is not present in cron tab"
       return 1 
       fi 
             


               #Action 2 
		[ $(ssh omsrvs hostname |grep -c "omsrvs" ) -eq 0 ] && {
			echo "Passwordles connection doesnt exist between omsrm and omsrvs"
			return 1
			}
	
               # templ=1.tmpl
               # expfile=1.ex
               # infile="1.in"
               # sed -e "s/^PPPPPPPP/shroot/" < ${templ} > ${infile}
               # ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "ssh 10.45.201.16" || {
               #         echo "Could not create $expfile from $infile to run : retval $?"
               #         return 1
               #         }

               #/usr/local/bin/expect -d ${expfile} >/dev/null || {
               #         echo "Error in establishing password less connection"
               #         return 1
               #         }
 


         #Acton 4

        /ericsson/ocs/bin/ai_manager.sh -init|/ericsson/ocs/bin/ai_manager.sh -add net -a 10.10.10.0 -m 255.255.255.0 -r 10.10.10.1 -d athtem.eei.ericsson.se -n "159.107.163.3"
           tmp3=$( cat /usr/local/etc/dhcpd.conf_subnet|grep -c 10.10.10.0)
           if [ "$tmp3" -eq 0 ] ; then
          echo "network was not added properly"
         return 1 
           fi
            #Action 5
             if [ $(cat /ericsson/config/config.ini |grep -c DHCP_CONF=yes) -eq 0 ] ; then
                echo "DHCP is not configured "
                return 1
             fi
      

	return 0 
        
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required
	/ericsson/ocs/bin/ai_manager.sh -delete net -a 10.10.10.0 -q || {
				echo "Unable to delete network"
				return 1
				}
	return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0
 
}
