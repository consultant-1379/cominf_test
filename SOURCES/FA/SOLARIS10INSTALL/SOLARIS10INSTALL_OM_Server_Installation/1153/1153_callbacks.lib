#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0 

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
                

                tmp="/ericsson/config/ericsson_use_config"
                a=`more $tmp|grep -c config=infra_slave`
                if [ "$a" -eq 1 ] ; then
                ssh omsrvs
                fi
             #Action 2 
              if [ `grep -c error  /ericsson/ocs/log/sys_inst_cominf_install.*.log` -gt 0 ]; then
                 echo "error in cominf_install file"
                 return 1
               fi
              if [ `grep -c ERROR /var/sadm/system/logs/install_log` -gt 0 ]; then
                echo "error in patch file"
                  return 1
                fi
       #Action 3 
            #Checking the configuration files matches the profile used to install server
                tmp="/ericsson/config/ericsson_use_config"
                x=$(more $tmp|grep -c config=infra_master)
                y=$(more $tmp|grep -c config=infra_slave)
		z=$(more $tmp|grep -c config=om_serv_master)
		w=$(more $tmp|grep -c config=om_serv_slave)
                if [ "$x" -eq 0  -a "$y" -eq 0 -a "$z" -eq 0 -a $w -eq 0 ] ; then
                  echo "user config file doesnt match profile user"
                  return 1
                fi
       #Action 4
	 l_cmd=`java -version 2>&1 | grep 1.6.0`
            ret=$?
            if [[ $ret != 0 ]] ; then
          echo "java version is incorrect"
		  return 1
     fi 
        #Action 5
             if [ `more /etc/release 2>&1| grep -c s10x_u11wos_24a` -eq 0 ] ; then
          echo "solaris version is incorrect"
                  return 1
     fi 
 
        #Action 6
           if [ `ping omsrvs|grep -c alive` -eq 0 ] ; then
          echo "cannot be pinged to the network"
                  return 1
     fi
        # Action 7 
      if [ `svcs -a | grep name-service-cache|grep -c disabled` -eq 0 ] ; then
          echo " name service cache is not disabled"
		  return 1
     fi 

         #Action 8 
          
       if [ `more /etc/TIMEZONE|grep -c Eire` -eq 0 ] ; then
          echo "Time Zone on server doesnt match to the value entered in boot command"
                  return 1
     fi
    #Action 9
     if [ `pkginfo -l | grep -c ERICddc` -eq 0 ] ; then
          echo " ERICddc doesnt exists"
		  return 1
     fi
	
      if [ `pkginfo -l | grep -c ERICdynport` -eq 0 ] ; then
          echo " ERICdynport doesnt exists"
		  return 1
     fi
     if [ `pkginfo -l | grep -c ERICiptool` -eq 0 ] ; then
          echo " ERICiptool doesnt exists"
		  return 1
     fi
     if [ `pkginfo -l | grep -c /opt/ERICiptool` -eq 0 ] ; then
          echo " /opt/ERICiptool doesnt exists"
		  return 1
     fi
     if [ `pkginfo -l | grep -c ERICmonagt` -eq 0 ] ; then
          echo " ERICmonagt doesnt exists"
		  return 1
     fi
     if [ `pkginfo -l | grep -c ERICmonplugin` -eq 0 ] ; then
          echo " ERICmonplugin doesnt exists"
		  return 1
     fi
     if [ `pkginfo -l | grep -c ERICocs` -eq 0 ] ; then
          echo " ERICocs doesnt exists"
		  return 1
     fi
     [ `pkginfo -l | grep -c ERICsdse` -eq 0 ] && { 
                  echo " ERICsdse doesnt exists" 
		  return 1
     }
 
   return 0	 
        
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0 

}
