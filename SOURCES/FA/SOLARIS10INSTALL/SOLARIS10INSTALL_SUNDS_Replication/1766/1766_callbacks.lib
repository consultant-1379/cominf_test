#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

pkginfo ERICodj 2> /dev/null
ret=$?
if [[ $ret == 0 ]]; then

        #Checking option 4 of prepReplication _disabling
        ${AT_BIN}/con_ex.bsh -d 1766_odj_prepReplicationm4.in -o 1766_odj_prepReplicationm4.exp -c "/ericsson/opendj/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_odj_prepReplicationm4.exp || {
                echo "Error while running script prepReplication.sh in master with option 4"
                return 1
        }
        CONSOLE_OUTPUT_CONTAINS "Replication disabled: OK" || {
                echo "Replication was not disabled in infra master."
                return 1
        }


        #Checking option 2 of prepReplication on inframaster
        ${AT_BIN}/con_ex.bsh -d 1766_odj_prepReplicationm2.in -o 1766_odj_prepReplicationm2.exp -c "/ericsson/opendj/bin/prepReplication.sh "
        /usr/local/bin/expect 1766_odj_prepReplicationm2.exp | tee /var/tmp/file1|| {
                echo "Error while running script prepReplication.sh in master with option 2"
                return 1
        }

	RES=`grep -n "Replication enabled" /var/tmp/file1 | awk -F: '{print $1}' | xargs -I {} expr {} + 2  | xargs -I {} sed -n {}p /var/tmp/file1 | awk -F: '{print $5}'`       
	[[ -z $RES  ]] || {
              echo "Replication is not enabled on inframaster "
        }

        #Checking  options 1,3 of prepReplication
        ${AT_BIN}/con_ex.bsh -d 1766_odj_prepReplicationm1.in -o 1766_odj_prepReplicationm1.exp -c "/ericsson/opendj/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_odj_prepReplicationm1.exp || {
                echo "Error while running script prepReplication.sh in master with option 1"
                return 1
        }
        CONSOLE_OUTPUT_CONTAINS "replication was successfully enabled: OK" || {
                echo "Replication is not enabled "
                return 1
        }


        ${AT_BIN}/con_ex.bsh -d 1766_odj_prepReplicationm3.in -o 1766_odj_prepReplicationm3.exp -c "/ericsson/opendj/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_odj_prepReplicationm3.exp || {
                echo "Error while running script prepReplication.sh in master with option 3"
                return 1
        }
        CONSOLE_OUTPUT_CONTAINS "Replication initialized from" || {
                echo "Error in initializing Replication on inframaster"
                return 1
        }

else

       
	 #Checking option 2 of prepReplication
        ${AT_BIN}/con_ex.bsh -d 1766_prepReplicationm2.in -o 1766_prepReplicationm2.exp -c "/ericsson/sdee/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_prepReplicationm2.exp 

        #Checking option 5 of prepReplication
        ${AT_BIN}/con_ex.bsh -d 1766_prepReplicationm5.in -o 1766_prepReplicationm5.exp -c "/ericsson/sdee/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_prepReplicationm5.exp || {
                echo "Error while running script prepReplication.sh in master with option 5"
                return 1
        }
        CONSOLE_OUTPUT_CONTAINS "Replication agreement successfully deleted between" || {
                echo "Replication agreement was not deleted."
                return 2
        }


        #Checking option 6 of prepReplication on master
        ${AT_BIN}/con_ex.bsh -d 1766_prepReplicationm6.in -o 1766_prepReplicationm6.exp -c "/ericsson/sdee/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_prepReplicationm6.exp || {
                echo "Error while running script prepReplication.sh in master with option 6"
                return 3
        }
        CONSOLE_OUTPUT_CONTAINS "omsrvs.vts.com:636" || {
                echo "Replication agreement still exists in infra master."
                return 4
        }

        #Checking option 6 of prepReplication slave
        ${AT_BIN}/con_ex.bsh -d 1766_prepReplications6.in -o 1766_prepReplications6.exp -c "/ericsson/sdee/bin/prepReplication.sh"
        scp 1766_prepReplications6.exp root@omsrvs:/var/tmp
        ssh omsrvs /usr/local/bin/expect /var/tmp/1766_prepReplications6.exp || {
                echo "Error while running script prepReplication.sh in master with option 2"
                return 5
        }
        CONSOLE_OUTPUT_CONTAINS "INFO Listing replication agreement was successful." || {
                echo "Replication agreement was not enabled in infra slave."
                return 6
        }

        #Checking option 2 of prepReplication
        ${AT_BIN}/con_ex.bsh -d 1766_prepReplicationm2.in -o 1766_prepReplicationm2.exp -c "/ericsson/sdee/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_prepReplicationm2.exp || {
                echo "Error while running script prepReplication.sh in master with option 2"
                return 7
        }
        CNT=`cat ${TC_CONSOLE_FILE}| egrep -c "Replication agreement is created between|Authentication agreement setup done: OK|Server authentication propert
y changed: OK"`
        echo $CNT
        ACNT="3"
        echo $ACNT
        [ "$CNT" -eq "$ACNT" ] || {
                echo "Error creating domain replication agreement in infra slave."
                return 8
        }
fi
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

        rm -rf *.exp
pkginfo ERICodj 2> /dev/null 
ret=$?
if [[ $ret == 0 ]]; then

        rm -rf /var/tmp/file1
else


        #Checking option 5 of prepReplication
        ${AT_BIN}/con_ex.bsh -d 1766_prepReplicationm5.in -o 1766_prepReplicationm5.exp -c "/ericsson/sdee/bin/prepReplication.sh"
        /usr/local/bin/expect 1766_prepReplicationm5.exp || {
                echo "Error while running script prepReplication.sh in master with option 5"
                return 1
        }
	
		 ${AT_BIN}/con_ex.bsh -d 1766_prepReplicationm2.in -o 1766_prepReplicationm2.exp -c "/ericsson/sdee/bin/prepReplication.sh"
       		/usr/local/bin/expect 1766_prepReplicationm2.exp || {
                	echo "Error while running script prepReplication.sh in master with option 2"
                	return 7
        	

        	CNT=`cat ${TC_CONSOLE_FILE}| egrep -c "Replication agreement is created between|Authentication agreement setup done: OK|Server authentication property changed: OK"`
        	echo $CNT
        	ACNT="3"
        	echo $ACNT
        	[ "$CNT" -eq "$ACNT" ] || {
                	echo "Error creating domain replication agreement in infra slave."
                	return 8
        	}

        }
fi
	return 0

}
