#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Source function library
. ${AT_LIB}/atcominf.lib

# Revision History
# <date>	<signum>	<details>
# 04/19/2016    xashjar         Updated openssl version 1.0.2g for 17.0.2

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	${AT_BIN}/con_ex.bsh -d 1394_uas_login.in -o 1394_uas_login.exp -c "ssh -o StrictHostKeyChecking=no uas1"
	/usr/local/bin/expect 1394_uas_login.exp

	l_cmd=`cat /var/tmp/SMCossl.txt | grep VERSION| cut -d " " -f6`

        check_release_version
        shipment=$?

        if [[ $shipment -eq '14' ]]; then
                OPENSSL1=1.0.1e
        elif [[ $shipment -eq '15' ]]; then
                OPENSSL1=1.0.1j
        elif [[ $shipment -eq '161' ]]; then
                OPENSSL1=1.0.1j
        elif [[ $shipment -eq '162' ]]; then
                OPENSSL1=1.0.1j
        elif [[ $shipment -ge '171' ]]; then
                OPENSSL1=1.0.2g
        elif [[ $shipment -ge '172' ]]; then
                OPENSSL1=1.0.2j
        elif [[ $shipment -ge '181' ]]; then
                OPENSSL1=1.0.2j
        elif [[ $shipment -ge '182' ]]; then
                OPENSSL1=1.0.2j
        else
                echo "ERROR::Non-Applicable release version.."
                exit 1
        fi

	if [[ "$l_cmd" == "$OPENSSL1" ]] ; then
		echo "INFO No error in openssl version with package SMCossl"	
	else
		echo "ERROR in openssl version with package SMCossl"
		return 1
	fi
        return 0
	

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rm *.exp
	rm /var/tmp/SMCossl.txt
	return 0

}
