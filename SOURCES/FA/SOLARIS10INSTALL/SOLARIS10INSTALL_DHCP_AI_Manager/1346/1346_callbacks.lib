#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	xsougha		<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
        # Verifying before trying to add a new network
        /ericsson/ocs/bin/ai_manager.sh -list nets | grep 10.10.20.0 && {
                echo "Dummy network to be created is already present...Delete the network prior to executing the testcase."
                return 1
        }

        # Adding a new network
        ${AT_BIN}/con_ex.bsh -d 1346_add_network.in -o 1346_add_network.exp -c "/ericsson/ocs/bin/ai_manager.sh -add net -a 10.10.20.0 -m 255.255.255.0 -r 10.10.20.1 -d vts.com -n 10.10.20.5"
        /usr/local/bin/expect 1346_add_network.exp
        CONSOLE_OUTPUT_CONTAINS "Network 10.10.20.0 added successfully" || {
                echo "Failed to create a new network 10.10.20.0"
                return 1
        }

        # Verifying whether the network got added successfully
        /ericsson/ocs/bin/ai_manager.sh -list nets | grep 10.10.20.0 || {
                echo "Desired network 10.10.20.0 not present in the list of networks. Create the same prior to proceeding with the testcase."
                return 1
        }

        return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
        # Deleting the new network
        ${AT_BIN}/con_ex.bsh -d 1346_delete_network.in -o 1346_delete_network.exp -c "/ericsson/ocs/bin/ai_manager.sh -delete net -a 10.10.20.0"
        /usr/local/bin/expect 1346_delete_network.exp
        CONSOLE_OUTPUT_CONTAINS "Network 10.10.20.0 was successfully removed." || {
                echo "Failed to delete the newly created network 10.10.20.0"
                return 1
        }

        # Verifying whether the newly created network got deleted successfully
        /ericsson/ocs/bin/ai_manager.sh -list nets | grep 10.10.20.0 && {
                echo "Desired network 10.10.20.0 is still present. Failed to delete the same."
                return 1
        }

        return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	# Removing any temporary files created
	rm -rf *.exp

	return 0
}
