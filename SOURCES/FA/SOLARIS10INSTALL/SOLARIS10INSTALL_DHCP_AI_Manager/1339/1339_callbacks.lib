#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
         /ericsson/ocs/bin/ai_manager.sh -init > /dev/null
        [[ -f /usr/local/etc/dhcpd.conf ]] || {
                echo "Error in configuring DHCP server"
                return 1
        }
	return 0 

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

     /ericsson/ocs/bin/ai_manager.sh -list nets |grep 192.45.201.0 && {
     	/ericsson/ocs/bin/ai_manager.sh -delete net -a 192.45.201.0 -q 
     }

     return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
     
        #Action1: 
        /ericsson/ocs/bin/ai_manager.sh -add net -a 192.45.201.0 -m 255.255.255.0 -r 192.45.201.1 -d dns.com -n "159.107.163.3,10.42.33.198" -q || {
        echo "Error in adding network 192.45.201.0 "
        return 1
     } 

    /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 192.45.201.10 -h atclvm1 -i lte_client1 -s  192.45.201.3 -p /var/tmp/ -t 158.107.173.12  -u -32452454 -q  || {
         echo "Error in adding lte_client 192.45.201.10 to the network" 
         return 1 
     } 
     echo " lte_client1 192.45.201.10 added successfully"

     #Action2:
    /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 192.45.201.20 -h atclvm2 -i lte_client2 -s  192.45.201.3 -p /var/tmp/ -t "159.107.173.13 160.108.173.14" -u -32452454 -q || {
          echo "Error in adding lte_client 192.45.201.20 to the network"
          return 1 
     }
     echo " lte_client2 192.45.201.20 added successfully"

     #Action3:
    /ericsson/ocs/bin/ai_manager.sh -add lte_client -a 192.ab.201.2 -h "site1eRBS15" -i "eRBS15_SITE1" -s 10.c.2.111 -p /LRAN/smrsslave1/AIF/Site1eRBS15/summaryFile.xml  -t 10.42.52.99 -u 23005253 -q && {
          echo "Error:Added networks with garbage values"
          return 1 
    }
    echo "Successfully verified the failure of addition of lte_client with garbage values"

    #Action4:
    echo "listing the added clients"
    /ericsson/ocs/bin/ai_manager.sh -list hosts || {
         echo " Error in listing the hosts"
         return 1
    }

    #Action5:
    echo "Verifying addition of successfully added clients to the aif_hosts file"  
    cat /ericsson/ocs/etc/aif_hosts|grep  lte_client1 && cat /ericsson/ocs/etc/aif_hosts|grep  lte_client2 || { 
        echo "Error in listing the contents of aif_hosts file"
        return 1
    } 
    return 0 
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
   
        return 0 
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
    echo "Deleting the added networks"
    /ericsson/ocs/bin/ai_manager.sh -delete net -a 192.45.201.0 -q || {
        echo "Error in deleting the network 192.45.201.0"
        return 1
    }

    echo "Deleting the added lte_clients"
    /ericsson/ocs/bin/ai_manager.sh -delete client -i lte_client1 -q || {
        echo "Error in deleting the lte_client1"
        return 1
    }
   
    /ericsson/ocs/bin/ai_manager.sh -delete client -i lte_client2 -q || {
        echo "Error in deleting the lte_client2"
        return 1
        } 
    return 0

}
