#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_precon() {

	NTP_SERVER_INSTALLED || {
		echo "NTP server not installed - return code $?"
		return 1
	}
	NTP_SERVER_RUNNING || {
		echo "NTP server not running - return code $?"
		return 1
	}

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
#	Return code	Meaning
#	0			All OK
#	1			Connection refused
#	2			NTP daemon has no primary time server setup
#	3			NTP has failed bits in reachability register

# Check the reachability register (8 bit/1 byte record)
# 00000000 => 00000001 => ... => 01111111 => 11111111
# 1 3 7 17 37 77 177 377 oct
# 1 3 7 F 1F 3F 7F FF
# 1 3 7 15 31 63 127 255 dec
# 2-1 4-1 8-1 16-1 32-1 64-1 128-1 256-1 dec
tc_test() {
	# ntpq doesn't store errors for connection refused so first we will check and see if there are errors output
	ntpq -p 2>/tmp/output.tmp > /dev/null

	# grep output for connection refused
	grep "ntpq: read: Connection refused" /tmp/output.tmp > /dev/null && {
		echo "Failed to connect to NTP Server"
		return 1
	}

	ntpq -p > /tmp/output.tmp
	grep "No association ID's returned" /tmp/output.tmp > /dev/null&& {
		echo "There are no ntp servers configured"
		return 2
	}

	# if there are servers, tail +3 skips the first two lines
		#     remote           refid      st t when poll reach   delay   offset    disp
		#==============================================================================
	# Read each server and check the reach parameter is non zero, $7
	# If there are reach values not equal to 0 then we have a configured ntp server
	cat /tmp/output.tmp | tail +3 |	awk '{print $7}' | grep -v 0 > /dev/null || {
		echo " There are no NTP Servers configured "
		return 3
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	rm /tmp/output.tmp
	return 0

}
