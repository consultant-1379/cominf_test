#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-07-06    xamamcg    Initial test for secondary validation
# 2012-08-17    xsimrea    Added checks on GET_CONFIG_SECTION

# Complete the callbacks in this library to automate the test case
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC


#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# In this mode, a TC should set up its own inputs, i.e. it does not depend on outputs 
# from another TC. 
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	RHEL_INSTALLED || { echo "Wrong RHEL $?"; return 1; }
	CHECK_PROFILE om_serv_master || { echo "Wrong params.cfg $?"; return 2; }
	CHECK_CONFIG_INI standard || { echo "Not standard"; return 3; }
	return 0

}

#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {


	# Run con_ex.bsh to create expect script
	${AT_BIN}/con_ex.bsh -d 64.in -o 64.expect -c "/opt/ericsson/cominf_core/bin/cominf_inirator.bsh -i"
	retval=$?
	[ $retval -ne 0 ] && { echo Failed to create expect script $retval; return 1; }

	# Find secondary name
	GET_CONFIG_SECTION $G_CONFIG_INI_FILE host CONFIG om_serv_slave > slave_tmp_file || {
        echo Error $? reading config section: $G_CONFIG_INI_FILE host CONFIG om_serv_slave
        return 2
    }
	[ $? -ne 0 ] && { echo "Failed to read config.ini to get sec"; return 2; }
	SEC=$(awk -F= '$1 ~ /^HOST_NAME/{print $2;exit}' slave_tmp_file)
	[ "${SEC:-notset}" = "notset" ] && { echo "Sec host not found"; return 3; }

	# Run linirator with expect script on secondary
	scp 64.expect ${SEC}:
	[ $? -ne 0 ] && { echo "Failed to copy expect script to sec"; return 3; }
	ssh ${SEC} 'expect 64.expect'
	retval=$?
	# Check >1 as Ctrl C returns 1
	[ $retval -gt 1 ] && { echo "Failed to run expect script on sec $retval"; return 4; }
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
# The return code decides the final test case verdict.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	
	#Check console does contain error messages
	CONSOLE_OUTPUT_CONTAINS "Not a valid"
	[ $? -ne 0 ] && { echo not a valid msg was not found; return 3; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rm -f 64.expect
	
	# Find secondary name
	SEC=$(awk -F= '$1 ~ /^HOST_NAME/{print $2;exit}' slave_tmp_file)
	[ "${SEC:-notset}" = "notset" ] && { echo "Sec host not found"; return 3; }
	ssh ${SEC} 'rm -f 64.expect'

	rm -f slave_tmp_file
	return 0

}
