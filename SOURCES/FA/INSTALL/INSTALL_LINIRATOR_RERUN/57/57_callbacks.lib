#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 21/06/12	xamamcg	Initial test for invalid values for LDAP domain name

# Complete the callbacks in this library to automate the test case
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC


#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# In this mode, a TC should set up its own inputs, i.e. it does not depend on outputs 
# from another TC. 
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	RHEL_INSTALLED || { echo "RHEL invalid: $?"; return 1; }
	CHECK_PROFILE om_serv_master || { echo "PROFILE invalid: $?"; return 2; }
	POSIX_USER_EXISTS ldapadm || { echo "No ldapadm user $?"; return 4; }

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {


	# Create backup copy of iptables
	iptables -L > iptables.orig

	# Check linirator exists
	linfile=/opt/ericsson/cominf_core/bin/cominf_inirator.bsh
	test -r ${linfile} || { echo "${linfile} does not exist"; return 1; }

	# Run con_ex.bsh to create expect script
	# 57.in is checked into GIT and has the name and prompt values
	${AT_BIN}/con_ex.bsh -d 57.in -o 57.exp -c "${linfile} -i"
	retval=$?
	[ $retval -ne 0 ] && { echo Failed to create expect script $retval; return 2; }

	# Run linirator with expect script
	expect 57.exp
	retval=$?
	# Check > 1 as Ctrl C returns 1
	[ $retval -gt 1 ] && { echo Failed to run expect script $retval; return 3; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
# The return code decides the final test case verdict.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Expect iptables not to have changed
	echo "diff (iptables -L) iptables.orig"
	iptables -L | diff - iptables.orig
	retval=$?
	[ $retval -ne 0 ] && { echo Config.ini unexpectedly altered; return 2; }

	#Check console contains correct error messages
	CONSOLE_OUTPUT_CONTAINS 'Not a valid answer "9"'
	[ $? -ne 0 ] && { echo 9 error msg not found; return 3; }
	
	#Check console contains correct error messages
	CONSOLE_OUTPUT_CONTAINS 'Not a valid answer "0"'
	[ $? -ne 0 ] && { echo 0 error msg not found; return 4; }
	
	#Check console contains correct error messages
	CONSOLE_OUTPUT_CONTAINS 'Not a valid answer "a"'
	[ $? -ne 0 ] && { echo a error msg not found; return 5; }
	
	#Check console contains correct error messages
	CONSOLE_OUTPUT_CONTAINS "LDAP domain name - must be lowercase."
	[ $? -ne 0 ] && { echo lowercase error msg not found; return 6; }
	
	#Check console contains correct error messages
	CONSOLE_OUTPUT_CONTAINS 'Not a valid answer "abc def"'
	[ $? -ne 0 ] && { echo space error msg not found; return 7; }
	
	#Check console contains correct error messages
	CONSOLE_OUTPUT_CONTAINS 'Not a valid answer "globaldomain"'
	[ $? -ne 0 ] && { echo globaldomain error msg not found; return 8; }


	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rm -f iptables.orig
	rm -f 57.exp

}
