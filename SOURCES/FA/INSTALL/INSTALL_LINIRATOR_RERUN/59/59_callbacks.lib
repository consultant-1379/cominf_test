#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 02/07/12	xamamcg	Initial test of linirator bad values then hitting return

# Complete the callbacks in this library to automate the test case
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC


#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# In this mode, a TC should set up its own inputs, i.e. it does not depend on outputs 
# from another TC. 
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
    RHEL_INSTALLED || { echo "RHEL invalid: $?"; return 1; }
    CHECK_PROFILE om_serv_master || { echo "PROFILE invalid: $?"; return 2; }
    [ ! -r /opt/ericsson/config/config.ini ] && return 3
    CHECK_CONFIG_INI standard || { echo "Invalid config.ini $?"; return 3; }
    POSIX_USER_EXISTS ldapadm || { echo "No ldapadm user $?"; return 4; }

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    # Back up the config.ini, so that the original can be restored at the end of the test
    # This maintains the contents and, more importantly, tha ACL
    mv /opt/ericsson/config/config.ini /opt/ericsson/config/config.ini.test59
    cp -c /opt/ericsson/config/config.ini.test59 /opt/ericsson/config/config.ini

	# Check linirator exists
	linfile=/opt/ericsson/cominf_core/bin/cominf_inirator.bsh
	test -r ${linfile} || { echo "${linfile} does not exist"; return 1; }

	# Run con_ex.bsh to create expect script
	# 59.in is checked into GIT and has the name and prompt values
	${AT_BIN}/con_ex.bsh -d 59.in -o 59_expect.exp -c "${linfile} -i"
	retval=$?
	[ $retval -ne 0 ] && { echo Failed to create expect script $retval; return 2; }

	# Run linirator once with expect script
	expect 59_expect.exp
	retval=$?
	[ $retval -ne 0 ] && { echo Failed to run expect script first time: $retval; return 3; }

	# Create backup copy of config.ini without first line which contains date
	tail -n+2 /opt/ericsson/config/config.ini > config.orig

	# Create backup copy of iptables
	iptables -L > iptables.orig

	# Run linirator again with expect script.  This is not an ideal test, since it doesn't compare the
	# original with the linirated file, just two separate linirated files, but it does avoid a problem
	# that the preinirator file on the CI system contains entries which are not carried forward on a
	# linirator run (in particular, the "host_common" section which describes the install media, and
	# some details in the om_serv_slave section, such as the MAC address, which is only of interest in
	# the slave's config.ini).
	expect 59_expect.exp
	retval=$?
	[ $retval -ne 0 ] && { echo Failed to run expect script second time: $retval; return 3; }

	return 0

}

#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
# The return code decides the final test case verdict.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Expect config not to have changed
	echo tail -n+2 /opt/ericsson/config/config.ini \| diff - config.orig
    # Remove first line when do diff
	tail -n+2 /opt/ericsson/config/config.ini | diff - config.orig || {
		echo Config.ini unexpectedly altered: $?
		return 1
	}

	# Expect iptables not to have changed
	echo "diff (iptables -L) iptables.orig"
	iptables -L | diff - iptables.orig || {
		echo Iptables unexpectedly altered: $?
		return 2
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Restore original config.ini
	[ -f /opt/ericsson/config/config.ini.test59 ] && {
		rm -f /opt/ericsson/config/config.ini
		mv /opt/ericsson/config/config.ini.test59 /opt/ericsson/config/config.ini
	}

	# Tidy up temporary files
	rm -f config.orig
	rm -f iptables.orig
	rm -f 59_expect.exp

	return 0
}
