#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 21/06/2012 		<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {


return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {


getent hosts om_serv_slave || { echo om_serv_slave not in the hosts database; return 1; }
return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {


OM_SERV_SLAVE_IP=`getent hosts om_serv_slave|awk '{print $3}'`
SSH_TIMEOUT=5

echo ssh target: $OM_SERV_SLAVE_IP
if ( echo -n > /dev/tcp/$OM_SERV_SLAVE_IP/22 ); then
    ssh -l root $OM_SERV_SLAVE_IP exit &
    L_PID=$!

    sleep $SSH_TIMEOUT

    # jobs -p will print the PID of running jobs
    jobs -p|grep -q "^${L_PID}$" || { echo SSH connection was not established after 5 seconds; kill $L_PID; return 1; }

    # Checking of the key in the known_hosts file identifies the real server
    ssh -l root $OM_SERV_SLAVE_IP exit 2>&1|grep "HOST IDENTIFICATION"  &&  {  echo "There is a problem with the key present in the known_hosts file. Please check the validity of this key";  return 2;}

    # checking if a command such as df can run on om_serv_slave successfully after establishing a ssh connection
    ssh -l root $OM_SERV_SLAVE_IP df > /tmp/df_output
    grep  Filesystem /tmp/df_output  || { echo df command ran successfully on om_serv_slave; return 3;}
    return 0
else 
    echo "The port 22 is closed and SSH service on the om_serv_slave is not available"
    return 4
fi
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {


return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    if (rm -f /tmp/df_output); then 
        echo "clean-up of /tmp/df_output succeeded"
    else 
        echo "clean-up of /tmp/df_output did not succeed"
        return 1
    fi

return 0

}
