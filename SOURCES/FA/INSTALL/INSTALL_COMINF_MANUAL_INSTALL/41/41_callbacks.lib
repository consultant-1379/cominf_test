#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 19/06/2012	xbahzam	  initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

return 0 

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

POSIX_USER_EXISTS ldapadm || { echo ldapadm user does not exists; return 1; }
return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

POSIX_USER_CAN_LOG_IN ldapadm || { echo ldapadm user cannot login; return 1; }

su - ldapadm -c "ls -lrt" || { echo ldapadm cannot run command: ls -lrt; return 2; }

# Run linirator as ldapadm - it should fail with an error, checked in tc_postcon()
su - ldapadm -c "/opt/ericsson/cominf_core/bin/cominf_inirator.bsh < /dev/null"

#TODO run manage domain script (to get it from Dan)
su - ldapadm -c " /opt/ericsson/cominf_ldap/bin/manage_domain.bsh < /dev/null"
return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

CONSOLE_OUTPUT_CONTAINS "cominf_inirator.bsh can only be run as - [root]" || { echo 'ldapadm had wrong permission to run the inirator command!'; return 3; }

CONSOLE_OUTPUT_CONTAINS "manage_domain.bsh can only be run as - [root]" || { echo 'ldapadm had wrong permission to run the manage_domain  command!'; return 4; }

return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

return 0

}
