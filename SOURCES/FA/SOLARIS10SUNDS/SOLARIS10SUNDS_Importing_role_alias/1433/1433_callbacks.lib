#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure
. /opt/ericsson/cominf_test/harness/lib/tst_LDAP.lib
LDAP_DOMAIN=$(grep "LDAP_DOMAIN" /ericsson/config/config.ini | awk -F"=" '{print $2}')


tc_setup() {

    # Left blank intentionally, as derz nothing to setup
    
	return 0
}

#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_precon() {

        templates=`ls *.tmpl 2>/dev/null | wc -l`
        if [ ${templates} -eq 0 ] ; then
                echo "There are no templates to process"
                return 1
        fi

        LDAP_SERVER_UP || {
                echo "LDAP server is not runningi: $?"
                return 1
        }

        LDAP_DOMAIN_EXISTS $LDAP_DOMAIN || {
                echo "$LDAP_DOMAIN does not exist"
                return 1
        }

        return 0
}
 
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
tc_test() {
	
	# Appending the roles and aliases
	# ACTION 1
        templ=1433-01.tmpl
        expfile=1433-01.exp
        infile=1433-01.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "/ericsson/sdee/bin/manage_COM.bsh -a import -d vts.com  -f import_action1 " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Appending the roles and aliases in the file "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Appending Failed : retval $?"
                        return 1
                        }
	#	ACTION 2
		
		${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "/ericsson/sdee/bin/manage_COM.bsh -a import -d vts.com  -f import_action2 -o" || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Overwriting the roles and aliases in the file "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Overwriting Failed : retval $?"
                        return 1
                        }
	return 0
	
} 
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure
tc_postcon() {
	local rflag=0
	local aflag=0
	declare -a roleList=( role14331 role14332 role14333 role14334 role14335 role14336 )
	declare -a aliasList=( alias14331 alias14332 alias14333 alias14334 )
	
	for((i=0;i<${#roleList[@]};i++))
	do
		ldapsearch -p 389 -M -T -D "cn=Directory Manager" -w ldappass -b "cn=${roleList[i]},ou=role,ou=com,dc=vts,dc=com" "objectclass=*" > /dev/null
		[ $? -eq 0 ] || {
			rflag=1
			}
			
	done
		
	for((i=0;i<${#aliasList[@]};i++))       
	do
		ldapsearch -p 389 -M -T -D "cn=Directory Manager" -w ldappass -b "role=${aliasList[i]},ou=rolealias,ou=com,dc=vts,dc=com" "objectclass=*" > /dev/null
		[ $? -eq 0 ] || {
			aflag=1
			}
			
	done
	
	
	[[ $rflag -eq 0 && $aflag -eq 0  ]] || {
		return 1
		}
	
		
	return 0
}


#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	# Deleting  roles
        templ=1433-02.tmpl
        expfile=1433-02.exp
        infile=1433-02.in
	sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "/ericsson/sdee/bin/manage_COM.bsh -r role -R role14331,role14332,role14333,role14334,role14335,role14336 -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        }
                        echo "######################################################"
                        echo "Deleting Roles "
                        echo "######################################################"
                        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Deleting Roles role14331,role14332,role14333,role14334,role14335,role14336 : retval $?"

                        }
        rm -f *.in *.exp || {
                echo "Problems removing temporary files"
                return 1
        }
    if ! LDAP_SERVER_UP ; then
        echo "LDAP server is not running"
    fi

    
        return 0
}	
