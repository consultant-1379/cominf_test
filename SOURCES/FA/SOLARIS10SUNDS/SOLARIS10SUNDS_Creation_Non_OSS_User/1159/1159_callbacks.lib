#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure
. ${AT_LIB}/tst_LDAP.lib
LDAP_DOMAIN=$(grep "LDAP_DOMAIN" /ericsson/config/config.ini | awk -F"=" '{print $2}')
tuser=t115901
tc_setup() {

        # Delete any users that exist in LDAP already
        
		LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
                        echo "user $tuser already exists"
                        LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
                                echo "Error while deleting user $tuser"
                                return 1
                        }
                                      
                }
        return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

        
        # If there are no template files exit
        templates=`ls *.tmpl 2>/dev/null | wc -l`
        if [ ${templates} -eq 0 ] ; then
                echo "There are no templates to process"
                return 1
        fi

        LDAP_SERVER_UP || {
                echo "LDAP server is not runningi: $?"
                return 1
        }

        LDAP_DOMAIN_EXISTS $LDAP_DOMAIN || {
                echo "$LDAP_DOMAIN does not exist"
                return 1
        }
        return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure

tc_test() {

			pkginfo ERICodj 2> /dev/null
			ret=$?					
			if [[ $ret -eq 0 ]]; then
				
					        # Action 1 .Execute the add_user.sh to create the user with the type COM_ONLY.

							templ=1159-01.tmpl
							expfile=1159-01.exp
							infile=1159-01.in
					sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
					${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "/ericsson/opendj/bin/add_user.sh -t COM_ONLY -d vts.com " || {
							echo "Could not create $expfile from $infile  : retval $?"
							return 1
							}
					echo "######################################################"
					echo "Creating COM_ONLY user t115901 "
					echo "######################################################"
					/usr/local/bin/expect  ${expfile} >/dev/null || {
						echo "Creating COM_ONLY user t115901 Failed : retval $?"
						return 1
						}

				return 0
		
			else


						# Action 1 .Execute the add_user.sh to create the user with the type COM_ONLY.

						templ=1159-01.tmpl
						expfile=1159-01.exp
						infile=1159-01.in
				sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
				${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "/ericsson/sdee/bin/add_user.sh -t COM_ONLY -d vts.com " || {
						echo "Could not create $expfile from $infile  : retval $?"
						return 1
						}
				echo "######################################################"
				echo "Creating COM_ONLY user t115901 "
				echo "######################################################"
				/usr/local/bin/expect  ${expfile} >/dev/null || {
						echo "Creating COM_ONLY user t115901 Failed : retval $?"
						return 1
						}

				return 0
			
			fi
} 
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure
tc_postcon() {
	
	/usr/bin/ldapsearch -T -D "cn=directory manager" -w ldappass -b "uid=t115901,ou=people,dc=vts,dc=com" "objectclass=posixaccount"  > /dev/null 2>&1
	
	[ $? -eq 0 ] || {
		echo "Action 1 Failed"
		return 1
		}
	
	# Action 2 and 3
	
	hDir=$(/usr/bin/ldapsearch -T -D "cn=directory manager" -w ldappass  -b "uid=t115901,ou=people,dc=vts,dc=com" "objectclass=posixaccount" | grep homeDirectory | awk '{print $2}')
	lShell=$(/usr/bin/ldapsearch -T -D "cn=directory manager" -w ldappass  -b "uid=t115901,ou=people,dc=vts,dc=com" "objectclass=posixaccount" | grep loginShell | awk '{print $2}')
	
	[[ $hDir == "/tmp" && $lShell == "/usr/bin/tcsh" ]] && {
		echo "Invalid login shell or home dir for COM_ONLY type of user"
		return 1
		}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure
tc_cleanup() {
        
        rm -f *.in *.exp || {
                echo "Problems removing temporary files"
                return 1
        }

        if ! LDAP_SERVER_UP ; then
                echo "LDAP server is not running"
        fi

        # Remove all users created
        LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
                        echo "Deleting user $tuser"
                        LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
                                echo "Error while deleting user $tuser"
                                return 1
                        }
                }
       
        
        return 0

}
