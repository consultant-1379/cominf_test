#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
##abc
# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure
. ${AT_LIB}/tst_LDAP.lib
LDAP_DOMAIN=$(grep "LDAP_DOMAIN" /ericsson/config/config.ini | awk -F"=" '{print $2}')
tuser=t116401

tc_setup() {
	svcadm restart svc:/application/sun/ds:ds--var-ds
        sleep 15
        LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
                echo "Deleting user $tuser"
                LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
                        echo "Error while deleting user $tuser"
                        return 1
                        }
        }

        return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	
	# Creating the OSS_ONLY User as a precondition for the testcase
	
	templ=1164-01.tmpl
        expfile=1164-01.exp
        infile=1164-01.in
	echo "**************************** ${LDAP_SUPERUSER_PASSWD}"
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
		
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "/ericsson/sdee/bin/add_user.sh -d vts.com -s 1500 -e 2000 -n t116401 " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Creating OSS_ONLY User-precondition for the testcase"
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Creation of user t116401 Failed: retval $?"
                        return 1
                        }

	
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	
	# Action 1 .Verify that when the first privilege is assigned to an OSS_ONLY user, the user type is changed from OSS_ONLY to COM_OSS.
	
		templ=1164-02.tmpl
        expfile=1164-02.exp
        infile=1164-02.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
		
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "/ericsson/sdee/bin/manage_COM_privs.bsh -d vts.com -a target -T tar116401 -u t116401 " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Adding first target tar116401 to user t116401"
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Adding target to user t116401 Failed: retval $?"
                        return 1
                        }
		
	
	# Action 2 Verify that object classes for nmsadm and COM_OSS user are same
		
		echo "##############################################################"
		echo "Verify that objectclasses for nmsadm and COM_OSS user are same"
        echo "How to verify this is not clear"
        echo "##############################################################"
	
	# Action 3 Verify that home diretory for this user is /home/t116401
	
		hDir=$(/opt/SUNWdsee/dsee6/bin/ldapsearch -T  -D 'cn=directory manager' \
				-w ldappass  -P /var/ds/alias/slapd-cert8.db -Z -S uid -F ":" -b uid=t116401,ou=people,dc=vts,dc=com \
				'objectclass=posix*'| grep  homeDirectory | awk -F: '{print $2}' )
		
		[ $hDir == "/home/t116401" ] || {
			echo "######################################################"
			echo "Invalid homeDirectory [$hDir] for t116401"
			echo "######################################################"
			return 1
		}
	
	# Action 4 Verify that login shell is /usr/bin/tcsh
		
		lShell=$(/opt/SUNWdsee/dsee6/bin/ldapsearch -T  -D 'cn=directory manager' \
				-w ldappass  -P /var/ds/alias/slapd-cert8.db -Z -S uid -F ":" -b uid=t116401,ou=people,dc=vts,dc=com \
				'objectclass=posix*'| grep  loginShell | awk -F: '{print $2}' )
		
		[ $lShell == "/usr/bin/tcsh" ] || {
			echo "######################################################"
			echo "Invalid loginShell [$lShell] for t116401"
			echo "######################################################"
			return 1
		}
		
	# Action 5 Verify that primary group is nms, the gid number for this user should be 205
		
		declare -a GID=( `ssh -o StrictHostKeyChecking=no ossmaster "id t116401" | awk '{print $2}' | awk -F"=" '{print $2}' | tr "(" " " |  tr ")" " "` )
		
		[[ ${GID[1]} == "nms" && ${GID[0]} -eq 205 ]] || {
			echo "######################################################"
			echo "Invalid primary Group [${GID[@]}] for t116401"
			echo "######################################################"
			return 1
		}
	
	# Action 6 Verify that this user entry can login to ldap clients.
		
		templ=1164-03.tmpl
        expfile=1164-03.exp
        infile=1164-03.in
	echo "**************************** ${LDAP_SUPERUSER_PASSWD}"
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
		
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c " ssh -o StrictHostKeyChecking=no t116401@ossmaster " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "#######################################################"
        echo "Trying to login to ossmaster with OSS_ONLY User t116401"
        echo "#######################################################"
        /usr/local/bin/expect -d ${expfile} >/dev/null 
	[ $? -eq 3 ] ||  {
                        echo "ssh to ossmaster Failed: retval $?"
                        return 1
                        }
	
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure
tc_postcon() {
	
	declare -a GROUPS
	GROUPS=( `ssh  -o StrictHostKeyChecking=no ossmaster "id t116401" | awk '{print $3}' | awk -F"=" '{print $2}' | tr "(" " " |  tr ")" " "` )
	
	[[ ${GROUPS[1]} == "com" && ${GROUPS[0]} -eq 609 ]] || {
			echo "#######################################################################"
			echo "User t116401 was not changed to COM_OSS after assigning first privilege"
			echo "#######################################################################"
			return 1
		}
	
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure
tc_cleanup() {
	
		rm -f *.in *.exp || {
               echo "Problems removing temporary files"
                return 1
        }
        if ! LDAP_SERVER_UP ; then
                echo "LDAP server is not running"
        fi

        LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
                echo "Deleting user $tuser"
                LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
					echo "Error while deleting user $tuser"
					return 1
				}
		}

	return 0
}

