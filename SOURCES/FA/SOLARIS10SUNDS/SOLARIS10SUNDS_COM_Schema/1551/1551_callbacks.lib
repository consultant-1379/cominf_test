#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

. ${AT_LIB}/tst_LDAP.lib
LDAP_DOMAIN=$(grep "LDAP_DOMAIN" /ericsson/config/config.ini | awk -F"=" '{print $2}')

tc_setup() {

        # Left blank intentionally

        return 0
}

#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
tc_precon() {

	pkginfo ERICodj 2> /dev/null
        if [[ $? -eq 0 ]]; then

			LDAP_SERVER_UP || {
					echo "LDAP server is not runningi: $?"
					return 1
			}

			LDAP_DOMAIN_EXISTS $LDAP_DOMAIN || {
					echo "$LDAP_DOMAIN does not exist"
					return 1
			}

			[ -f /ericsson/opendj/etc/reserved_groups ] || {
		                    return 1
                }
		       		    return 0
			
		else

			LDAP_SERVER_UP || {
					echo "LDAP server is not runningi: $?"
					return 1
			}

			LDAP_DOMAIN_EXISTS $LDAP_DOMAIN || {
					echo "$LDAP_DOMAIN does not exist"
					return 1
			}

			[ -f /ericsson/sdee/etc/reserved_groups ] || {
                    return 1
                }
			return 0
						
		fi 	
}	 	
 
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure

tc_test() {

		pkginfo ERICodj 2> /dev/null
		if [[ $? -eq 0 ]]; then
			 /usr/bin/ldapsearch -T -D "cn=directory manager" -w ldappass -b "dc=vts,dc=com" "objectclass=posixgroup" |grep 609 > /dev/null
			action1_ret=$?

			/usr/bin/ldapsearch -T -D "cn=directory manager" -w ldappass -b "dc=vts,dc=com" "objectclass=globaldomain" |grep 609 > /dev/null
			action2_ret=$?

			/usr/bin/ldapsearch -b "cn=schema" -s base "objectclass=*" objectclasses | grep -i ericssonUserAuth > /dev/null
			action3_ret=$?

			[ -f /ericsson/opendj/etc/reserved_groups ] && {
					group=$(cat /ericsson/opendj/etc/reserved_groups | grep -i com | awk '{print $1}')
					groupId=$(cat /ericsson/opendj/etc/reserved_groups | grep -i com | awk '{print $2}')
					if [[ ${group} != "com" || ${groupId} -ne 609 ]]; then
							return 1
					fi
				}

			if [[ $action1_ret -ne 0 || $action2_ret -eq 0 || $action1_ret -ne 0 ]]; then
                return 1
			fi


			return 0
				
		else

			/usr/bin/ldapsearch -T -D "cn=directory manager" -w ldappass -b "dc=vts,dc=com" "objectclass=posixgroup" |grep 609 > /dev/null
			action1_ret=$?

			/usr/bin/ldapsearch -T -D "cn=directory manager" -w ldappass -b "dc=vts,dc=com" "objectclass=globaldomain" |grep 609 > /dev/null
			action2_ret=$?

			/usr/bin/ldapsearch -b "cn=schema" -s base "objectclass=*" objectclasses | grep -i ericssonUserAuth > /dev/null
			action3_ret=$?

			[ -f /ericsson/sdee/etc/reserved_groups ] && {
					group=$(cat /ericsson/sdee/etc/reserved_groups | grep -i com | awk '{print $1}')
					groupId=$(cat /ericsson/sdee/etc/reserved_groups | grep -i com | awk '{print $2}')
					if [[ ${group} != "com" || ${groupId} -ne 609 ]]; then
							return 1
					fi
				}
	
			if [[ $action1_ret -ne 0 || $action2_ret -eq 0 || $action1_ret -ne 0 ]]; then
                return 1
			fi


			return 0
		
		fi	
}

 
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Left blank intentionally

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	 LDAP_SERVER_UP || {
                echo "LDAP server is not runningi: $?"
                return 1
        }

	return 0

}
