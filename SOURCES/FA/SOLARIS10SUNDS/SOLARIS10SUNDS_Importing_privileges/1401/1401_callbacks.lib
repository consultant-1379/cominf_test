#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure
. ${AT_LIB}/tst_LDAP.lib
LDAP_DOMAIN=$(grep "LDAP_DOMAIN" /ericsson/config/config.ini | awk -F"=" '{print $2}')
TEST_COMMANDS=cmds.cat
tuser=tu1401	

pkginfo ERICodj
if [[ $? -eq 0 ]]; then
        PATH_ADDUSER=/ericsson/opendj/bin/add_user.sh
	PATH_COM=/ericsson/opendj/bin/manage_COM_privs.bsh
else
        PATH_ADDUSER=/ericsson/sdee/bin/add_user.sh
	PATH_COM=/ericsson/sdee/bin/manage_COM_privs.bsh
fi  
 
tc_setup() {
	LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
                        echo "user $tuser already exists"
                        LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
                                echo "Error while deleting user $tuser"
                                return 1
                        }
	}
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	# If there are no template files exit
        templates=`ls *.tmpl 2>/dev/null | wc -l`
        if [ ${templates} -eq 0 ] ; then
                echo "There are no templates to process"
                return 1
        fi

        LDAP_SERVER_UP || {
                echo "LDAP server is not runningi: $?"
                return 1
        }

        LDAP_DOMAIN_EXISTS $LDAP_DOMAIN || {
                echo "$LDAP_DOMAIN does not exist"
                return 1
        }
return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	tpref=1401-00
                templ=${tpref}.tmpl
                [ -f $templ ] || {
                echo "Cannot find template file $templ for ${tpref} test"
                }

        #ACTION 1
        expfile="${tpref}.exp"
        infile="${tpref}.in"
        sed -e "s/dddd/${LDAP_DOMAIN}/" < ${templ} > ${infile}
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_ADDUSER} -t COM_ONLY -d $LDAP_DOMAIN -n $tuser -i 1401 " || {
                        echo "Could not create $expfile from $infile to run  : retval $?"
                        }

                echo "Adding user $tuser..."
                /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "useradd : retval $?"
                        }
        #ACTION 1
        #cp import_action1 /var/tmp
        expfile=1401-01.exp
        infile=1401-01.in
        cat 1401-01.tmpl > ${infile}
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -a target -f import_action1 -d vts.com" || {
                        echo "Could not create $expfile from $infile : retval $?"
                        }
        echo "######################################################"
		echo "ACTION 1"
                echo "Trying to add 21 targets - Negative testing"
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo " ACTION1 : retval $?"
                        }	

	#ACTION 2
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -a target -f import_action2 -d vts.com" || {
                        echo "Could not create $expfile from $infile : retval $?"
                        }
        echo "######################################################"
                echo "ACTION 2"
                echo "Trying to assign duplicate  targets - Negative testing"
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo " ACTION2 : retval $?"
                        }

	#ACTION 3
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -a target -f import_action3 -d vts.com" || {
                        echo "Could not create $expfile from $infile : retval $?"
                        }
        echo "######################################################"
                echo "ACTION 3"
                echo "Assign target with characters more than 49"
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo " ACTION3 : retval $?"
	}
	#ACTION 4
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -a target -f import_action4 -d vts.com" || {
                        echo "Could not create $expfile from $infile : retval $?"
                        }
        echo "######################################################"
                echo "ACTION 4"
                echo "Assign target with special characters "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo " ACTION4 : retval $?"
        }
return 0
	
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	local cntTargets	
	# Action 1 
	cntTargets=$(ldapsearch -p 389 -M -T -D "cn=Directory Manager" -w ldappass -b "uid=$tuser,ou=people,dc=vts,dc=com" "ericssonUserAuthenticationScope=*" ericssonUserAuthenticationScope | wc -l)
	if [ $cntTargets -ne 0 ]; then
		return 1
	fi
return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
                        echo "user $tuser already exists"
                        LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
                                echo "Error while deleting user $tuser"
                                return 1
                        }
        }	
	rm -f *.in *.exp || {
                echo "Problems removing temporary files"
                return 1
        }

	return 0
}
