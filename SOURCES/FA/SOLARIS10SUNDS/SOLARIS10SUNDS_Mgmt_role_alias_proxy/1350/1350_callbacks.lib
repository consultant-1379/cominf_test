#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

. ${AT_LIB}/tst_LDAP.lib
LDAP_DOMAIN=$(grep "LDAP_DOMAIN" /ericsson/config/config.ini | awk -F"=" '{print $2}')

pkginfo ERICodj 2> /dev/null 
ret=$?
if [[ $ret == 0 ]]; then
      	PATH_COM=/ericsson/opendj/bin/manage_COM.bsh
else
       	PATH_COM=/ericsson/sdee/bin/manage_COM.bsh
fi

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

		
		templ=1350-01.tmpl
		expfile=1350-01.exp
        infile=1350-01.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -r role -R role135002,role135003 -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Deleting role role135002,role135003 "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Deleting role Failed : retval $?"
                        }
		rm -f *.in *.exp  || {
                echo "Problems removing temporary files"
                return 1
        }
	templates=`ls *.tmpl 2>/dev/null | wc -l`
        if [ ${templates} -eq 0 ] ; then
                echo "There are no templates to process"
                return 1
        fi

        LDAP_SERVER_UP || {
                echo "LDAP server is not runningi: $?"
                return 1
        }

        LDAP_DOMAIN_EXISTS $LDAP_DOMAIN || {
                echo "$LDAP_DOMAIN does not exist"
                return 1
        }

		
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	
		
	#  Action 5 Adding multiple roles
	
		templ=1350-01.tmpl
		expfile=1350-01.exp
        infile=1350-01.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -a role -R role135001,role135002,role135003 -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Creating roles role135001,role135002 for the testcase "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Creating roles Failed : retval $?"
                        return 1
                        }
		
		
	
	# Action 1 Supplying -d domain at the command line:
		
		templ=1350-02.tmpl
		expfile=1350-02.exp
        infile=1350-02.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
		
		${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -a alias -A alias135001 -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Creating Alias alias135001 for the testcase "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Creating roles Failed : retval $?"
                        return 1
                        }
	
	# Action 2  Adding existing role to alias
		templ=1350-03.tmpl
		expfile=1350-03.exp
        infile=1350-03.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
	
		${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -m alias -i -A alias135001  -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Adding the role role135002 to the existing role alias "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Adding role role135002 to alias Failed : retval $?"
                        return 1
                        }
	
	# Action 3 Adding role to role alais
	
		templ=1350-01.tmpl
		expfile=1350-01.exp
        infile=1350-01.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
	
		${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -m alias -i -A alias135001 -R role135003  -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Adding the role role135003 to the existing role alias "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Adding role role135003 to alias Failed : retval $?"
                        return 1
                        }
	
	# Action 4 Removing role from alias
		
		${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -m alias -x -A alias135001 -R role135001  -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Removing the role role135001 from the existing role alias "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Removing role role135001 from alias Failed : retval $?"
                        return 1
                        }
	
	#  Action 6	ldap search command to list all the roles that were added/deleted to/from the domain
		
		ldapsearch -D "cn=directory manager" -w ldappass -b "cn=role135001,ou=role,ou=com,dc=vts,dc=com" "objectclass=*" > /dev/null 2>&1
		ret1=$?
		ldapsearch -D "cn=directory manager" -w ldappass -b "cn=role135002,ou=role,ou=com,dc=vts,dc=com" "objectclass=*" > /dev/null 2>&1
		ret2=$?
		ldapsearch -D "cn=directory manager" -w ldappass -b "cn=role135003,ou=role,ou=com,dc=vts,dc=com" "objectclass=*" > /dev/null 2>&1
		ret3=$?

		ldapsearch -D "cn=directory manager" -w ldappass -b "role=alias135001,ou=rolealias,ou=com,dc=vts,dc=com" "objectclass=*" > /dev/null 2>&1
		ret4=$?
		
		[[ $ret1 -eq 0 && $ret2 -eq 0 && $ret3 -eq 0 && $ret4 -eq 0 ]] || {
			echo "Testcase Failed"
			return 1
		}
		
		
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
		
		templ=1350-01.tmpl
		expfile=1350-01.exp
        infile=1350-01.in
        sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
        ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${PATH_COM} -r role -R role135002,role135003 -d vts.com " || {
                        echo "Could not create $expfile from $infile  : retval $?"
                        return 1
                        }
        echo "######################################################"
        echo "Deleting role role135002,role135003 "
        echo "######################################################"
        /usr/local/bin/expect  ${expfile} >/dev/null || {
                        echo "Deleting role Failed : retval $?"
                        return 1
                        }
		rm -f *.in *.exp  || {
                echo "Problems removing temporary files"
                return 1
        }

        if ! LDAP_SERVER_UP ; then
                echo "LDAP server is not running"
        fi
		
	return 0
}
