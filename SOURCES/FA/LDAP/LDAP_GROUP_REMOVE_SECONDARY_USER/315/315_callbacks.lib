#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 28-9-2012	xdansan		Remove a COMOOS user from the com group

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"
WORKFILE="/tmp/tcid315.tmp"
#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {





    

    # Replace PASSWD with the correct credentials
    for ii in *.in; do
        sed "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp
    done

#-------------------------------------------------------------------------------
# Create a test user  
#-------------------------------------------------------------------------------

    CMD='/ericsson/sdee/bin/add_user.sh -d 1.com -n u315 -i 1315 -C bhavana -y'
    ${AT_BIN}/con_ex.bsh -d 315adduser.in.tmp -o 315adduser.exp -c "$CMD" || {
        echo "Failed to generate /usr/local/bin/expect script, $?"
        return 1
    }

    /usr/local/bin/expect 315adduser.exp ||{
        echo "Failed to create user, error code $?"
        return 2
    }

#-------------------------------------------------------------------------------
# Add target to user
#-------------------------------------------------------------------------------
    CMD='/ericsson/sdee/bin/manage_COM_privs.bsh -a target -d 1.com -u u315 -T target1 -y'
    ${AT_BIN}/con_ex.bsh -d 315.in.tmp -o 315.exp -c "$CMD" || {
        echo "Failed to generate /usr/local/bin/expect script, $?"
        return 3
    }

    /usr/local/bin/expect 315.exp || {
        echo "Failed to add target to user, error code $?"
        return 4
    }

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {



	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

#-------------------------------------------------------------------------------
# Confirm that user is COM_OSS 
#-------------------------------------------------------------------------------
    /usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u315,ou=people,dc=1,dc=com objectclass=* | grep "ericssonUserAuthenticationScope: target1" && {
        echo "Target1 not added to user"
        return 3
    }

    /usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u315,ou=people,dc=1,dc=com objectclass=* | grep "description: COM_OSS" || {
        echo "User is not COM_OSS"
        return 4
    }

   
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
>$WORKFILE
#-------------------------------------------------------------------------------
#  Remove a test user from the com group
#-------------------------------------------------------------------------------

    echo "removing a test user ..."
    ${AT_BIN}/con_ex.bsh -d 315_remove_user.in.tmp -o 315_remove_user.exp -c "$LDAP_BIN/del_user_from_group.sh -d 1.com -g com -u u315 -y" -r
    /usr/local/bin/expect 315_remove_user.exp > $WORKFILE
    rc=$?
    [ $rc -eq 1 ] && grep "ERROR : COM privileges can only be assigned using manage_COM_privs.bsh" $WORKFILE && {
        echo "Test user was not removed, error code $rc as expected"
        return 0
    }   

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    echo "checking test user in 1.com ..."
    /usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u315,ou=people,dc=1,dc=com objectclass=* | grep "uid: u315" || {
        echo "u315 was removed from com in 1.com ... This wasn't expected"
        return 1
    }	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {



    

	rm $WORKFILE
	rm *.tmp
	rm *.exp

}
