#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 19/12/12	xbahzam		Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

TEST_DOMAIN="2.com"


#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {



	
	
	

	

	# Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
	[[ ` ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
		echo "${CONFIG} contains more than 8 domains - harness will timeout"
		return 1
	}

	

	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
			-e "s/TESTUSER/$TEST_USER/" \
			-e "s/TESTDOM/$TEST_DOMAIN/" $ii > $ii.tmp || {
			echo "Failed to replace LDAP superuser password holder in /usr/local/bin/expect input file $ii"
			return 1
		}
	done

	


	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {



	LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

	rc=0

	echo -e "\nCheck that test domain ${TEST_DOMAIN} exists..."
	LDAP_DOMAIN_EXISTS ${TEST_DOMAIN} || {
		echo "Test domain ${TEST_DOMAIN} does not exist, rc $? - FAIL" 
		return 1
	}

	echo -e "\nCheck that domain foo.com does not exist..."
	LDAP_DOMAIN_EXISTS "foo.com" && {
		echo "Domain foo.com exists, rc $? - FAIL" 
		rc=2
	}

	echo -e "\nCheck that online ldif backup file for domain 1.com (taken from TC 814) exists..."
	[ -e online.ldif ] || {
		echo "online.ldif backup file does not exist" 
		rc=3
	}

	return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {



	rc=0

	echo -e "\nTest 1: Restore from a non-existent ldif file"
	${AT_BIN}/con_ex.bsh -d 817_migrate.in.tmp -o 817_expect.exp -c "$LDAP_BIN/ldap_mig.bsh -i -d ${TEST_DOMAIN} -f non-existent.ldif -m " -r
	/usr/local/bin/expect 817_expect.exp && {
		echo "Restore from a non-existent ldif file succeeded, rc $? - FAIL" 
		return 1
	}
	
	echo -e "\nTest 2: Restore from online.ldif into a non-existent domain foo.com"
	${AT_BIN}/con_ex.bsh -d 817_migrate.in.tmp -o 817_expect.exp -c "$LDAP_BIN/ldap_mig.bsh -i -d foo.com -f online.ldif -m " -r
	/usr/local/bin/expect 817_expect.exp && {
		echo "Restore into a non-existent online.ldif succeeded, rc $? - FAIL" 
		rc=2
	}

	echo -e "\nTest 3: try to import domain backup file 1.com into domain 2.com"
	${AT_BIN}/con_ex.bsh -d 817_migrate2.in.tmp -o 817_expect.exp -c "$LDAP_BIN/ldap_mig.bsh -i -d 2.com -f online.ldif -m " -r
	/usr/local/bin/expect 817_expect.exp || {
		echo "Restore into a different domain succeeded without confirmation, rc $? - FAIL" 
		rc=3
	}

	echo -e "\nTest 4: TODO --try to import backup file generated from Sun-DS"

	return $rc
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {



	rc=0
	
	echo -e "\nChecking console output for ERROR messages..."
	
	CONSOLE_OUTPUT_CONTAINS "ERROR : Unable to read [non-existent.ldif]." || {
		echo "Console output did not contain message: \"ERROR : Unable to read [non-existent.ldif].\" "
		return 1
	}

	CONSOLE_OUTPUT_CONTAINS "ERROR : Domain [foo.com] does not exist." || {
		echo "Console output did not contain message: \"ERROR : Domain [foo.com] does not exist.\" "
		rc=2
	}

	CONSOLE_OUTPUT_CONTAINS "WARNING : The selected domain does not match the import file." || {
		echo "Console output did not contain message: \"WARNING : The selected domain does not match the import file.\" "
		rc=3
	}

	return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rc=0

	
	


	# remove the generated working files
	rm -f *tmp *exp || {
		echo "Failed to remove the generated working files"
		return 1
	}

	return $rc

}
