#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 03-Aug-2012     xfeldan    First pass
# 06-Aug-2012     xsimrea    Afer review comments

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp
	done
	
	# If 1.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_1 || {
		LDAP_CREATE_DOMAIN_ON_OSS1 $G_DOMAIN_NAME_1 || { echo "ERROR: Failed to create domain $G_DOMAIN_NAME_1" ; return 1; }
	}
	echo "Creating nmsadm user"
	LDAP_USER_EXISTS 1.com nmsadm || {
	${AT_BIN}/con_ex.bsh -d 173_user.in.tmp -o 173_user.exp -c "/ericsson/sdee/bin/add_user.sh  -d 1.com -n nmsadm" -r
	/usr/local/bin/expect 173_user.exp || {
		echo "Test user was not created, error code $?"
		return 1
	}
	}
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w ldappass -b ou=people,dc=1,dc=com '(objectclass=posixAccount)' | grep nmsadm || {
		echo "nmsadm user not present in domain ... This wasn't expected"
		return 1
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Try to migrate empty test domain (to default domain)
	${AT_BIN}/con_ex.bsh -d 173_migrate.in.tmp -o 173_expect.exp -c "/ericsson/sdee/bin/migrate_domain.bsh -d 1.com" -r
	/usr/local/bin/expect 173_expect.exp
	rc=$?
	[ $rc -eq 0 ] && {
		echo "Migration of empty test domain returned error code $rc"
		return 1
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	echo "checking nmsadm in globaldomain"
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w ldappass -b ou=people,dc=globaldomain '(objectclass=posixAccount)' | grep nmsadm || {
		echo "nmsadm user not present in domain ... This wasn't expected"
		return 1
	}
	#echo "checking referrals in 1.com"
	#/usr/bin/ldapsearch -D 'cn=Directory Manager' -w ldappass -b ou=people,dc=1,dc=com '(objectclass=posixAccount)' | grep referral || {
	#	echo "no referrals found ... nmsadm might be present in local domain"
	#	return 2
	#}
	#echo "checking nmsadm in 1.com"
	#/usr/bin/ldapsearch  -D 'cn=Directory Manager' -w ldappass -b ou=people,dc=1,dc=com '(objectclass=posixAccount)' | grep nmsadm
	#[[ $? -eq 0 ]] && {
	#	echo "user nmsadm was found ... This wasn't expected"
	#	return 3
	#}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	LDAP_DELETE_DOMAIN $G_DOMAIN_NAME_1 || { echo "ERROR: Failed to delete domain $G_DOMAIN_NAME_1" ; return 1; }
    return 0
}
