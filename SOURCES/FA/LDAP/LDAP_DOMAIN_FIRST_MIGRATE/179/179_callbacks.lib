#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 03-Aug-2012     xfeldan    First pass
# 06-Aug-2012     xsimrea    Afer review comments

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {



	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp
	done

	

	#If 1.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS 1.com || {
		LDAP_CREATE_DOMAIN 1.com || { echo "ERROR: Failed to create domain 1.com" ; return 1; }
	}

	echo "Creating test group in test domain"
	${AT_BIN}/con_ex.bsh -d add_group.in.tmp -o /usr/local/bin/expect.exp -c "/ericsson/sdee/bin/add_group.sh -d 1.com -s 30107 -e 40000 -n tstgroup -y"
	< <(echo $LDAP_SUPERUSER_PASSWD) || {
		echo "Test group was not created, error code $?"
		return 1
	}

	echo "Creating test user in test domain"
	${AT_BIN}/con_ex.bsh -d add_user.in.tmp -o /usr/local/bin/expect.exp -c "/ericsson/sdee/bin/add_user.sh -d 1.com -s 30107 -e 40000 -n seth -y"
	/usr/local/bin/expect /usr/local/bin/expect.exp || {
		echo "Test user was not created, error code $?"
		return 1
	}

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Migrate empty test domain (to default domain) using -y switch
	${AT_BIN}/con_ex.bsh -d 179_migrate.in.tmp -o 179_expect.exp -c "/ericsson/sdee/bin/migrate_domain.bsh -d 1.com -y" -r
	/usr/local/bin/expect 179_expect.exp || {
		echo "Test domain could not be migrated using -y option, error code $?"
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Check that user was migrated
	echo "Listing all posixaccoutns:"
	/usr/bin/ldapsearch -D "cn=directory manager" -s sub -w $LDAP_SUPERUSER_PASSWD -b "" "objectclass=posixAccount" dn
	echo "END of showing posixaccounts"
	set +o pipefail
	/usr/bin/ldapsearch -D "cn=directory manager" -s base -w $LDAP_SUPERUSER_PASSWD -b "uid=seth,ou=people,dc=globaldomain" "objectclass=posixAccount" dn|| {
		echo "Test user was not migrated"
		return 2
	}
	# Check that group was migrated
	/usr/bin/ldapsearch -D "cn=directory manager" -s sub -w $LDAP_SUPERUSER_PASSWD -b "" "objectclass=posixGroup"
	/usr/bin/ldapsearch -D "cn=directory manager" -s base -w $LDAP_SUPERUSER_PASSWD -b "cn=tstgroup,ou=group,dc=globaldomain" "objectclass=posixGroup" dn|| {
		echo "Test group was not migrated"
		return 3
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rc=0

	# Tidy up extra files
	rm -f *.in.tmp *.exp

	echo "Deleting test group in test domain"
	"/ericsson/sdee/bin/del_group.sh -d 1.com -n tstgroup -y" << (echo $LDAP_SUPERUSER_PASSWD) || {
		echo "Test group was not deleted, error code $?"
		return 1
	}

	echo "Deleting test user in test domain"
	${A"/ericsson/sdee/bin/del_user.sh -d 1.com -n seth -y" << (echo $LDAP_SUPERUSER_PASSWD) || {
		echo "Test user was not deleted, error code $?"
		return 2
	}

	return $rc

}
