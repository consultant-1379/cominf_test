#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

G_DOMAIN_NAME_1=1.com
G_DOMAIN_DN_1=dc=1,dc=com
G_DOMAIN_NAME_2=2.com
G_DOMAIN_DN_2=dc=2,dc=com


# Making username suffixed with test identifier.
# Outside of functions there is no visibility of SPEC_TC_ID
# If the username is set within a function it remains local to that function and is not visibile in subsequent functions
G_USER_NAME=proxy$(basename "$BASH_SOURCE" | awk -F_ ' { print $1 } ')
G_FAKE_NAME=f$G_USER_NAME
G_DEFAULT_PASSWD=passw0rd
G_SCRIPTUNDERTEST=manage_COM.bsh
COMINF_LDAP_PKGDIR=/ericsson/sdee



#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	

	# If 1.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_1 || {
		LDAP_CREATE_DOMAIN_ON_OSS1 $G_DOMAIN_NAME_1 || { echo "ERROR: failed to create domain $G_DOMAIN_NAME_1" ; return 1; }
	}

	# If 2.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_2 || {
		LDAP_CREATE_DOMAIN_ON_OSS2 $G_DOMAIN_NAME_2 || { echo "ERROR: Failed to create domain $G_DOMAIN_NAME_2" ; return 1; }
	}

	LDAP_PROXY_AGENT_CREATE $G_USER_NAME $G_DOMAIN_NAME_1 $G_DEFAULT_PASSWD || {
		echo "ERROR: Failed to create proxy agent user $G_USER_NAME on $G_DOMAIN_NAME_1"
		return 1
	}


	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
	LDAP_SERVER_UP || { echo "ERROR: LDAP not running" ; return 1; }
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_1 || { echo "ERROR: domain $G_DOMAIN_NAME_1 does not exist"; return 1;}
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_2 || { echo "ERROR: domain $G_DOMAIN_NAME_2 does not exist"; return 1;}
	LDAP_PROXY_AGENT_EXISTS $G_USER_NAME $G_DOMAIN_DN_1 ||  { echo "ERROR: proxy agent doesn't exist on $G_DOMAIN_NAME_1"; return 1; }
	LDAP_PROXY_AGENT_EXISTS $G_FAKE_NAME $G_DOMAIN_DN_1 && { echo "ERROR: proxy agent already exists on $G_DOMAIN_NAME_1"; return 1; }
	LDAP_PROXY_AGENT_EXISTS $G_USER_NAME $G_DOMAIN_DN_2 && { echo "ERROR: proxy agent already exists on $G_DOMAIN_NAME_2"; return 1; }

	return 0
}
#################################################################################



#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	local filePrefix=removeProxy

	# Use here document to generate input file
# ----- START HERE DOCUMENT -----
	cat > ${filePrefix}.in << EOF || { echo "ERROR: failed to make /usr/local/bin/expect template file ${filePrefix}.in" ; return 1; }
LDAP Directory Manager password:
$LDAP_SUPERUSER_PASSWD
Enter COM proxyagent name:
$G_FAKE_NAME
ERROR*
REMOVE THIS LINE
Enter COM proxyagent name:
$G_USER_NAME
Please confirm that you want to proceed with requested actions*
Yes
EOF
# ----- END HERE DOCUMENT -----

	# Generate /usr/local/bin/expect script from input file
	COMMAND_STRING="${COMINF_LDAP_PKGDIR}/bin/${G_SCRIPTUNDERTEST} -d $G_DOMAIN_NAME_1 -r proxy"
	${AT_BIN}/con_ex.bsh -d ${filePrefix}.in -o ${filePrefix}.exp -c "$COMMAND_STRING" -r || {
		echo "ERROR: Could not create input file ${filePrefix}.in"
		return 1
	}

	grep -v "REMOVE THIS LINE" ${filePrefix}.exp  > ${filePrefix}.tmp
	mv ${filePrefix}.tmp ${filePrefix}.exp

	echo "INFO: testing $COMMAND_STRING"
	/usr/local/bin/expect ${filePrefix}.exp || {
		echo "ERROR: Test failed with $?"
		return 1
	}	
	echo "INFO: command completed successfully"	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {


	return 0
}
