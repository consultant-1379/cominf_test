#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 05/10/12	xamamcg		Initial test for invalid bulk filenames

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result
LDAP_BIN="/ericsson/sdee/bin/"
TEST_DOMAIN=$(cat /ericsson/config/config.ini | grep "LDAP_DOMAIN_NAME" | awk -F= '{print $2}')
TEST_ROLE1=r599a
TEST_ROLE2=r599b
TEST_ALIAS=a599a


#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    # Replace PASSWD and other fields in input file(s) with the correct credentials or data
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
            -e "s/TESTALIAS/$TEST_ALIAS/" \
            -e "s/TESTROLE1/$TEST_ROLE1/" \
            -e "s/TESTROLE2/$TEST_ROLE2/" \
            -e "s/TESTDOM/$TEST_DOMAIN/" $ii > $ii.tmp || {
            echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin//usr/local/bin//usr/local/bin/expect input file $ii, rc $?"
            return 6
        }
    done

#-------------------------------------------------------------------------------
# Create a test role
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 599.in.tmp -o 599role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d $TEST_DOMAIN -R $TEST_ROLE1 -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 3
	}

	/usr/local/bin/expect 599role.exp || {
		echo "Failed to create role, error code $?"
		return 4
	}
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

#-------------------------------------------------------------------------------
#  Test role is present
#-------------------------------------------------------------------------------

	dmn=$(LDAP_GET_DOMAIN_DN_FORMAT $TEST_DOMAIN)
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=$TEST_ROLE1,ou=role,ou=com,$dmn objectclass=* || {
		echo "No role $TEST_ROLE"
		return 1
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	${AT_BIN}/con_ex.bsh -d 599.in.tmp -o 599bulkload.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d $TEST_DOMAIN -f 599a_import.in.tmp -o -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 599bulkload.exp || {
		echo "Failed to load when no alias, error code $?"
		return 2
	}

	${AT_BIN}/con_ex.bsh -d 599.in.tmp -o 599bulkload.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d $TEST_DOMAIN -f 599b_import.in.tmp -o -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 3
	}

	/usr/local/bin/expect 599bulkload.exp || {
		echo "Failed to load when no role, error code $?"
		return 4
	}

	${AT_BIN}/con_ex.bsh -d 599.in.tmp -o 599bulkload.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d $TEST_DOMAIN -f 599c_import.in.tmp -o -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 5
	}

	/usr/local/bin/expect 599bulkload.exp > output.tmp 
	# This command return a zero error code even though it gives the following output.
	# Way around for the moment is to store output and grep for this message
	grep "No ROLE or ALIAS lines found in import file. Exiting ..." output.tmp || {
		echo "loaded when no alias and no role, error code $retval"
		return 6
	}

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

dmn=$(LDAP_GET_DOMAIN_DN_FORMAT $TEST_DOMAIN)
#-------------------------------------------------------------------------------
#  Test role is present
#-------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=$TEST_ROLE1,ou=role,ou=com,$dmn objectclass=* || {
		echo "No role r599a"
		return 1
	}
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=$TEST_ROLE2,ou=role,ou=com,$dmn objectclass=* || {
		echo "No role r599b"
		return 2
	}
#-------------------------------------------------------------------------------
#  Test alias is present
#-------------------------------------------------------------------------------
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE1" || {
		echo "alias $TEST_ALIAS did not have role $TEST_ROLE1"
		return 3
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE2" || {
		echo "alias $TEST_ALIAS did not have role $TEST_ROLE2"
		return 4
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

        ${AT_BIN}/con_ex.bsh -d 599_remove_role.in.tmp -o 599_expect.exp -c "$LDAP_BIN/manage_COM.bsh -r role  " -r
        /usr/local/bin/expect 599_expect.exp  || {
                echo "Could not delete role added to default domain - FAIL"
                return 1
        }

        # remove the generated /usr/local/bin/expect files
        rm -f *tmp *exp *out || {
                echo "Failed to remove the generated working files"
                return 1
        }

	return 0
}
