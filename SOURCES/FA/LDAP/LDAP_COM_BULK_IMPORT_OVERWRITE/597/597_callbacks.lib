#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 05/10/12	xamamcg		Initial test for bulk overwrite

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result
LDAP_BIN="/ericsson/sdee/bin/"
TEST_DOMAIN=$(cat /ericsson/config/config.ini | grep "LDAP_DOMAIN_NAME" | awk -F= '{print $2}')

TEST_ROLE1=r597a
TEST_ROLE2=r597b
TEST_ROLE3=r597c
TEST_ROLE4=r597d

TEST_ALIAS1=a597a
TEST_ALIAS2=a597b
TEST_ALIAS3=a597c
TEST_ALIAS4=a597d
TEST_ALIAS5=a597e
TEST_ALIAS6=a597f

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Replace PASSWD with the correct credentials or data
	for ii in *.in; do
		sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp || {
			echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin/expect input file $ii, rc $?"
			return 2
		}
	done

    # Replace PASSWD and other fields in input file(s) with the correct credentials or data
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
            -e "s/TESTALIAS1/$TEST_ALIAS1/" \
            -e "s/TESTALIAS2/$TEST_ALIAS2/" \
            -e "s/TESTALIAS3/$TEST_ALIAS3/" \
            -e "s/TESTALIAS4/$TEST_ALIAS4/" \
            -e "s/TESTALIAS5/$TEST_ALIAS5/" \
            -e "s/TESTALIAS6/$TEST_ALIAS6/" \
            -e "s/TESTROLE1/$TEST_ROLE1/" \
            -e "s/TESTROLE2/$TEST_ROLE2/" \
            -e "s/TESTROLE3/$TEST_ROLE3/" \
            -e "s/TESTROLE4/$TEST_ROLE4/" \
            -e "s/TESTDOM/$TEST_DOMAIN/" $ii > $ii.tmp || {
            echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin/expect input file $ii, rc $?"
            return 6
        }
    done

#-------------------------------------------------------------------------------
# Create a test role
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 597.in.tmp -o 597role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d $TEST_DOMAIN -R $TEST_ROLE1 -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 3
	}

	/usr/local/bin/expect 597role.exp || {
		echo "Failed to create role, error code $?"
		return 4
	}
#-------------------------------------------------------------------------------
# Create a 2nd test role
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 597.in.tmp -o 597role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d $TEST_DOMAIN -R $TEST_ROLE2 -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 5
	}

	/usr/local/bin/expect 597role.exp || {
		echo "Failed to create role, error code $?"
		return 6
	}
#-------------------------------------------------------------------------------
# Create a test alias
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 597.in.tmp -o 597role.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d $TEST_DOMAIN -A $TEST_ALIAS1 -R $TEST_ROLE1,$TEST_ROLE2 -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 7
	}

	/usr/local/bin/expect 597role.exp || {
		echo "Failed to create alias, error code $?"
		return 8
	}
#-------------------------------------------------------------------------------
# Create a 2nd test alias
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 597.in.tmp -o 597role.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d $TEST_DOMAIN -A $TEST_ALIAS2 -R $TEST_ROLE1,$TEST_ROLE2 -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 9
	}

	/usr/local/bin/expect 597role.exp || {
		echo "Failed to create alias, error code $?"
		return 10
	}
#-------------------------------------------------------------------------------
# Create a 3rd test alias
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 597.in.tmp -o 597role.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d $TEST_DOMAIN -A $TEST_ALIAS3 -R $TEST_ROLE1,$TEST_ROLE2 -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 11
	}

	/usr/local/bin/expect 597role.exp || {
		echo "Failed to create alias, error code $?"
		return 12
	}
#-------------------------------------------------------------------------------
# Create a 4th test alias
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 597.in.tmp -o 597role.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d $TEST_DOMAIN -A $TEST_ALIAS4 -R $TEST_ROLE1 -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 13
	}

	/usr/local/bin/expect 597role.exp || {
		echo "Failed to create alias, error code $?"
		return 14
	}
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

dmn=$(LDAP_GET_DOMAIN_DN_FORMAT $TEST_DOMAIN)
	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

#-------------------------------------------------------------------------------
#  Test role is present
#-------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "cn=$TEST_ROLE1,ou=role,ou=com,$dmn" objectclass=* || {
		echo "No role $TEST_ROLE1"
		return 1
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "cn=$TEST_ROLE2,ou=role,ou=com,$dmn" objectclass=* || {
		echo "No role $TEST_ROLE2"
		return 2
	}
#-------------------------------------------------------------------------------
#  Test alias is present
#-------------------------------------------------------------------------------
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "role=$TEST_ALIAS1,ou=rolealias,ou=com,$dmn" "objectclass=*" | grep "$TEST_ROLE1" || {
		echo "No alias $TEST_ALIAS1 with role $TEST_ROLE1"
		return 3
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "role=$TEST_ALIAS1,ou=rolealias,ou=com,$dmn" "objectclass=*" | grep "$TEST_ROLE2" || {
		echo "No alias $TEST_ALIAS1 with role $TEST_ROLE2"
		return 4
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "role=$TEST_ALIAS2,ou=rolealias,ou=com,$dmn" "objectclass=*" | grep "$TEST_ROLE1" || {
		echo "No alias $TEST_ALIAS2 with role $TEST_ROLE1"
		return 5
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "role=$TEST_ALIAS2,ou=rolealias,ou=com,$dmn" "objectclass=*" | grep "$TEST_ROLE2" || {
		echo "No alias $TEST_ALIAS2 with role $TEST_ROLE2"
		return 6
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "role=$TEST_ALIAS3,ou=rolealias,ou=com,$dmn" "objectclass=*" | grep "$TEST_ROLE1" || {
		echo "No alias $TEST_ALIAS3 with role $TEST_ROLE1"
		return 7
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "role=$TEST_ALIAS3,ou=rolealias,ou=com,$dmn" "objectclass=*" | grep "$TEST_ROLE2" || {
		echo "No alias $TEST_ALIAS3 with role $TEST_ROLE2"
		return 8
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "role=$TEST_ALIAS4,ou=rolealias,ou=com,$dmn" "objectclass=*" | grep "$TEST_ROLE1" || {
		echo "No alias $TEST_ALIAS4 with role $TEST_ROLE1"
		return 9
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	${AT_BIN}/con_ex.bsh -d 597.in.tmp -o 597bulkload.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d $TEST_DOMAIN -f 597_import.in.tmp -o -y" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 597bulkload.exp || {
		echo "Failed to bulk load, error code $?"
		return 2
	}

	

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

dmn=$(LDAP_GET_DOMAIN_DN_FORMAT $TEST_DOMAIN)
#-------------------------------------------------------------------------------
#  Test role is present
#-------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b cn=$TEST_ROLE1,ou=role,ou=com,$dmn objectclass=* || {
		echo "No role $TEST_ROLE1"
		return 1
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b cn=$TEST_ROLE2,ou=role,ou=com,$dmn objectclass=* || {
		echo "No role $TEST_ROLE2"
		return 2
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b cn=$TEST_ROLE3,ou=role,ou=com,$dmn objectclass=* || {
		echo "No role $TEST_ROLE3"
		return 3
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b cn=$TEST_ROLE1,ou=role,ou=com,$dmn objectclass=* || {
		echo "No role $TEST_ROLE1"
		return 4
	}
#-------------------------------------------------------------------------------
#  Test alias is present
#-------------------------------------------------------------------------------
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS1,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE1" && {
		echo "alias $TEST_ALIAS1 should not have role $TEST_ROLE1"
		return 5
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS1,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE2" || {
		echo "No alias $TEST_ALIAS1 with role $TEST_ROLE2"
		return 6
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS1,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE3" || {
		echo "No alias $TEST_ALIAS1 with role $TEST_ROLE3"
		return 7
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS2,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE4" || {
		echo "No alias $TEST_ALIAS2 with role $TEST_ROLE4"
		return 8
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS2,ou=rolealias,ou=com,$dmn objectclass=* | grep -v "ericssonUserAuthorizationScope: $TEST_ROLE4" | grep ericssonUserAuthorizationScope && {
		echo " alias $TEST_ALIAS2 has unexpected role"
		return 9
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS3,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE1" || {
		echo "No alias $TEST_ALIAS3 with role $TEST_ROLE1"
		return 10
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS3,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE2" || {
		echo "No alias $TEST_ALIAS3 with role $TEST_ROLE2"
		return 11
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS4,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE1" || {
		echo "No alias $TEST_ALIAS4 with role $TEST_ROLE1"
		return 12
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS5,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE1" || {
		echo "No alias $TEST_ALIAS5 with role $TEST_ROLE1"
		return 13
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS5,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE3" || {
		echo "No alias $TEST_ALIAS5 with role $TEST_ROLE3"
		return 14
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS6,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE3" || {
		echo "No alias $TEST_ALIAS6 with role $TEST_ROLE3"
		return 15
	}
	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b role=$TEST_ALIAS6,ou=rolealias,ou=com,$dmn objectclass=* | grep "ericssonUserAuthorizationScope: $TEST_ROLE4" || {
		echo "No alias $TEST_ALIAS6 with role $TEST_ROLE4"
		return 16
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

        # delete role created in tc_test
        ${AT_BIN}/con_ex.bsh -d 597_remove_role.in.tmp -o 597_expect.exp -c "$LDAP_BIN/manage_COM.bsh -r role  " -r
        /usr/local/bin/expect 597_expect.exp  || {
                echo "Could not delete role added to default domain - FAIL"
                return 1
        }

        # remove the generated /usr/local/bin/expect files
        rm -f *tmp *exp ${EXPECT_WRKNG} $OUTFILE || {
                echo "Failed to remove the generated working files"
                return 1
        }

	rm -f *.exp
	rm -f *.out
	rm -f *.in.tmp
	return 0
}
