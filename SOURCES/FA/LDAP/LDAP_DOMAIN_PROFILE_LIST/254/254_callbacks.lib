#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 24-08-12	xgeohar		Initial version and review comments
# 23-10-12	eturdan		Removed hard coded IP addresses

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

TEST_DOMAIN="1.com"
TEST_DOMAIN_2="2.com"
#LDAP_SERVER="10.45.201.38"
#LDAP_SERVER_2="10.45.201.37"
LDAP_SERVER=""
LDAP_SERVER_2=""

# /usr/local/bin/expect template and working files
EXPECT_TMPLT="254_serv.add.in"
EXPECT_WRKNG=${EXPECT_TMPLT}.tmp

OUTFILE="/tmp/tcid254.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	
	
	

	

	# Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
	[[ ` ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
		echo "${CONFIG} contains more than 8 domains - harness will timeout"
		return 1
	}

	

	LDAP_SERVER=$(getent hosts om_serv_master | awk '{print $1}' | tail -1)
	if [ -z ${LDAP_SERVER} ]; then
		echo "Error - unable to determine ip of om_serv_master"
		return 1
	fi
	LDAP_SERVER_2=$(getent hosts om_serv_slave | awk '{print $1}' | tail -1)
	if [ -z ${LDAP_SERVER_2} ]; then
		echo "Error - unable to determine ip of om_serv_slave"
		return 1
	fi

	

    # Replace parameters with the correct credentials in /usr/local/bin/expect file
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
            -e "s/LDAPSERVER/$LDAP_SERVER/g" \
            -e "s/TSTDOM/$TEST_DOMAIN/g" $ii > $ii.tmp || {
			echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
			return 1
		}
    done

	# If 1.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_1 || {
		LDAP_CREATE_DOMAIN_ON_OSS1 $G_DOMAIN_NAME_1 || { echo "ERROR: failed to create domain $G_DOMAIN_NAME_1" ; return 1; }
	}
	
	# If 2.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_2 || {
		LDAP_CREATE_DOMAIN_ON_OSS2 $G_DOMAIN_NAME_2 || { echo "ERROR: Failed to create domain $G_DOMAIN_NAME_2" ; return 1; }
	}
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

	# replace the /usr/local/bin/expect template holders with 2 servers
    sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
        -e "s/^LDAPSERVER/$LDAP_SERVER,$LDAP_SERVER_2/g" \
        -e "s/to \.LDAPSERVER/to \.$LDAP_SERVER $LDAP_SERVER_2/g" \
        -e "s/TSTDOM/$TEST_DOMAIN/g" ${EXPECT_TMPLT} > ${EXPECT_WRKNG} || {
		echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
		return 1
		}

	# add 2 servers to test domain
	${AT_BIN}/con_ex.bsh -d ${EXPECT_WRKNG} -o 254_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN} " -r
	/usr/local/bin/expect 254_expect.exp || {
		# adding two servers to user profile failed
		echo "Attempt to add two servers to user profile failed - FAIL" >> $OUTFILE
	}

	# replace the /usr/local/bin/expect template holders with 2 servers
    sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
        -e "s/^LDAPSERVER/$LDAP_SERVER,$LDAP_SERVER_2/g" \
        -e "s/to \.LDAPSERVER/to \.$LDAP_SERVER $LDAP_SERVER_2/g" \
        -e "s/TSTDOM/$TEST_DOMAIN_2/g" ${EXPECT_TMPLT} > ${EXPECT_WRKNG} || {
		echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
		return 1
		}

	# add 2 servers to test domain 2
	${AT_BIN}/con_ex.bsh -d ${EXPECT_WRKNG} -o 254_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN_2} " -r
	/usr/local/bin/expect 254_expect.exp || {
		# adding two servers to user profile failed
		echo "Attempt to add two servers to user profile failed - FAIL" >> $OUTFILE
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	>$OUTFILE

	# list the servers added to test domain and /usr/local/bin/expect both test servers
	echo "Test 1: List the servers set on the test domain"
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=default,ou=profile,dc=1,dc=com objectclass=* defaultServerList  || {
		# List servers added to test domain failed
		echo "Could not find servers added to test domain - FAIL" 
	}
				
				
	
	# list the servers added to test domain 2 and /usr/local/bin/expect both test servers
	echo "Test 2: List the servers set on the test domain 2"
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=default,ou=profile,dc=2,dc=com objectclass=* defaultServerList  || {
		# List servers added to test domain 2 failed
		echo "Could not find servers added to test domain 2 - FAIL" 
	}

	# list the servers added to all domains and /usr/local/bin/expect both test servers
	echo "Test 3: List the servers set on all test domains"
	local -i numServ= /usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=default,ou=profile,dc=2,dc=com objectclass=* defaultServerList| grep -c 'defaultServerList'
	[[ ${numServ} -lt 1 ]] && {
		# List servers added to all test domains failed
		echo "Could not find servers added to all test domains - FAIL" 
	}

	# return 0 and let tc_postcon report errors
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	rc=0

	# report on any failed server add
	[[ -s $OUTFILE ]] && {
		echo "Server add attempt was unexpected:"
		cat $OUTFILE
		return 1
	}
	
	return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

#####################
# TEMP
####################
#return 0
##############

	rc=0

	# Delete test domain 
	LDAP_DELETE_DOMAIN ${TEST_DOMAIN} || { echo "ERROR: Failed to delete domain ${TEST_DOMAIN}" return 1 }

	# Delete test domain 2
	LDAP_DELETE_DOMAIN ${TEST_DOMAIN_2} || { echo "ERROR: Failed to delete domain ${TEST_DOMAIN_2}"  return 2 }

	
	

	# remove the generated /usr/local/bin/expect files
	rm -f *tmp *exp ${EXPECT_WRKNG} $OUTFILE || {
		echo "Failed to remove the generated working files"
		return 1
	}

	return $rc

}
