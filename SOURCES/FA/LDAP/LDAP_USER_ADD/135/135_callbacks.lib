#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 31/07/12	ecoophi		Added extra checks in pre_con. Added /usr/local/bin/expect script to recover nms group
# 13/08/12	ecoophi		Added tc_test tests
# 14/08/12	ecoophi		Added extra logging to clarify test output
# 15/08/12	ecoophi		Added multi domain processing
# 21/08/12	ecoophi		Added STUB variable to ensure continued testing

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

LDAP_DOMAIN=$(cat /ericsson/config/config.ini | grep "LDAP_DOMAIN_NAME" | awk -F= '{print $2}')
#
# Each while loop feeds off of the cmds.cat file. It contains the number of users, 
# the command used to create each user and the resultant error message desired.
# To include a new add user command to the test case all you have to do is enter a
# new entry into the cmds.cat file. The test case can be left alone.
TEST_COMMANDS=cmds.cat


tc_setup() {
	# Delete any users that exist in LDAP already
        while read tlin; do
                OIFS=$IFS
                IFS="^"
                # field 0=test number, 1=command, 2=error message
                tflds=($tlin)
                IFS=$OIFS
                tuser=t135${tflds[0]}
                LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
			echo "user $tuser already exists"
			LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
				echo "Error while deleting user $tuser"
				return 1
			}
		}
        done < $TEST_COMMANDS
        return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# If there are no template files exit
	templates=`ls *.tmpl 2>/dev/null | wc -l`
	if [ ${templates} -eq 0 ] ; then
		echo "There are no templates to process"
		return 1
	fi

	LDAP_SERVER_UP || {
		echo "LDAP server is not runningi: $?"
		return 1
	}

	LDAP_DOMAIN_EXISTS $LDAP_DOMAIN || {
		echo "$LDAP_DOMAIN does not exist"
		return 1
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {


        while read tlin; do
                OIFS=$IFS
                IFS="^"
                # field 0=test number, 1=command, 2=error message
                tflds=($tlin)
                IFS=$OIFS
                tpref=135-${tflds[0]}
                templ=${tpref}.tmpl
                [ -f $templ ] || {
                echo "Cannot find template file $templ for ${tpref} test"
                continue
                }
                expfile="${tpref}.exp"
                infile="${tpref}.in"
                sed -e "s/^PPPPPPPP/${LDAP_SUPERUSER_PASSWD}/" < ${templ} > ${infile}
                ${AT_BIN}/con_ex.bsh -d ${infile} -o ${expfile} -c "${tflds[1]}" || {
                        echo "Could not create $expfile from $infile to run ${tflds[1]} : retval $?"
                        continue
                        }

                echo "######################################################"
                echo "TEST - ${tflds[0]}"
                echo "Running - ${tflds[1]}"
                echo "######################################################"

                # Run the test
                tuser=t135${tflds[0]}
		echo "Adding user $tuser..."
                /usr/local/bin/expect ${expfile} >/dev/null || {
                        echo "${tflds[2]}: retval $?"
                        continue
                        }
        done < $TEST_COMMANDS

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	echo "Checking if users now exist in LDAP"
        while read tlin; do
                OIFS=$IFS
                IFS="^"
                # field 0=test number, 1=command, 2=error message
                tflds=($tlin)
                IFS=$OIFS
		tuser=t135${tflds[0]}
		LDAP_USER_EXISTS $LDAP_DOMAIN $tuser || {
			echo "user $tuser was not created, exiting...." 
			return 3
		}
        done < $TEST_COMMANDS
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rm -f *.in *.exp || {
		echo "Problems removing temporary files"
		return 1
	}

        if ! LDAP_SERVER_UP ; then
                echo "LDAP server is not running"
        fi

	# Remove all users created
        while read tlin; do
                OIFS=$IFS
                IFS="^"
                # field 0=test number, 1=command, 2=error message
                tflds=($tlin)
                IFS=$OIFS
                tuser=t135${tflds[0]}
                LDAP_USER_EXISTS $LDAP_DOMAIN $tuser && {
			echo "Deleting user $tuser"
                        LDAP_DELETE_USER $LDAP_DOMAIN $tuser || {
                                echo "Error while deleting user $tuser"
                                return 1
                        }
                }
        done < $TEST_COMMANDS

	return 0

}
