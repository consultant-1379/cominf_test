#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 01/10/12	xamamcg		Initial test for remove role to COM_app user

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {



	
	# Replace PASSWD with the correct credentials or data
	for ii in *.in; do
		sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp || {
			echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin/expect input file $ii, rc $?"
			return 2
		}
	done

	#If 1.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS "1.com" || {
		LDAP_CREATE_DOMAIN "1.com" || { echo "ERROR: Failed to create domain 1.com" ; return 1; }
	}
	# Create the nms group if it doesn't already exist
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b dc=1,dc=com objectclass=* | grep nms > u541.out || {

		echo "Need to  create nms group"
		# Create the nms group
		CMD='/ericsson/sdee/bin/add_group.sh -d 1.com -n nms -y'
		${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541nms.exp -c "$CMD" || {
			echo "Failed to generate /usr/local/bin/expect script, $?"
			return 3
		} 

		/usr/local/bin/expect 541nms.exp || { 
			echo "Failed to create nms group, error code $?"
			return 4
		}
	}
#-------------------------------------------------------------------------------
# Create a test user  
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/add_user.sh -t COM_APP -d 1.com -n u541 -i 1541 -C bhavana -y'
	${AT_BIN}/con_ex.bsh -d 541adduser.in.tmp -o 541adduser.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 5
	}

	/usr/local/bin/expect 541adduser.exp || {
		echo "Failed to create user, error code $?"
		return 6
	}
#-------------------------------------------------------------------------------
# Create a test role
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM.bsh -a role -d 1.com -R r541a -y'
	${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541role.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 7
	}

	/usr/local/bin/expect 541role.exp || {
		echo "Failed to create role, error code $?"
		return 8
	}
#-------------------------------------------------------------------------------
# Create a 2nd test role
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM.bsh -a role -d 1.com -R r541b -y'
	${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541role.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 9
	}

	/usr/local/bin/expect 541role.exp || {
		echo "Failed to create role, error code $?"
		return 10
	}
#-------------------------------------------------------------------------------
# Add role/target to user
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM_privs.bsh -a role -d 1.com -R target1:r541a -u u541 -y'
	${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541role.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 11
	}

	/usr/local/bin/expect 541role.exp || {
		echo "Failed to create role, error code $?"
		return 12
	}
#-------------------------------------------------------------------------------
# Add role to user with target
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM_privs.bsh -a role -d 1.com -R target1:r541b -u u541 -y'
	${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541role.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 13
	}

	/usr/local/bin/expect 541role.exp || {
		echo "Failed to create role, error code $?"
		return 14
	}
	return 0
}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

#-------------------------------------------------------------------------------
#  Check LDAP is running
#-------------------------------------------------------------------------------

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

#-------------------------------------------------------------------------------
#  Test user is present
#-------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u541,ou=people,dc=1,dc=com objectclass=* > u541.out || {
		echo "Failed to do LDAP search"
		return 1
	}
	grep 'ericssonUserAuthorizationScope: target1:r541a' u541.out || {
		echo "Found no target:role for user u541"
		return 2
	}
	grep 'ericssonUserAuthorizationScope: target1:r541b' u541.out || {
		echo "Found no target:role for user u541"
		return 3
	}
	grep 'ericssonUserAuthenticationScope: target1' u541.out || {
		echo "Found no target for user u541a"
		return 4
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	CMD='/ericsson/sdee/bin/manage_COM_privs.bsh -r role -d 1.com -u u541 -R r541a -y'
	${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541remtarget.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 541remtarget.exp || {
		echo "Failed to remove target, error code $?"
		return 2
	}

	

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Check user is in database with correct targets
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u541,ou=people,dc=1,dc=com objectclass=* | grep "ericssonUserAuthenticationScope: target1" || {
		echo "u541 user does not have target1 ... This wasn't expected"
		return 1
	}
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u541,ou=people,dc=1,dc=com objectclass=* | grep "ericssonUserAuthorizationScope: target1:r541b" || {
		echo "u541 user does not have role b ... This wasn't expected"
		return 2
	}
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u541,ou=people,dc=1,dc=com objectclass=* | grep "ericssonUserAuthorizationScope: target1:r541a" && {
	 	echo "u541 user does have role a ... This wasn't expected $?" 
		return 3
	}
			

	
	
	
	
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	echo "Deleting test user 1"
        ${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541remuser.exp -c "/ericsson/sdee/bin/del_user.sh -d 1.com -n u541 -y" || {
                echo "Failed to generate /usr/local/bin/expect script, $?"
                return 1
        }

        /usr/local/bin/expect 541remuser.exp >/dev/null || {
                echo "Failed to delete user, error code $?"
                return 2
        }
	  # Remove roles
	echo "Deleting test user roles"
        ${AT_BIN}/con_ex.bsh -d 541.in.tmp -o 541_expect.exp -c "/ericsson/sdee/bin/manage_COM.bsh -r role -d 1.com -R r541a,r541b -y " -r
        /usr/local/bin/expect 541_expect.exp >/dev/null || {
                echo "Could not delete role added to 1.com domain - FAIL"
                return 9
        }

	rm -f *.exp
	rm -f *.out
	rm -f *.in.tmp
	return 0
}
