#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

/ericsson/sdee/
export BIND_TOKEN=${LDAP_SUPERUSER_PASSWD}

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Part of a test suite, no setup required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

#-------------------------------------------------------------------------------
#  Check LDAP is running
#-------------------------------------------------------------------------------

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
/ericsson/sdee/
export BIND_TOKEN=${LDAP_SUPERUSER_PASSWD}

	/ericsson/sdee/bin/resolve_conflicts.bsh -p -u -d 2.com -a auto_all || {
		echo "propose resolutions for user conflicts failed. error $?"
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	num_users=`grep "Users" ${TC_CONSOLE_FILE} | awk '{print $2}'`
	no_conflict=`grep "NO_CONFLICT" ${TC_CONSOLE_FILE} | awk '{print $2}'`
	id_match=`grep "ID_MATCH" ${TC_CONSOLE_FILE} | awk '{print $2}'`
	name_match=`grep "NAME_MATCH" ${TC_CONSOLE_FILE} | awk '{print $2}'`
	proposals=`grep "NAME_MATCH" ${TC_CONSOLE_FILE} | awk '{print $2}'`
	accepted=`grep "NAME_MATCH" ${TC_CONSOLE_FILE} | awk '{print $2}'`

	[[ $((${no_conflict} + ${id_match} + ${name_match})) -ne ${num_users} ]] && {
		echo "Total users doesn't match reported users."
		return 1
	}
	[[ ${no_conflict} -ne 13 ]] && {
		echo "Incorrect NO_CONFLICT, returned [${no_conflict}] expected [13]."
		return 1
	}
	[[ ${id_match} -ne 2 ]] && {
		echo "Incorrect ID_MATCH, returned [${id_match}] expected [2]."
		return 1
	}
	[[ ${name_match} -ne 8 ]] && {
		echo "Incorrect NAME_MATCH, returned [${name_match}] expected [8]."
		return 1
	}
	[[ ${proposals} -ne ${accepted} ]] && {
		echo "Proposals do not match accepted."
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Part of a test suite, no cleanup required

	return 0

}
