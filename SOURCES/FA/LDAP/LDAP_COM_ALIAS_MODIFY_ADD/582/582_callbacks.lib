#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 05/10/12	xbahzam		Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

TEST_ROLE="r582"
TEST_ALIAS="a582"


OUTFILE="/tmp/tcid582.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	
	
	

	

	# Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
	[[ ` ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
		echo "${CONFIG} contains more than 8 domains - harness will timeout"
		return 1
	}

	

	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
			-e "s/TESTALIAS/$TEST_ALIAS/" \
			-e "s/TESTROLE/$TEST_ROLE/" $ii > $ii.tmp || {
			echo "Failed to replace LDAP superuser password holder in /usr/local/bin/expect input file $ii"
			return 1
		}
	done

	

	# check that enable_COM.bsh has run by running manage_COM.bsh -l alias
	# this will return an error if enable_COM.bsh has not been run
	# can use justPassword.in.tmp as this contains expected strings
	echo "Check that enable_COM.bsh has been run"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -l alias " -r
	/usr/local/bin/expect 582_expect.exp |grep 'No such object' &>/dev/null && {
		# enable_COM.bsh has not been run - try to run it
		${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/enable_COM.bsh -y " -r
		/usr/local/bin/expect 582_expect.exp &>/dev/null || {
			echo "enable_COM.bsh did not complete correctly - rc $? - FAIL"
			return 1
		}
	}
	
	rc=0

	# add role to default domain in order to add alias
	echo "Adding role ${TEST_ROLE} to default domain"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -a role -R ${TEST_ROLE} -y " -r
	/usr/local/bin/expect 582_expect.exp || {
		# Failed to add role to default domain
		echo "Add role to default domain failed - rc $? - FAIL"
		return 1
	}

	# add alias with test role to default domain
	echo "Add an alias ${TEST_ALIAS} to default domain"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -A ${TEST_ALIAS} -R ${TEST_ROLE} -y " -r
	/usr/local/bin/expect 582_expect.exp || {
		# Failed to add alias to default domain
		echo "Add alias to default domain failed - rc $? - FAIL"
		rc=2
	}


	return $rc

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

	rc=0 


	# check if the test alias has been added
	echo "List the aliases in the default domain - /usr/local/bin/expect alias added above"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -l alias  " -r
	/usr/local/bin/expect 582_expect.exp | tr -d '\r' |grep "${TEST_ALIAS}" || {
		echo "Could not find alias added to default domain - FAIL"
		return 1
	}

	# check if the test role has been added 
	echo "List the roles in the default domain - /usr/local/bin/expect role added above"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -l role " -r
	/usr/local/bin/expect 582_expect.exp  | tr -d '\r' > preConRoleList.tmp 

	grep "${TEST_ROLE}" preConRoleList.tmp || {
		echo "Could not find role ${TEST_ROLE} added to default domain - FAIL"
		rc=2
	}
	
	# check if the role has been added to the alias
	echo "List the roles in the alias - /usr/local/bin/expect alias contain the role"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -A ${TEST_ALIAS} " -r
	/usr/local/bin/expect 582_expect.exp | tr -d '\r' > preConAliasRoleList.tmp

	grep "${TEST_ROLE}" preConAliasRoleList.tmp || {
		echo "Could not find role ${TEST_ROLE} added to alias ${TEST_ALIAS} - FAIL"
		rc=3
	}


	return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	>$OUTFILE
	# add a role to a non-existing alias 
	echo "Test 1: Add a role to a non-exisitng alias"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -A nonExistAlias -R ${TEST_ROLE} -i -y " -r
	/usr/local/bin/expect 582_expect.exp && {
		echo "adding a role to a non-exisitng alias succeeded - rc $? - FAIL" >> $OUTFILE
	}

	# add non-existant role to an existing alias 
	echo "Test 2: Add a new role to an exisitng alias"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -A ${TEST_ALIAS} -R nonExistRole -i -y " -r
	/usr/local/bin/expect 582_expect.exp && {
		echo "adding a non-existant role to an exisitng alias succeeded - rc $? - FAIL" >> $OUTFILE
	}

	# return 0 and let tc_postcon identify errors
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	rc=0


	# check if the test alias is still added
	echo "List the aliases in the default domain - /usr/local/bin/expect alias added above"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -l alias  " -r
	/usr/local/bin/expect 582_expect.exp | tr -d '\r' |grep "${TEST_ALIAS}" || {
		echo "Could not find alias added to default domain - FAIL"
		return 1
	}

	# check if the test role is still added 
	echo "List the roles in the default domain - /usr/local/bin/expect role added above"
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -l role " -r
	/usr/local/bin/expect 582_expect.exp | tr -d '\r' > postConRoleList.tmp 

	grep "${TEST_ROLE}" postConRoleList.tmp || {
		echo "Could not find role ${TEST_ROLE} added to default domain - FAIL"
		rc=2
	}

	# check if the role is still added to the alias
	echo "List the roles in the alias - /usr/local/bin/expect alias point to the role "
	${AT_BIN}/con_ex.bsh -d justPassword.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -A ${TEST_ALIAS} " -r
	/usr/local/bin/expect 582_expect.exp | tr -d '\r' > postConAliasRoleList.tmp

	grep "${TEST_ROLE}" postConAliasRoleList.tmp || {
		echo "Could not find role ${TEST_ROLE} added to alias ${TEST_ALIAS} - FAIL"
		rc=3
	}

	CONSOLE_OUTPUT_CONTAINS "ERROR : [nonExistAlias] does not exist as an alias in domain [vts.com]." || { 
		echo "console output did not contain message--ERROR : [nonExistAlias] does not exist as an alias in domain [vts.com]." >> $OUTFILE
		rc=4
	}
																				

	CONSOLE_OUTPUT_CONTAINS "ERROR : [nonExistRole] does not exist as a role in domain [vts.com]." || { 
		echo "console output did not contain message--ERROR : [nonExistRole] does not exist as a role in domain [vts.com]." >> $OUTFILE
		rc=5
	}
													
	# report on any failed modify alias attempts
	[[ -s $OUTFILE ]] && {
		echo "Some modify alias attempts failed:"
		cat $OUTFILE
		rc=6
	}

	return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rc=0
	# Remove roles
        ${AT_BIN}/con_ex.bsh -d 582_remove_role.in.tmp -o 582_expect.exp -c "$LDAP_BIN/manage_COM.bsh -r role  " -r
        /usr/local/bin/expect 582_expect.exp  || {
                echo "Could not delete role added to default domain - FAIL"
                return 1
        }
	# remove the generated /usr/local/bin/expect files
	rm -f *tmp *exp  $OUTFILE || {
		echo "Failed to remove the generated working files"
		return 1
	}

	return $rc

}
