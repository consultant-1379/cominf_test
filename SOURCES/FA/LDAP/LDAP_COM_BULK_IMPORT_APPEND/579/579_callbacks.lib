#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-10-08	xsimrea	Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

OUTFILE="tmpout.tmp"

#################################################################################
#
# Function: expect_tee
#
# Take the output of an /usr/local/bin/expect script running manage_COM.bsh and:
# - remove carriage returns
# - tie together split lines (last char of first line is space)
# - output data to named file and stdout
#
# Return or exit codes:
#  0	success
# >0 	failure

expect_tee() {
	[ "$1" == "" ] && { echo Ooops, no target file; return 1; }
	[ -w "$(dirname $1)" ] || { echo Ooops, cannot write target file $1; return 2; }

	tr -d '\r' | awk '/ $/{printf "%s",$0;next}{print}' | tee $1
}

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    
    
    

   

    # Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
    [[ `ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
        echo "${CONFIG} contains more than 8 domains - harness will timeout"
        return 4
    }

    

    # Replace PASSWD and other fields in input file(s) with the correct credentials or data
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp || {
            echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin/expect input file $ii, rc $?"
            return 6
        }
    done

	

	# Add desired roles to specified domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d 2.com -R ldaprole1,ldaprole2 -y " -r
    /usr/local/bin/expect add_role.exp || {
        # Failed to add roles
        echo "Add role ldaprole 1 through 4 to 2.com domain failed - rc $?"
		return 8
    }

	# create the aliases
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias1.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A ldapalias1 -R ldaprole1 -y " -r
    /usr/local/bin/expect add_alias1.exp || {
        # Failed to add aliases
        echo "Add alias ldapalias1 failed - rc $?"
		return 9
    }
	
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias2.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A ldapalias2 -R ldaprole1,ldaprole2 -y " -r
    /usr/local/bin/expect add_alias2.exp || {
        # Failed to add aliases
        echo "Add alias ldapalias2 failed - rc $?"
		return 10
    }
	
    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Check that the desired roles are in specified domain, and take a log of all of them
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_role.exp -c "$LDAP_BIN/manage_COM.bsh -l role -d 2.com" -r
    /usr/local/bin/expect list_role.exp > role_lst.tmp || {
        # Failed to list roles
        echo "List role in 2.com domain failed - rc $?"
		return 9
    }
	tr -d '\015' < role_lst.tmp > role_prelst.tmp

	# To tidy up manage_COM output, pipe it through something like:
	# tr -d '\015' < alias.tmp | sed -e '1,/^Aliases for domain/d' -e '/^$/d'

	grep -i "ldaprole1" role_prelst.tmp | grep -i "ldaprole2" role_prelst.tmp || {
		echo "Could not find one or more of the roles we have just added, rc $?"
		echo "Pre-test list is:"
		cat role_prelst.tmp
		echo "End of list"
		return 10
	}

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    >$OUTFILE

    # Check validation of valid files
    echo "Test 1: Valid file, add role 2 to alias 1"
	cat > test1.tmp <<EOF
DOMAIN 2.com
ALIAS ldapalias1 ldaprole2
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test1.tmp -y -v" -r
    /usr/local/bin/expect import_alias.exp || {
        # Alias import improperly failed
        echo "Test 1: Validation failed even though file valid - add LDAP role to LDAP alias - rc $?" >> $OUTFILE
    }

    echo "Test 2: Valid file, add new role 3 to alias 2"
	cat > test2.tmp <<EOF
DOMAIN 2.com
ROLE filerole3
ALIAS ldapalias2 FILErole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test2.tmp -y -v" -r
    /usr/local/bin/expect import_alias.exp || {
        # Alias import improperly failed
        echo "Test 2: Validation failed even though file valid - add file role to LDAP alias - rc $?" >> $OUTFILE
    }

    echo "Test 3: Valid file, add new roles 3 and 4 to alias 1, specifying existig role 1 too"
	cat > test3.tmp <<EOF
DOMAIN 2.com
ROLE filerole3,FILErole4
ALIAS ldapalias2 FILErole3,fileROLE4,ldaprole1
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test3.tmp -y -v" -r
    /usr/local/bin/expect import_alias.exp || {
        # Alias import improperly failed
        echo "Test 3: Validation failed even though file valid - add file and LDAP roles to LDAP alias - rc $?" >> $OUTFILE
    }

    echo "Test 4: Valid file, add new role 3 and ldap role 1 to new file alias 3"
	cat > test4.tmp <<EOF
DOMAIN 2.com
ROLE filerole3,FILErole4
ALIAS filealias3 FILErole3,ldaprole1
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test4.tmp -y -v" -r
    /usr/local/bin/expect import_alias.exp || {
        # Alias import improperly failed
        echo "Test 4: Validation failed even though file valid - add file and LDAP roles to file alias - rc $?" >> $OUTFILE
    }


	# (allow space for new valid files...)

    # Check validation of invalid files
# Test removed as has functionality changed and import file can now have now DOMAIN line
#	ii=10
#    echo "Test ${ii}: Invalid file, no DOMAIN line"
#	cat > test${ii}.tmp <<EOF
#ALIAS ldapalias1 ldaprole2
#ROLE filerole3
#EOF
#    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
#    /usr/local/bin/expect import_alias.exp | expect_tee import_log.tmp
#	rc=${PIPESTATUS[0]}
#	[ $rc -eq 0 ] && {
#        # Alias import improperly succeeded
#        echo "Test ${ii}: Validation succeeded even though file invalid - no DOMAIN line - rc $?" >> $OUTFILE
#    }
#	grep -i "ERROR : Import file must contain a single DOMAIN line with format: DOMAIN LDAP_domain_name" import_log.tmp || { echo "Test ${ii}: No \"must contain DOMAIN line\" error message" >> $OUTFILE; }

	ii=11
    echo "Test ${ii}: Invalid file, no ALIAS or ROLE lines"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] || {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - no ALIAS or ROLE lines - rc $?" >> $OUTFILE
    }
	grep -i "INFO : No ROLE or ALIAS lines found in import file. Exiting ..." import_log${ii}.tmp || { echo "Test ${ii}: No \"must contain ROLE or ALIAS lines\" error message" >> $OUTFILE; }

	ii=12
	#12 - ALIAS line only has 2 fields
    echo "Test ${ii}: Invalid file, ALIAS line only has 2 fields"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - ALIAS line only has 2 fields - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Invalid ALIAS lines; correct format is: ALIAS <alias_name> <role1>,<role2>,...<roleN>" import_log${ii}.tmp || { echo "Test ${ii}: No \"correct ALIAS format\" error message" >> $OUTFILE; }

	ii=13
	#13 - ROLE line has no named role
    echo "Test ${ii}: Invalid file, ROLE line has no role"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3 ldapalias1
ROLE
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - ROLE line has no role - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Invalid ROLE line: correct format is: ROLE <role1>,<role2>,...<roleN>" import_log${ii}.tmp || { echo "Test ${ii}: No \"correct ROLE format\" error message" >> $OUTFILE; }

	ii=14
	#14 - Role list in ROLE line has spaces
    echo "Test ${ii}: Invalid file, ROLE line has space-separated roles"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3 ldapalias1
ROLE filerole3 filerole4
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - ROLE line has space-separated roles - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Invalid ROLE line: correct format is: ROLE <role1>,<role2>,...<roleN>" import_log${ii}.tmp || { echo "Test ${ii}: No \"correct ROLE format\" error message" >> $OUTFILE; }

	ii=15
	#15 - ALIAS has spaces in role list
    echo "Test ${ii}: Invalid file, ALIAS line has space-separated roles"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3 ldaprole1 ldaprole2
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - ALIAS line has space-separated roles -separated roles - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Invalid ALIAS lines; correct format is: ALIAS <alias_name> <role1>,<role2>,...<roleN>" import_log${ii}.tmp || { echo "Test ${ii}: No \"correct ALIAS format\" error message" >> $OUTFILE; }

	ii=16
	#16 - DOMAIN line has no domain
    echo "Test ${ii}: Invalid file, DOMAIN line has no domain"
	cat > test${ii}.tmp <<EOF
DOMAIN
ALIAS filealias3 ldaprole1,ldaprole2
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - DOMAIN line has no domain - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : DOMAIN line: correct format is: DOMAIN <LDAP_domain_name>" import_log${ii}.tmp || { echo "Test ${ii}: No \"invalid characters in domain name\" error message" >> $OUTFILE; }

	ii=17
	#17 - DOMAIN line has 2 comma-separated domains, with matching name on command line parameter
    echo "Test ${ii}: Invalid file, DOMAIN line has two comma-separaetd domains"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com,1.com
ALIAS filealias3 ldaprole1,ldaprole2
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com,1.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - DOMAIN line has two comma-separaetd domains - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : checkOptionUsage: Domain [2.com,1.com] does not exist in LDAP." import_log${ii}.tmp && { echo "Test ${ii}: No \"invalid characters in domain name\" error message for comma-separated names" >> $OUTFILE; }

	ii=18
	#18 - DOMAIN line has two space-separated domains, with matching name on command line parameter
    echo "Test ${ii}: Invalid file, DOMAIN line has two space-separaetd domains"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com 1.com
ALIAS filealias3 ldaprole1,ldaprole2
ROLE filerole3
EOF
    $LDAP_BIN/manage_COM.bsh -a import -d "2.com 1.com" -f test${ii}.tmp -y -v < /dev/null | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - DOMAIN line has two space-separated domains - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Spaces are not valid in a domain name." import_log${ii}.tmp || { echo "Test ${ii}: No \"invalid characters in domain name\" error message for space-separated names" >> $OUTFILE; }

	ii=19
	#19 - DOMAIN line domain name does not match command line one
    echo "Test ${ii}: Invalid file, DOMAIN line does not match command line"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3 ldaprole1,ldaprole2
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 1.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - DOMAIN line does not match command line - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Domain [2.com] in import file does not match domain [1.com] on command line" import_log${ii}.tmp && { echo "Test ${ii}: No \"DOMAIN does not match command line\" error message" >> $OUTFILE; }

	ii=20
	#20 - Add non-existent Role to one of the existing aliases
    echo "Test ${ii}: Invalid file, Add non-existent role to existing alias"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS ldapalias3 ldaprole3
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Add non-existent role to existing alias - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Invalid ALIAS line [ALIAS ldapalias3 ldaprole3]; Alias role [ldaprole3] does not exist on ROLE line or in LDAP" import_log${ii}.tmp && { echo "Test ${ii}: No \"Invalid ALIAS line\" error message" >> $OUTFILE; }

	ii=21
	#21 - Add non-existent Role to a new Alias
    echo "Test ${ii}: Invalid file, Add non-existent role to new alias"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3 ldaprole3
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Add non-existent role to new alias - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Invalid ALIAS line [ALIAS filealias3 ldaprole3]; Alias role [ldaprole3] does not exist on ROLE line or in LDAP" import_log${ii}.tmp && { echo "Test ${ii}: No \"Invalid ALIAS line\" error message" >> $OUTFILE; }

	ii=22
	#22 - Misspell DOMAIN keyword
    echo "Test ${ii}: Invalid file, Misspell DOMAIN keyword"
	cat > test${ii}.tmp <<EOF
DEMESNE 2.com
ALIAS filealias3 ldaprole1
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Misspell DOMAIN keyword - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Import file lines must begin with '#', 'DOMAIN', 'ROLE', 'ALIAS' or are empty" import_log${ii}.tmp || { echo "Test ${ii}: No \"Error\" error message" >> $OUTFILE; }
	grep -i "INFO : NEW: Role [filerole3] will be added" import_log${ii}.tmp && { echo "Test ${ii}: Unexpected \"New role\" message with misspelt DOMAIN keyword" >> $OUTFILE; }
	grep -i "Invalid line(s) are:" import_log${ii}.tmp || { echo "Test ${ii}: Expected \"invalid lines\" message was not found, despite misspelt DOMAIN keyword" >> $OUTFILE; }

	ii=23
	#23 - Misspell ALIAS keyword
    echo "Test ${ii}: Invalid file, Misspell ALIAS keyword"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALAS filealias3 ldaprole1
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Misspell ALIAS keyword - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Import file lines must begin with '#', 'DOMAIN', 'ROLE', 'ALIAS' or are empty" import_log${ii}.tmp || { echo "Test ${ii}: No \"Error\" error message" >> $OUTFILE; }
	grep -i "Invalid line(s) are:" import_log${ii}.tmp || { echo "Test ${ii}: Expected \"invalid lines\" message was not found, despite misspelt ALIAS keyword" >> $OUTFILE; }
	grep -i "INFO : NEW: Role [filerole3] will be added" import_log${ii}.tmp && { echo "Test ${ii}: Unexpected \"New role\" message with misspelt ALIAS keyword" >> $OUTFILE; }


	ii=24
	#24 - Misspell ROLE keyword
    echo "Test ${ii}: Invalid file, Misspell ROLE keyword"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3 ldaprole1
ROLL filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Misspell ROLE keyword - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Import file lines must begin with '#', 'DOMAIN', 'ROLE', 'ALIAS' or are empty" import_log${ii}.tmp || { echo "Test ${ii}: No \"Error\" error message" >> $OUTFILE; }
	grep -i "Invalid line(s) are:" import_log${ii}.tmp || { echo "Test ${ii}: Expected \"invalid lines\" message was not found, despite misspelt ROLE keyword" >> $OUTFILE; }
	grep -i "INFO : NEW: Role [filerole3] will be added" import_log${ii}.tmp && { echo "Test ${ii}: Unexpected \"New role\" message with misspelt ROLE keyword" >> $OUTFILE; }
	

	ii=25
	#25 - Append character to DOMAIN keyword
    echo "Test ${ii}: Invalid file, Append character to DOMAIN keyword"
	cat > test${ii}.tmp <<EOF
DOMAINABLE 2.com
ALIAS filealias3 ldaprole1
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Append character to DOMAIN keyword - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Import file lines must begin with '#', 'DOMAIN', 'ROLE', 'ALIAS' or are empty" import_log${ii}.tmp || { echo "Test ${ii}: No \"Error\" error message" >> $OUTFILE; }
	grep -i "INFO : NEW: Role [filerole3] will be added" import_log${ii}.tmp && { echo "Test ${ii}: Unexpected \"New role\" message with invalid DOMAIN keyword" >> $OUTFILE; }
	ii=26
	#26 - Append character to ALIAS keyword
    echo "Test ${ii}: Invalid file, Append character to ALIAS keyword"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIASSATCHMO filealias3 ldaprole1
ROLE filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Append character to ALIAS keyword - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Import file lines must begin with '#', 'DOMAIN', 'ROLE', 'ALIAS' or are empty" import_log${ii}.tmp || { echo "Test ${ii}: No \"Error\" error message" >> $OUTFILE; }
	grep -i "INFO : NEW: Role [filerole3] will be added" import_log${ii}.tmp && { echo "Test ${ii}: Unexpected \"New role\" message with invalid ALIAS keyword" >> $OUTFILE; }
	ii=27
	#27 - Append character to ROLE keyword
    echo "Test ${ii}: Invalid file, Append character to ROLE keyword"
	cat > test${ii}.tmp <<EOF
DOMAIN 2.com
ALIAS filealias3 ldaprole1
ROLERBLADES filerole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias${ii}.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test${ii}.tmp -y -v" -r
    /usr/local/bin/expect import_alias${ii}.exp | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file invalid - Append character to ROLE keyword - rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Import file lines must begin with '#', 'DOMAIN', 'ROLE', 'ALIAS' or are empty" import_log${ii}.tmp || { echo "Test ${ii}: No \"Error\" error message" >> $OUTFILE; }
	grep -i "INFO : NEW: Role [filerole3] will be added" import_log${ii}.tmp && { echo "Test ${ii}: Unexpected \"New role\" message with invalid ROLE keyword" >> $OUTFILE; }

    # return 0 and let tc_postcon identify errors
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    rc=0

    # report on any failed import attempts
    [[ -s $OUTFILE ]] && {
        echo "Some import alias attempts failed:"
        cat $OUTFILE
        return 1
    }

	# Check that the old aliases have not been changed, and that no new ones have been added
	for ii in {1..2}; do
		${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com -A ldapalias${ii}" -r
    	/usr/local/bin/expect list_alias.exp | tr -d '\r' | sed '1,/Roles assigned/d' | grep . | sort | tr 'A-Z' 'a-z' > alias_lst${ii}.tmp
	done
	${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com" -r
	/usr/local/bin/expect list_alias.exp | tr -d '\r' | sed '1,/Aliases for domain/d' | grep . | sort | tr 'A-Z' 'a-z' > alias_lst3.tmp

	cat > alias_cmp1.tmp <<EOF
ldaprole1
EOF
	cat > alias_cmp2.tmp <<EOF
ldaprole1
ldaprole2
EOF
	cat > alias_cmp3.tmp <<EOF
ldapalias1
ldapalias2
EOF

	rc2=1
	for ii in {1..3}; do
		((rc2=rc2*2))
		diff alias_lst${ii}.tmp alias_cmp${ii}.tmp >/dev/null || {
			echo "Alias list for alias $ii does not match expected. List is:"
			cat alias_lst${ii}.tmp
			echo "Expected is:"
			cat alias_cmp${ii}.tmp
			echo "End of lists"
			((rc=rc+rc2))
		}
	done

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    rc=0

	${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_role.exp -c "$LDAP_BIN/manage_COM.bsh -r role -d 2.com -R ldaprole1,ldaprole2 -y " -r
    /usr/local/bin/expect add_role.exp || {
        # Failed to remove roles
        echo "Remove role ldaprole 1 through 4 to 2.com domain failed - rc $?"
		return 8
    }
	

    # remove the generated working files
    rm -f *.tmp *.exp || {
        echo "Failed to remove the generated working files"
		return $?
    }

    return 0

}
