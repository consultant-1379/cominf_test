#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-10-08	xsimrea	Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

OUTFILE="tmpout.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    
    
    

   

    # Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
    [[ `ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
        echo "${CONFIG} contains more than 8 domains - harness will timeout"
        return 4
    }

    

	

	# No database contents required
    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    >$OUTFILE

	# Set up a minimal input file
	cat > test1.tmp <<EOF
DOMAIN 2.com
ROLE filerole1
ALIAS filealias1
EOF

    # Check various missing mandatory parameters
    echo "Test 1: Omit mandatory \"action\" parameter"
    $LDAP_BIN/manage_COM.bsh -d 2.com -f test1.tmp -y </dev/null && {
        # Alias import improperly succeeded
        echo "Test 1: Call with missing mandatory \"action\" parameter succeeded" >> $OUTFILE
    }

    echo "Test 2: Omit mandatory \"domain\" parameter"
    $LDAP_BIN/manage_COM.bsh -a import -f test1.tmp -y </dev/null && {
        # Alias import improperly succeeded
        echo "Test 2: Call with missing mandatory \"domain\" parameter succeeded" >> $OUTFILE
    }

    echo "Test 3: Omit mandatory \"input file\" parameter"
    $LDAP_BIN/manage_COM.bsh -a import -d 2.com -y </dev/null && {
        # Alias import improperly succeeded
        echo "Test 3: Call with missing mandatory \"input file\" parameter succeeded" >> $OUTFILE
    }

    # return 0 and let tc_postcon identify errors
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    rc=0

    # report on any failed import attempts
    [[ -s $OUTFILE ]] && {
        echo "Some import alias attempts failed:"
        cat $OUTFILE
        return 1
    }

	CONSOLE_OUTPUT_CONTAINS "ERROR : checkOptionUsage: A valid action must be specified. Please select one of the following [-a, -l, -m or -r]." || {
		echo "Test 1: No \"action must be specified\" message in output"
		((rc=rc+2))
	}

	CONSOLE_OUTPUT_CONTAINS "ERROR : LDAP domain must be specified using option -d <domain>." || {
		echo "Test 2: No \"must specify a domain\" message in output"
		((rc=rc+4))
	}


	# TODO - fix when error message known
	CONSOLE_OUTPUT_CONTAINS "ERROR : Import file must be specified using option -f <import file name>." || {
		echo "Test 2: No \"no import file specified\" message in output"
		((rc=rc+8))
	}

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    rc=0

	

    # remove the generated working files
    rm -f *.tmp *.exp || {
        echo "Failed to remove the generated working files"
		return $?
    }

    return 0

}
