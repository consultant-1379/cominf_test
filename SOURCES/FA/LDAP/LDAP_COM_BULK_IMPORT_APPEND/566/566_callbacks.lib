#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 3-10-2012	xdansan		Test that only one domain and/or role line is allowed

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"
WORKFILE="/tmp/tcid566.tmp"
#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {



	

	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp
	done
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {



	LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

#-------------------------------------------------------------------------------
#  check alias1 is not listed
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 566_list.in.tmp -o 566_list.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 1.com"
	/usr/local/bin/expect 566_list.exp > alias.out || { echo "List failed"; return 1; }
	grep alias1 alias.out && {
		echo "alias1 is listed, this wasn't expected ..."
		return 1
	}

#-------------------------------------------------------------------------------
#  check role1 is not listed
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 566_list.in.tmp -o 566_list.exp -c "$LDAP_BIN/manage_COM.bsh -l role -d 1.com"
	/usr/local/bin/expect 566_list.exp > role.out || { echo "List role failed"; return 1; }
	grep role1 role.out && {
		echo "role1 is listed, this wasn't expected ..."
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {


#-------------------------------------------------------------------------------
#  test with an invalid file
#-------------------------------------------------------------------------------
	
	echo "testing with more than one DOMAIN line ..."
	${AT_BIN}/con_ex.bsh -d 566_bulk.in.tmp -o 566_bulk.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 1.com -f bulk1.txt"
	/usr/local/bin/expect 566_bulk.exp && {
		echo "file was imported, this wasn't expected ..."
		return 1
	}

	echo "testing with more than one ROLE line ..."
	${AT_BIN}/con_ex.bsh -d 566_bulk.in.tmp -o 566_bulk.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 1.com -f bulk2.txt"
	/usr/local/bin/expect 566_bulk.exp && {
		echo "file was imported, this wasn't expected ..."
		return 1
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
>$WORKFILE

#-------------------------------------------------------------------------------
#  check alias1 is not listed 
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 566_list.in.tmp -o 566_list.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 1.com"
	/usr/local/bin/expect 566_list.exp >> $WORKFILE
	
	grep alias1 $WORKFILE && {
		echo "alias1 is listed, this wasn't expected"
		return 1
	}

#-------------------------------------------------------------------------------
#  check role1 is not listed  and role2 not listed
#-------------------------------------------------------------------------------

	${AT_BIN}/con_ex.bsh -d 566_list.in.tmp -o 566_list.exp -c "$LDAP_BIN/manage_COM.bsh -l role -d 1.com"
	/usr/local/bin/expect 566_list.exp >> $WORKFILE

	grep role1 $WORKFILE && {
		echo "role1 is listed, this wasn't expected"
		return 1
	}
	grep role2 $WORKFILE && {
		echo "role2 is listed, this wasn't expected"
		return 1
	}

	CONSOLE_OUTPUT_CONTAINS "ERROR : Found [2] DOMAIN lines. Only one DOMAIN line allowed in import file" || { echo "No single DOMAIN msg"; return 2; }
	CONSOLE_OUTPUT_CONTAINS "ERROR : Found [2] ROLE lines. Only one ROLE line allowed in import file" || { echo "No single ROLE msg"; return 3; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {



	   
	rm -f $WORKFILE
	   
	rm -f *.exp
	rm -f *.out
	rm -f *.tmp
    return 0

}
