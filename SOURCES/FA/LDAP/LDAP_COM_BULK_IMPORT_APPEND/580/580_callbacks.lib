#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-10-08	xsimrea	Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

OUTFILE="tmpout.tmp"

#################################################################################
#
# Function: expect_tee
#
# Take the output of an /usr/local/bin/expect script running manage_COM.bsh and:
# - remove carriage returns
# - tie together split lines (last char of first line is space)
# - output data to named file and stdout
#
# Return or exit codes:
#  0	success
# >0 	failure

expect_tee() {
	[ "$1" == "" ] && { echo Ooops, no target file; return 1; }
	[ -w "$(dirname $1)" ] || { echo Ooops, cannot write target file $1; return 2; }

	tr -d '\r' | awk '/ $/{printf "%s",$0;next}{print}' | tee $1
}

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    
    
    

   

    # Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
    [[ `ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
        echo "${CONFIG} contains more than 8 domains - harness will timeout"
        return 4
    }

    

    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    >$OUTFILE

    # Check processing of non-existent files
	ii=1
    echo "Test ${ii}: Processing of non-existent file"
    $LDAP_BIN/manage_COM.bsh -a import -d 2.com -f not_present.tmp -y < /dev/null | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Processing succeeded even though file does not exist- rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Specified import file [not_present.tmp] does not exist" import_log${ii}.tmp && { echo "Test ${ii}: No \"file not present\" error message for processing" >> $OUTFILE; }

    # Check validation of non-existent files
	ii=2
    echo "Test ${ii}: Validation of non-existent file"
    $LDAP_BIN/manage_COM.bsh -a import -d 2.com -f not_present.tmp -y -v < /dev/null | expect_tee import_log${ii}.tmp
	rc=${PIPESTATUS[0]}
	[ $rc -eq 0 ] && {
        # Alias import improperly succeeded
        echo "Test ${ii}: Validation succeeded even though file does not exist- rc $?" >> $OUTFILE
    }
	grep -i "ERROR : Specified import file [not_present.tmp] does not exist" import_log${ii}.tmp && { echo "Test ${ii}: No \"file not present\" error message for validation" >> $OUTFILE; }

    # return 0 and let tc_postcon identify errors
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    rc=0

    # report on any failed import attempts
    [[ -s $OUTFILE ]] && {
        echo "Some import alias attempts did not go right:"
        cat $OUTFILE
        return 1
    }

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    rc=0

    # remove the generated working files
    rm -f *.tmp *.exp || {
        echo "Failed to remove the generated working files"
		return $?
    }

    return 0

}
