#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-10-08	xsimrea	Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

OUTFILE="tmpout.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    
    
    

   

    # Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
    [[ `ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
        echo "${CONFIG} contains more than 8 domains - harness will timeout"
        return 4
    }

    

    # Replace PASSWD and other fields in input file(s) with the correct credentials or data
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp || {
            echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin/expect input file $ii, rc $?"
            return 6
        }
    done

	

	# Add desired roles to specified domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d 2.com -R ldaprole1,ldaprole2,ldaprole3,ldaprole4 -y " -r
    /usr/local/bin/expect add_role.exp || {
        # Failed to add roles
        echo "Add role ldaprole 1 through 4 to 2.com domain failed - rc $?"
		return 8
    }

	# create the aliases
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias1.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A ldapalias1 -R ldaprole1 -y " -r
    /usr/local/bin/expect add_alias1.exp || {
        # Failed to add aliases
        echo "Add alias ldapalias1 failed - rc $?"
		return 8
    }
	
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias2.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A ldapalias2 -R ldaprole2,ldaprole3 -y " -r
    /usr/local/bin/expect add_alias2.exp || {
        # Failed to add aliases
        echo "Add alias ldapalias2 failed - rc $?"
		return 9
    }
	
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias3.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A ldapalias3 -R ldaprole4 -y " -r
    /usr/local/bin/expect add_alias3.exp || {
        # Failed to add aliases
        echo "Add alias ldapalias3 failed - rc $?"
		return 10
    }
	
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias4.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A ldapalias4 -R ldaprole3 -y " -r
    /usr/local/bin/expect add_alias4.exp || {
        # Failed to add aliases
        echo "Add alias ldapalias4 failed - rc $?"
		return 11
    }
	
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias5.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A ldapalias5 -R ldaprole1 -y " -r
    /usr/local/bin/expect add_alias5.exp || {
        # Failed to add aliases
        echo "Add alias ldapalias5 failed - rc $?"
		return 12
    }
	
    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Check that the desired roles are in specified domain, and take a log of all of them
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_role.exp -c "$LDAP_BIN/manage_COM.bsh -l role -d 2.com" -r
    /usr/local/bin/expect list_role.exp > role_lst.tmp || {
        # Failed to list roles
        echo "List role in 2.com domain failed - rc $?"
		return 9
    }
	tr -d '\015' < role_lst.tmp > role_prelst.tmp

	# To tidy up manage_COM output, pipe it through something like:
	# tr -d '\015' < alias.tmp | sed -e '1,/^Aliases for domain/d' -e '/^$/d'

	grep -i "ldaprole1" role_prelst.tmp | grep -i "ldaprole2" role_prelst.tmp | grep -i "ldaprole3" role_prelst.tmp | grep -i "ldaprole4" role_prelst.tmp || {
		echo "Could not find one or more of the roles we have just added, rc $?"
		echo "Pre-test list is:"
		cat role_prelst.tmp
		echo "End of list"
		return 10
	}

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    >$OUTFILE

    # Check that file is accepted and that all aliases added successfully
    echo "Test 1: Multiple Alias changes, some adding new roles, some not, 1 new alias"
	cat > test1.tmp <<EOF
DOMAIN 2.com
ROLE FILEROLE5
# specfify existing role + 1 new one
ALIAS ldapalias1 ldaprole1,ldaprole2
# specify both existing roles
ALIAS LDAPalias2 ldaprole2,LDAPROLE3
# specify a new role, do not specify old one
ALIAS ldapALIAS3 LDAProle1
# specify a new role, do not specify old one
ALIAS LDAPALIAS5 LDAProle1,fileROLE5
# specify a new alias
ALIAS FILEalias6 LDAProle1,ldapROLE2,ldaprole3
EOF
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o import_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a import -d 2.com -f test1.tmp -y" -r
    /usr/local/bin/expect import_alias.exp || {
        # Alias import improperly failed
        echo "Test 1: Import failed even though roles existed - rc $?" >> $OUTFILE
    }

    # return 0 and let tc_postcon identify errors
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    rc=0

    # report on any failed import attempts
    [[ -s $OUTFILE ]] && {
        echo "Some import alias attempts failed:"
        cat $OUTFILE
        return 1
    }

	# Check that the old aliases have been modifued correctly, and the new one added to specified domain
	for ii in {1..5}; do
		${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com -A ldapalias${ii}" -r
    	/usr/local/bin/expect list_alias.exp | tr -d '\r' | sed '1,/Roles assigned/d' | grep . | sort | tr 'A-Z' 'a-z' > alias_lst${ii}.tmp
	done
	${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com -A filealias6" -r
	/usr/local/bin/expect list_alias.exp | tr -d '\r' | sed '1,/Roles assigned/d' | grep . | sort | tr 'A-Z' 'a-z' > alias_lst6.tmp

	cat > alias_cmp1.tmp <<EOF
ldaprole1
ldaprole2
EOF
	cat > alias_cmp2.tmp <<EOF
ldaprole2
ldaprole3
EOF
	cat > alias_cmp3.tmp <<EOF
ldaprole1
ldaprole4
EOF
	cat > alias_cmp4.tmp <<EOF
ldaprole3
EOF
	cat > alias_cmp5.tmp <<EOF
FILEROLE5
ldaprole1
EOF
	cat > alias_cmp6.tmp <<EOF
ldaprole1
ldaprole2
ldaprole3
EOF

	rc2=1
	for ii in {1..6}; do
		((rc2=rc2*2))
		diff alias_lst${ii}.tmp alias_cmp${ii}.tmp >/dev/null || {
			echo "Alias list for alias $ii does not match expected. List is:"
			cat alias_lst${ii}.tmp
			echo "Expected is:"
			cat alias_cmp${ii}.tmp
			echo "End of lists"
			((rc=rc+rc2))
		}
	done

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    rc=0

	# Add desired roles to specified domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_role.exp -c "$LDAP_BIN/manage_COM.bsh -r role -d 2.com -R ldaprole1,ldaprole2,ldaprole3,ldaprole4,FILEROLE5 -y " -r
    /usr/local/bin/expect remove_role.exp || {
        # Failed to add roles
        echo "Remove role ldaprole 1 through 4 to 2.com domain failed - rc $?"
		return 8
    }

    # remove the generated working files
    rm -f $OUTFILE *.tmp *.exp || {
        echo "Failed to remove the generated working files"
		return $?
    }

    return 0

}
