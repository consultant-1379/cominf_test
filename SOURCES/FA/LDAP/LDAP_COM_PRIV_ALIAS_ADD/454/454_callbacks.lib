#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 20/09/13	xkalbha		Initial test for add alias to OSS user

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp
	done
	
#-------------------------------------------------------------------------------
# Create a test user  
#-------------------------------------------------------------------------------
	
	LDAP_SET_DEFAULT_DOMAIN 1.com && { echo "Failed to set default domain as 1.com"; return 1 ; }
	
	
	CMD='/ericsson/sdee/bin/add_user.sh -d 1.com -n u454 -i 1454 -C bhavana -y'
	${AT_BIN}/con_ex.bsh -d 454adduser.in.tmp -o 454adduser.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 454adduser.exp ||{
		echo "Failed to create user, error code $?"
		return 2
	}
	
#-------------------------------------------------------------------------------
# Create a test role
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM.bsh -a role -d 1.com -R role454 -y'
	${AT_BIN}/con_ex.bsh -d 454.in.tmp -o 454addrole.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 3
	}

	/usr/local/bin/expect 454addrole.exp || {
		echo "Failed to create role, error code $?"
		return 4
	}

#-------------------------------------------------------------------------------
# Add target to user
#-------------------------------------------------------------------------------
	CMD='/ericsson/sdee/bin/manage_COM_privs.bsh -a target -d 1.com -u u454 -T target1 -y'
	${AT_BIN}/con_ex.bsh -d 454.in.tmp -o 454.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 5
	}

	/usr/local/bin/expect 454.exp || {
		echo "Failed to add target to user, error code $?"
		return 6
	}
#-------------------------------------------------------------------------------
# Create a test alias
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM.bsh -a alias -d 1.com -A alias454 -R role454 -y'
	${AT_BIN}/con_ex.bsh -d 454.in.tmp -o 454addrole.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 7
	}

	/usr/local/bin/expect 454addrole.exp || {
		echo "Failed to create alias, error code $?"
		return 8
	}

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

#-------------------------------------------------------------------------------
#  Check LDAP is running
#-------------------------------------------------------------------------------

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

#-------------------------------------------------------------------------------
#  Test user is present
#-------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u454,ou=people,dc=1,dc=com objectclass=* > u454.out || {
		echo "Failed to do LDAP search"
		return 1
	}
	grep 'ericssonUserAuthenticationScope: target1' u454.out || {
		echo "Failed to find target for user u454"
		cat u454.out
		return 2
	}
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=role454,ou=role,ou=com,dc=1,dc=com objectclass=* | grep 'cn: role454' || {
		echo "Failed to find role454"
		return 3
	}
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b role=alias454,ou=rolealias,ou=com,dc=1,dc=com objectclass=* | grep 'role: alias454' || {
		echo "Failed to find alias454"
		return 4
	}
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	CMD='/ericsson/sdee/bin/manage_COM_privs.bsh -a alias -d 1.com -u u454 -A alias454 -y'
	${AT_BIN}/con_ex.bsh -d 454.in.tmp -o 454.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 454.exp || {
		echo "Failed to add alias to user, error code $?"
		return 2
	}
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Check user has alias for target
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u454,ou=people,dc=1,dc=com objectclass=* | grep "ericssonUserAuthorizationScope: alias454" || {
		echo "u454 user does not have alias ... This wasn't expected"
		return 1
	}

	# Check output shows  user is type com_oss
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u454,ou=people,dc=1,dc=com objectclass=* |  grep "gidNumber: 609" || {
		echo "User is wrong type"
		return 8
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {


	
	# Remove temporary files
	rm -f *.exp
	rm -f *.out
}
