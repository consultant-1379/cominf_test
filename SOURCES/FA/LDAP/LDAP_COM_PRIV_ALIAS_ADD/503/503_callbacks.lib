#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 20/09/13	xkalbha		Initial test for add alias to user in globaldomain

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {


	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp
	done


		# If 2.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_2 || {
		LDAP_CREATE_DOMAIN_ON_OSS2 $G_DOMAIN_NAME_2 || { echo "ERROR: Failed to create domain $G_DOMAIN_NAME_2" ; return 1; }
	}


#-------------------------------------------------------------------------------
# Create a test user
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/add_user.sh -d 2.com -n u503 -i 1503 -C bhavana -y '
	${AT_BIN}/con_ex.bsh -d 503adduser.in.tmp -o 503adduser.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 2
	}

	/usr/local/bin/expect 503adduser.exp ||{
		echo "Failed to create user, error code $?"
		return 3
	}

#-------------------------------------------------------------------------------
# Create a test role
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM.bsh -a role -d 2.com -R role503 -y'
	${AT_BIN}/con_ex.bsh -d 503.in.tmp -o 503addrole.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 4
	}

	/usr/local/bin/expect 503addrole.exp || {
		echo "Failed to create role, error code $?"
		return 5
	}

#-------------------------------------------------------------------------------
# Create a test alias
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/manage_COM.bsh -a alias -d 2.com -A alias503 -R role503 -y'
	${AT_BIN}/con_ex.bsh -d 503.in.tmp -o 503addrole.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 6
	}

	/usr/local/bin/expect 503addrole.exp || {
		echo "Failed to create alias, error code $?"
		return 7
	}
#-------------------------------------------------------------------------------
#  Migrate domain
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/migrate_domain.bsh -d 2.com -y'
	${AT_BIN}/con_ex.bsh -d 503_migrate.in.tmp -o 503mig.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 8
	}

	/usr/local/bin/expect 503mig.exp || {
		echo "Failed to migrate, error code $?"
		return 9
	}


	return 0
}

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

#-------------------------------------------------------------------------------
#  Check LDAP is running
#-------------------------------------------------------------------------------

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

#-------------------------------------------------------------------------------
#  user is present
#-------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u503,ou=people,dc=globaldomain objectclass=* > u503.out || {
		echo "Failed to do LDAP search"
		return 1
	}
	grep 'ericssonUserAuthenticationScope' u503.out && {
		echo "Found authentication for user u503"
		return 2
	}
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=role503,ou=role,ou=com,dc=1,dc=com objectclass=* | grep 'cn: role503' || {
		echo "Failed to find 503"
		return 3
	}
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b role=alias503,ou=rolealias,ou=com,dc=1,dc=com objectclass=* | grep 'role: alias503' || {
		echo "Failed to find 503"
		return 4
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	/ericsson/sdee/bin/manage_COM_privs.bsh -a alias -d globaldomain -u u503 -A target1:alias503 -y
	retval=$?
	[ $retval -eq 1 ] || { echo "Managed to add to globaldomain"; return 1; }
	/ericsson/sdee/bin/manage_COM_privs.bsh -a alias -u u503 -A target1:alias503 -y
	return $?
	# This should return 1
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon(){

	LDAP_USER_EXISTS globaldomain u503 || {
		echo "Test user does not exist, $?"
		return 1
	}

	

	grep "alias" 503l.out && {
		echo "Found unexpected alias"
		return 3
	}

	CONSOLE_OUTPUT_CONTAINS "ERROR : COM objects are not valid in the globaldomain" || { echo "No globaldomain error"; return 4; }
	CONSOLE_OUTPUT_MATCH "ERROR : COM objects are not valid in the globaldomain" 2 || { echo "No globaldomain error"; return 4; }

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {


	
	# Remove temporary files
	rm -f *.exp
	rm -f *.out
}
