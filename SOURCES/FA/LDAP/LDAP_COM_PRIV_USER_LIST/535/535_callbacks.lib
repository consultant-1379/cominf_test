#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 28/09/12	xbahzam		Initial test for add role to COM_only user

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {


# Replace PASSWD with the correct credentials or data
	for ii in *.in; do
		sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp || {
			echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin/expect input file $ii, rc $?"
			return 2
		}
	done


	

#------------------------------------------------------------------------------
	# Create the nms group if it doesn't already exist
#------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b dc=1,dc=com objectclass=* | grep nms > u535.out || {

		echo "Need to  create nms group"
		# Create the nms group
		CMD='/ericsson/sdee/bin/add_group.sh -d 1.com -n nms -y'
		${AT_BIN}/con_ex.bsh -d password.in.tmp -o 535nms.exp -c "$CMD" || {
			echo "Failed to generate /usr/local/bin/expect script, $?"
			return 3
		} 

		/usr/local/bin/expect 535nms.exp || { 
			echo "Failed to create nms group, error code $?"
			return 4
		}
	}


#-------------------------------------------------------------------------------
# Create a test user1: COM_app
#-------------------------------------------------------------------------------

	CMD='/ericsson/sdee/bin/add_user.sh -t COM_APP -d 1.com -n u535 -i 1535 -C bahram -y'
	${AT_BIN}/con_ex.bsh -d 535adduser.in.tmp -o 535adduser.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 535adduser.exp ||{
		echo "Failed to create user, error code $?"
		return 2
	}
	
	
	return 0
}

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

#-------------------------------------------------------------------------------
#  Check LDAP is running
#-------------------------------------------------------------------------------

	LDAP_SERVER_UP || {
		echo "LDAP server not running"
		return 1
	}

#-------------------------------------------------------------------------------
#  Test users are present with expected targets and roles
#-------------------------------------------------------------------------------

	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b uid=u535,ou=people,dc=1,dc=com objectclass=* > u535.out || {
		echo "Failed to do LDAP search"
		return 1
	}
	grep 'uid: u535' u535.out || {
		echo "Failed to find target1 for user u535"
		echo "output file u535.out BEGIN:"
		cat u535.out
		echo output file END
		return 2
	}

	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	
	# domain name has been dropped from the command to test if works without any domain name specified
	CMD='/ericsson/sdee/bin/manage_COM_privs.bsh -l -d 1.com'
	${AT_BIN}/con_ex.bsh -d 535.in.tmp -o 535o2.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 535o2.exp || {
		echo "The command with only -l failed, error code $?"
		return 2
	}

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	
	CONSOLE_OUTPUT_CONTAINS "u535"|| { echo user u535 was not in the output of the list command; return 1; }
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	
	CMD='/ericsson/sdee/bin/del_user.sh -d 1.com -n u535 -i 1535 -y'
	${AT_BIN}/con_ex.bsh -d 535.in.tmp -o 535deluser.exp -c "$CMD" || {
		echo "Failed to generate /usr/local/bin/expect script, $?"
		return 1
	}

	/usr/local/bin/expect 535deluser.exp && {
		echo "Failed to delete user, error code $?"
		return 2
	}
	
	# Remove temporary files
	rm -f *.exp
	rm -f *.out

	return 0
}
