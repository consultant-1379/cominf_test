#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 31-07-12  xgeohar		Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

RESGROUPS="/ericsson/sdee/etc/reserved_groups"
RESGROUPS_DEF="/ericsson/sdee/resources/reserved_groups"
RESNAMES=
OUTFILE="/tmp/tcid170.tmp"

# /usr/local/bin/expect template and working files
EXPECT_TMPLT="170.resdel.in"
EXPECT_WRKNG=${EXPECT_TMPLT}.wkg

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	
	
	

	

	# Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
	[[ ` ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
		echo "${CONFIG} contains more than 8 domains - harness will timeout"
		return 1
	}

	

	# check if the reserved group exists - otherwise get default reserved groups
	[[ -s ${RESGROUPS} ]] || {
		# if the default reserved group exists copy it to expected location
		[[ -s ${RESGROUPS_DEF} ]] && cp ${RESGROUPS_DEF} ${RESGROUPS} && return 0

		# Missing reserved group / default reserve group of copy fail
		echo "Reserved group file empty / default not found / copy failed"
		return 1
	}

	# Replace PASSWD with the correct credentials
    sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" ${EXPECT_TMPLT} > ${EXPECT_WRKNG} || {
		echo "Failed to replace LDAP superuser password holder in /usr/local/bin/expect input files"
		return 1
	}

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	>$OUTFILE

#-------------------------------------------------------------------------------
#  we check the /ericsson/sdee/etc/reserved_groups file and try to
#  remove groups for each of the names in this file.
#-------------------------------------------------------------------------------

	# exclude nms and com as these are special reserved groups
	RESNAMES=(`awk '( $0 !~ /^nms/ ) && ( $0 !~ /^com/ ) {print $1}' ${RESGROUPS} | grep -v ^#`)
	for resName in ${RESNAMES[@]} ; do
		${AT_BIN}/con_ex.bsh -d ${EXPECT_WRKNG} -o 170_expect.exp -c "$LDAP_BIN/del_group.sh -d 1.com -n $resName" -r
		/usr/local/bin/expect 170_expect.exp 
		if [[ $? -eq 0 ]]
		then
			echo "$resName was removed and it's a reserved group - FAIL" >> $OUTFILE
		else
			echo "Attempted to remove $resName, but failed, which is the correct action"
		fi
	done

	# report on any removed reserved groups
	if [[ -s $OUTFILE ]] ; then
		echo "Some reserved groups were removed:"
		cat $OUTFILE
		return 1
	else
		echo "None of the reserved groups were removed - SUCCESS"
		return 0
	fi

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	_ret=0
	# List all the reserved groups and ensure NOT present in LDAP
	RESNAMES=(`awk '( $0 !~ /^nms/ ) && ( $0 !~ /^com/ ) {print $1}' ${RESGROUPS} | grep -v ^#`)
    for resName in ${RESNAMES[@]} ; do
    	/usr/bin/ldapsearch -D "cn=Directory Manager" -w $LDAP_SUPERUSER_PASSWD -b "ou=group,dc=1,dc=com" "objectclass=*" | grep -w "cn: $resName" > /dev/null 2>&1
		if [[ $? -eq 0 ]] ; then
			echo "The group $resName was found ... This wasn't expected"
			_ret=1
		fi
	done
	return $_ret

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	if [[ -s $OUTFILE ]] ; then
		echo "The following reserved groups were removed:"
		cat $OUTFILE
		RNAME=(`awk '{print $1}' $OUTFILE`)
		for resGrpRemoved in ${RNAME[@]} ; do
			echo "Reserved group $resGrpRemoved was removed - restore it"
		done
	fi

	# remove the generated /usr/local/bin/expect files
	rm -f *exp ${EXPECT_WRKNG} $OUTFILE || {
		echo "Failed to remove the generated /usr/local/bin/expect file"
		return 1
	}

	return 0

}
