#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 07/19/2012	xdansan		Remove a group from a domain by specifying the group name
# 08/01/2012	xgeohar		Add /usr/local/bin/expect processing

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

# These two variables are used in the /usr/local/bin/expect input file strings
# Group name must be a max of 8 characters
GNAME=group130
GID=12345

LDAP_DOMAIN=$(cat /ericsson/config/config.ini | grep "LDAP_DOMAIN_NAME" | awk -F= '{print $2}')
#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	echo "Creating test group"
	LDAP_GROUP_EXISTS $LDAP_DOMAIN $GNAME || {
		LDAP_CREATE_GROUP $LDAP_DOMAIN $GNAME || {
			echo "Error creating test group"
			return 1
		}
	}
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP server is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

	# search for test group just created
	LDAP_GROUP_EXISTS $LDAP_DOMAIN $GNAME || {
		echo "Test doesn't exist in LDAP, exiting..."
		return 1
	}
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {


	#-------------------------------------------------------------------------------
	#  we remove the group added in tc_setup by specifying the group name
	#-------------------------------------------------------------------------------

        local superUserPasswd=${LDAP_SUPERUSER_PASSWD:-PASSWD}
        local filePrefix=test130

# ----- START HERE DOCUMENT -----
cat > ${filePrefix}.in << EOF || { echo "ERROR: failed to make input file ${filePrefix}.in" ; return 3; }
LDAP Directory Manager password:
$superUserPasswd
Continue to delete local group*
y
EOF
# ----- END HERE DOCUMENT -----
        # Generate /usr/local/bin/expect script from input file
        ${AT_BIN}/con_ex.bsh -d ${filePrefix}.in -o ${filePrefix}.exp -c "/ericsson/sdee/bin/del_group.sh -d $LDAP_DOMAIN -n $GNAME" -r || {
                echo "ERROR: Could not create /usr/local/bin/expect output script from input file ${filePrefix}.in"
                return 4
        }
        # Execute /usr/local/bin/expect script to add domain
        /usr/local/bin/expect ${filePrefix}.exp || {
                rm  ${filePrefix}.in ${filePrefix}.exp
                echo "ERROR: Deleting $GNAME, error code $?"
                return 5
        }
        rm  ${filePrefix}.in ${filePrefix}.exp
        return 0
}

#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# List all groups and ensure $GNAME is not listed
        LDAP_GROUP_EXISTS $LDAP_DOMAIN $GNAME && { echo "ERROR: Failed to delete group $GNAME"; return 6; }
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# remove the generated /usr/local/bin/expect files
        LDAP_GROUP_EXISTS $LDAP_DOMAIN $GNAME && { 
		echo "ERROR: $GNAME still exists, deleting"; 
		LDAP_DELETE_GROUP $LDAP_DOMAIN $GNAME || {
			echo "Failed to delete test group"
			return 6 
		}
	}
	return 0
}
