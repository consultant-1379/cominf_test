#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-06-06	xsimrea	Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"
TEST_ROLE="r592"
TEST_ALIAS="a592"

OUTFILE="tmpout.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    
    
    

   

    # Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
    [[ `ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
        echo "${CONFIG} contains more than 8 domains - harness will timeout"
        return 4
    }

    

    # Replace PASSWD in input file(s) with the correct credentials
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp || {
            echo "Failed to replace LDAP superuser password holder in /usr/local/bin/expect input file $ii, rc $?"
            return 6
        }
    done

		# If 1.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_1 || {
		LDAP_CREATE_DOMAIN_ON_OSS1 $G_DOMAIN_NAME_1 || { echo "ERROR: failed to create domain $G_DOMAIN_NAME_1" ; return 1; }
	}

	# Add roles to specified domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d 2.com -R r592a,r592b,r592c,r592d -y " -r
    /usr/local/bin/expect add_role.exp || {
        # Failed to add role
        echo "Add role r592a,r592b,r592c,r592d to domain failed - rc $?"
		return 8
    }

	# Add alias a592a pointing to the first three roles
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A a592a -R r592a,r592b,r592c -y " -r
    /usr/local/bin/expect add_alias.exp || {
        # Failed to add alias
        echo "Add alias a592a for role r592a,r592b,r592c to domain failed - rc $?"
		return 9
    }

	# Add alias a592b pointing to the first three roles
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 2.com -A a592b -R r592a,r592b,r592c -y " -r
    /usr/local/bin/expect add_alias.exp || {
        # Failed to add alias
        echo "Add alias a592b for role r592a,r592b,r592c to domain failed - rc $?"
		return 10
    }

    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# no need to check that LDAP server is up - the first ldap command will simply fail with "No domains returned"

	# Check that the desired alias is in domain, and take a log of all of them
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com" -r
    /usr/local/bin/expect list_alias.exp > alias_lst.tmp || {
        # Failed to list aliasses
        echo "List alias in domain failed - rc $?"
		cat alias_lst.tmp
		return 2
    }
	tr -d '\015' < alias_lst.tmp > alias_prelst.tmp
	grep -i "a592a" alias_prelst.tmp && grep -i "a592b" alias_prelst.tmp || {
		echo "Could not find the aliasses a592a and a592b we have just added, rc $?"
		echo "Pre-test list is:"
		cat alias_prelst.tmp
		echo "End of list"
		return 3
	}

	# Check that the desired role exists
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_role.exp -c "$LDAP_BIN/manage_COM.bsh -l role -d 2.com" -r
    /usr/local/bin/expect list_role.exp > role_lst.tmp || {
        # Failed to list roles
        echo "List roles in roles in domain failed - rc $?"
		return 4
    }
	tr -d '\015' < role_lst.tmp > role_prelst.tmp
	grep -i "r592a" role_prelst.tmp || {
		echo "Could not find the role r592a we have just added, rc $?"
		echo "Pre-test list is:"
		cat role_prelst.tmp
		echo "End of list"
		return 5
	}

	# Check that the first alias points to the expected roles
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com -A a592a" -r
    /usr/local/bin/expect list_aliasrole.exp > aliasrole_lst.tmp || {
        # Failed to list roles in alias
        echo "List roles in alias a592a in domain failed - rc $?"
		return 6
    }
	tr -d '\015' < aliasrole_lst.tmp > alias1role_prelst.tmp
	grep -i "r592a" alias1role_prelst.tmp && grep -i "r592b" alias1role_prelst.tmp && grep -i "r592c" alias1role_prelst.tmp || {
		echo "Could not find the roles r592a, r592b and r592c in alias a592a we have just added, rc $?"
		echo "Pre-test list is:"
		cat alias1role_prelst.tmp
		echo "End of list"
		return 7
	}

	# Check that the second alias points to the expected roles
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com -A a592b" -r
    /usr/local/bin/expect list_aliasrole.exp > aliasrole_lst.tmp || {
        # Failed to list roles in alias
        echo "List roles in alias a592a in domain failed - rc $?"
		return 6
    }
	tr -d '\015' < aliasrole_lst.tmp > alias2role_prelst.tmp
	grep -i "r592a" alias2role_prelst.tmp && grep -i "r592b" alias2role_prelst.tmp && grep -i "r592c" alias2role_prelst.tmp || {
		echo "Could not find the roles r592a, r592b and r592c in alias a592a we have just added, rc $?"
		echo "Pre-test list is:"
		cat alias2role_prelst.tmp
		echo "End of list"
		return 7
	}

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    >$OUTFILE

    # Run some non-interactive invalid commands
    echo "Test 1: Modify alias, supply 2 roles"
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -d 2.com -A a592a -R r592a,r592b -x -y" -r
    /usr/local/bin/expect remove_aliasrole.exp && {
        # Remove 2 roles should fail
        echo "Remove 2 roles succeeded when it should not" >> $OUTFILE
    }

    echo "Test 2: Modify alias, add invalid option \"-n\""
    $LDAP_BIN/manage_COM.bsh -m alias -d 2.com -A a592a -R r592b -x -n </dev/null && {
        # Extra "-n" parameter should fail
        echo "Remove with \"-n\" parameter succeeded when it should not" >> $OUTFILE
	}

    echo "Test 3: Modify alias, add invalid option \"-e\""
    $LDAP_BIN/manage_COM.bsh -m alias -d 2.com -A a592a -R r592b -x -e </dev/null && {
        # Extra "-e" parameter should fail
        echo "Remove with \"-e\" parameter succeeded when it should not" >> $OUTFILE
	}

    echo "Test 4: Modify alias, supply 2 aliasses"
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -d 2.com -A a592a,a592b -R r592b -x -y" -r
    /usr/local/bin/expect remove_aliasrole.exp && {
        # Remove 2 aliasses should fail
        echo "Remove 2 aliasses succeeded when it should not" >> $OUTFILE
    }

    echo "Test 5: Modify alias, supply alias where role should be"
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -d 2.com -A a592a -R a592b -x -y" -r
    /usr/local/bin/expect remove_aliasrole.exp && {
        # Remove role but put alias name where role should be should fail
        echo "Remove alias with role where alias should be succeeded when it should not" >> $OUTFILE
    }

    echo "Test 6: Modify alias, supply role where alias should be"
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -d 2.com -A r592a -R r592b -x -y" -r
    /usr/local/bin/expect remove_aliasrole.exp && {
        # Remove role but put role name where alias should be should fail
        echo "Remove alias with alias where role should be succeeded when it should not" >> $OUTFILE
    }

	
    # return 0 and let tc_postcon identify errors
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    rc=0
    rc2=0

    # report on any failed removal attempts
    [[ -s $OUTFILE ]] && {
        echo "Some remove role from alias attempts erroneously succeeded:"
        cat $OUTFILE
        return 1
    }

	# Check that both aliasses are still in the domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com" -r
    if /usr/local/bin/expect list_alias.exp > alias_lst.tmp ; then
		# Lose the ^Ms, and the line which says there are no aliases.  The latter was not
		# done on the prelst, because we want to know if that one *does* contain the string!
		tr -d '\015' < alias_lst.tmp | sed '/No aliases found for domain/d' > alias_postlst.tmp

		# Got alias list - now check whether entry has been left
		diff alias_prelst.tmp alias_postlst.tmp || {
			echo "Pre-test alias list is not same as post-test list" 
			echo "Pre-test list is:"
			cat alias_prelst.tmp
			echo "Post-test list is:"
			cat alias_postlst.tmp
			echo "End of list"
			return $?
		}
	else
        # Failed to list aliasses
        echo "Failed to list aliasses in domain - rc $?"
		return $?
	fi

	# Check that the original roles are still in the first alias
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com -A a592a" -r
    if /usr/local/bin/expect list_aliasrole.exp > aliasrole_lst.tmp ; then
		# Lose the ^Ms
		tr -d '\015' < aliasrole_lst.tmp > alias1role_postlst.tmp

		# Got list of roles in the alias - now check it is unchanged
		diff alias1role_prelst.tmp alias1role_postlst.tmp || {
			echo "Pre-test role list in alias a592a is not same as post-test list" 
			echo "Pre-test list is:"
			cat alias1role_prelst.tmp
			echo "Post-test list is:"
			cat alias1role_postlst.tmp
			echo "End of list"
			return $?
		}
	else
        # Failed to list aliasses
        echo "Failed to list roles in alias a592a - rc $?"
		return $?
	fi

	# Check that the original roles are still in the second alias
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 2.com -A a592b" -r
    if /usr/local/bin/expect list_aliasrole.exp > aliasrole_lst.tmp ; then
		# Lose the ^Ms
		tr -d '\015' < aliasrole_lst.tmp > alias2role_postlst.tmp

		# Got list of roles in the alias - now check it is unchanged
		diff alias2role_prelst.tmp alias2role_postlst.tmp || {
			echo "Pre-test role list in alias a592b is not same as post-test list" 
			echo "Pre-test list is:"
			cat alias2role_prelst.tmp
			echo "Post-test list is:"
			cat alias2role_postlst.tmp
			echo "End of list"
			return $?
		}
	else
        # Failed to list aliasses
        echo "Failed to list roles in alias a592b - rc $?"
		return $?
	fi

	# Now check messages in the console output
	CONSOLE_OUTPUT_CONTAINS "ERROR : Only one role can be supplied" || { echo "Test 1: No \"only one role\" msg"; return $?; }
	CONSOLE_OUTPUT_CONTAINS "bin/manage_COM.bsh: illegal option -- e" || { echo "Test 2: No \"invalid option -e\" msg"; return $?; }
	CONSOLE_OUTPUT_CONTAINS "bin/manage_COM.bsh: illegal option -- n" || { echo "Test 3: No \"invalid option -n\" msg"; return $?; }
	CONSOLE_OUTPUT_CONTAINS "ERROR : Only one alias can be supplied" || { echo "Test 4: No \"only one alias\" msg"; return $?; }
	CONSOLE_OUTPUT_CONTAINS "ERROR : [a592b] does not exist as a role in this domain" || { echo "Test 5: No \"a592a is not a role\" msg"; return $?; }
	CONSOLE_OUTPUT_CONTAINS "ERROR : [r592a] does not exist as an alias in this domain" || { echo "Test 6: No \"r592a is not an alias\" msg"; return $?; }
	

    return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    rc=0

	# Remove roles
        ${AT_BIN}/con_ex.bsh -d 592_remove_role.in.tmp -o 592_expect.exp -c "$LDAP_BIN/manage_COM.bsh -r role -d 2.com " -r
        /usr/local/bin/expect 592_expect.exp  || {
                echo "Could not delete role added to default domain - FAIL"
                return 1
        }

    # remove the generated working files
    rm -f *.tmp *.exp || {
        echo "Failed to remove the generated working files"
		return $?
    }

    return $rc

}
