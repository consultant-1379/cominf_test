#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-06-06	xsimrea	Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

TEST_ROLE="r588"
TEST_ALIAS="a588"
OUTFILE="tmpout.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    
    
    

   

    # Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
    [[ `ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
        echo "${CONFIG} contains more than 8 domains - harness will timeout"
        return 4
    }

    

    # Replace PASSWD in input file(s) with the correct credentials
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" $ii > $ii.tmp || {
            echo "Failed to replace LDAP superuser password holder in /usr/local/bin/expect input file $ii, rc $?"
            return 6
        }
    done

		# If 1.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_1 || {
		LDAP_CREATE_DOMAIN_ON_OSS1 $G_DOMAIN_NAME_1 || { echo "ERROR: failed to create domain $G_DOMAIN_NAME_1" ; return 1; }
	}

	# Add first role to specified domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d 1.com -R r588a -y " -r
    /usr/local/bin/expect add_role.exp || {
        # Failed to add role
        echo "Add role r588a to domain failed - rc $?"
		return 8
    }

	# Add second role to specified domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d 1.com -R r588b -y " -r
    /usr/local/bin/expect add_role.exp || {
        # Failed to add role
        echo "Add role r588b to domain failed - rc $?"
		return 9
    }

	# Add third role to specified domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_role.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d 1.com -R r588c -y " -r
    /usr/local/bin/expect add_role.exp || {
        # Failed to add role
        echo "Add role r588c to domain failed - rc $?"
		return 10
    }

	# Add desired alias, pointing to the first two roles, not the third
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias.exp -c "$LDAP_BIN/manage_COM.bsh -a alias -d 1.com -A a588 -R r588a,R588b -y " -r
    /usr/local/bin/expect add_alias.exp || {
        # Failed to add alias
        echo "Add alias a588 for roles r588a,r588b to domain failed - rc $?"
		return 11
    }

    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

    LDAP_SERVER_UP || {
        echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
        return 1
    }

	# Check that the desired alias is in domain, and take a log of all of them
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 1.com" -r
    /usr/local/bin/expect list_alias.exp > alias_lst.tmp || {
        # Failed to list aliases
        echo "List alias in domain failed - rc $?"
		return 2
    }
	tr -d '\015' < alias_lst.tmp > alias_prelst.tmp
	grep -i "a588" alias_prelst.tmp || {
		echo "Could not find the alias ${TEST_ALIAS} we have just added, rc $?"
		echo "Pre-test list is:"
		cat alias_prelst.tmp
		echo "End of list"
		return 3
	}
	# Check that the desired roles all exist
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_role.exp -c "$LDAP_BIN/manage_COM.bsh -l role -d 1.com" -r
    /usr/local/bin/expect list_role.exp > role_lst.tmp || {
        # Failed to list roles
        echo "List roles in roles in domain failed - rc $?"
		return 4
    }
	tr -d '\015' < role_lst.tmp > role_prelst.tmp
	grep -i "r588a" role_prelst.tmp && grep -i "r588b" role_prelst.tmp && grep -i "r588" role_prelst.tmp || {
		echo "Could not find the roles r588a, r588b or r588c we have just added, rc $?"
		echo "Pre-test list is:"
		cat role_prelst.tmp
		echo "End of list"
		return 5
	}

	# Check that the desired alias points to the expected roles
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 1.com -A a588" -r
    /usr/local/bin/expect list_aliasrole.exp > aliasrole_lst.tmp || {
        # Failed to list roles in alias
        echo "List roles in alias a588 in domain failed - rc $?"
		return 6
    }
	tr -d '\015' < aliasrole_lst.tmp > aliasrole_prelst.tmp
	grep -i "r588a" aliasrole_prelst.tmp && grep -i "r588b" aliasrole_prelst.tmp || {
		echo "Could not find the roles r588a or r588b in alias a588 we have just added, rc $?"
		echo "Pre-test list is:"
		cat aliasrole_prelst.tmp
		echo "End of list"
		return 7
	}

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    >$OUTFILE

    # try to remove a non-existent role from the alias
    echo "Test 1: Try to remove non-existent role from alias - /usr/local/bin/expect no prompts"
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -d 1.com -A a588 -R rNoExist -x -y " -r
    /usr/local/bin/expect remove_aliasrole.exp | tee 588_t1.tmp
	[ ${PIPESTATUS[0]} -eq 0 ] && {
        # Removed role from alias when we should not have
        echo "Remove non-existent role rNoExist from alias a588 succeeded but should not have" >> $OUTFILE
    }

    # try to remove a valid role not in the alias, from the alias
    echo "Test 2: Try to remove valid role (but not in alias) from alias - /usr/local/bin/expect success with a warning and no role removed"
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -m alias -d 1.com -A a588 -R r588c -x -y " -r
    /usr/local/bin/expect remove_aliasrole.exp | tee 588_t2.tmp
	[ ${PIPESTATUS[0]} -eq 0 ] || {
        # Remove not-in-alias role from alias should succeed, but with a warning
        echo "Remove valid role r588c from alias a588 returned an error but should not have" >> $OUTFILE
    }

    # return 0 and let tc_postcon identify errors
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    rc=0

    grep -i "ERROR : [rNoExist] does not exist as a role in domain [1.com]." 588_t1.tmp && { 
	echo "Test 1: Could not find ERROR : [rNoExist] does not exist as a role in domain [1.com]. message in test output" >> $OUTFILE; }
    tr -d '\r\n' < 588_t2.tmp | grep -i "WARNING : modifyCOMalias: Role [r588c] does not exist in alias [a588] in domain [1.com] - ignored." && {
	echo "Test 2: Could not find WARNING : modifyCOMalias: Role [r588c] does not exist in alias [a588] in domain [1.com] - ignored." >> $OUTFILE; 
	}

    # report on any failed removal attempts
    [[ -s $OUTFILE ]] && {
        echo "Some remove role from alias attempts erroneously succeeded:"
        cat $OUTFILE
        return 1
    }

	# Check that the desired alias is still in the domain
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_alias.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 1.com" -r
    if /usr/local/bin/expect list_alias.exp > alias_lst.tmp ; then
		# Lose the ^Ms, and the line which says there are no aliases.  The latter was not
		# done on the prelst, because we want to know if that one *does* contain the string!
		tr -d '\015' < alias_lst.tmp | sed '/No aliases found for domain/d' > alias_postlst.tmp

		# Got alias list - now check whether entry has been left
		diff alias_prelst.tmp alias_postlst.tmp || {
			echo "Pre-test alias list is not same as post-test list" 
			echo "Pre-test list is:"
			cat alias_prelst.tmp
			echo "Post-test list is:"
			cat alias_postlst.tmp
			echo "End of list"
			rc=$(expr $rc + 4)
		}
	else
        # Failed to list aliasses
        echo "Failed to list aliasses in domain - rc $?"
		rc=$(expr $rc + 2)
	fi

	# Check that the role list is unchanged for the alias
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o list_aliasrole.exp -c "$LDAP_BIN/manage_COM.bsh -l alias -d 1.com -A a588" -r
    if /usr/local/bin/expect list_aliasrole.exp > aliasrole_lst.tmp ; then
		# Lose the ^Ms
		tr -d '\015' < aliasrole_lst.tmp > aliasrole_postlst.tmp

		# Got list of roles in the alias - now check whether lists are same
		diff aliasrole_prelst.tmp aliasrole_postlst.tmp || {
			echo "Pre-test role list in alias a588 is not same as post-test list" 
			echo "Pre-test list is:"
			cat aliasrole_prelst.tmp
			echo "Post-test list is:"
			cat aliasrole_postlst.tmp
			echo "End of list"
			rc=$(expr $rc + 16)
		}
	else
        # Failed to list aliasses
        echo "Failed to list roles in alias in domain - rc $?"
		rc=$(expr $rc + 8)
	fi

    return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    rc=0

	# Remove roles
        ${AT_BIN}/con_ex.bsh -d 588_remove_role.in.tmp -o 588_expect.exp -c "$LDAP_BIN/manage_COM.bsh -r role -d 1.com  " -r
        /usr/local/bin/expect 588_expect.exp  || {
                echo "Could not delete role added to default domain - FAIL"
                return 1
        }

    # remove the generated working files
    rm -f *.tmp *.exp || {
        echo "Failed to remove the generated working files"
		rc=$(expr $rc + 2)
    }

    return $rc

}
