#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 06/09/12	xgeohar		Initial version
# 03/10/12	xbahzam		debug

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

TEST_DOMAIN="2.com"
TEST_ROLE=""

# /usr/local/bin/expect template and working files
EXPECT_TMPLT="363_add_role.in"
EXPECT_WRKNG=${EXPECT_TMPLT}.tmp

OUTFILE="/tmp/tcid363.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	
	
	

	

	# Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
	[[ ` ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
		echo "${CONFIG} contains more than 8 domains - harness will timeout"
		return 1
	}

	

    # Replace PASSWD with the correct credentials
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
			-e "s/TESTROLE/$TEST_ROLE/" \
			-e "s/TESTDOM/$TEST_DOMAIN/" $ii > $ii.tmp || {
			echo "Failed to replace LDAP superuser password holder in /usr/local/bin/expect input file $ii"
			return 1
		}
    done

    

	# If 2.com doesn't exist, create it.
	LDAP_DOMAIN_EXISTS $G_DOMAIN_NAME_2 || {
		LDAP_CREATE_DOMAIN_ON_OSS2 $G_DOMAIN_NAME_2 || { echo "ERROR: Failed to create domain $G_DOMAIN_NAME_2" ; return 1; }
	}

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	>$OUTFILE

	# Set up invalid domain list
	cat > invdoms.tmp <<\EOF
b#dr%e
2abc

name with space
EOF

	# Note that an empty domain name is treated as though you had not specified one.

	OIFS=$IFS
	IFS=""
	i=1

	while read TEST_ROLE; do

		IFS=$OIFS

		# add bad role to domain
		echo "Test $i: add invalid role [${TEST_ROLE}] to domain ${TEST_DOMAIN}- supply domain"
		${AT_BIN}/con_ex.bsh -d ${EXPECT_WRKNG} -o 363_expect.exp -c "$LDAP_BIN/manage_COM.bsh -a role -d ${TEST_DOMAIN} -R ${TEST_ROLE} -y " -r
		/usr/local/bin/expect 363_expect.exp && {
			# Succeeded adding bad role to domain
			echo "Add bad role [${TEST_ROLE}] to domain succeeded - rc $? - FAIL" >> $OUTFILE
		}

		IFS=""
		((i=i+1))

	done < invdoms.tmp

	# reset IFS to its original value
	IFS=$OIFS

	# return 0 and let tc_postcon identify errors
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	rc=0

	CONSOLE_OUTPUT_CONTAINS "ERROR : Invalid characters in role name list." || { 
								echo "NOT FOUND- ERROR : Invalid characters in role name list." >> $OUTFILE
								return 1
	}

	# report on any failed add role attempts
	[[ -s $OUTFILE ]] && {
		echo "Some add role attempts failed:"
		cat $OUTFILE
		rc=2
	}

	return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rc=0

    

	# remove the generated working files
	rm -f *tmp *exp ${EXPECT_WRKNG} $OUTFILE || {
		echo "Failed to remove the generated working files"
		return 1
	}

	return $rc

}
