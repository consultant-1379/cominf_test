#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 24-08-12	xgeohar		Initial version and review comments

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

TEST_DOMAIN="2.com"
LDAP_SERVER=""
LDAP_SERVER_2=""
LDAP_SERVER_3="a.b.c.d"					# invalid address
LDAP_SERVER_4="1.2.3.4"					# non-existent server

OUTFILE="/tmp/tcid253.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	
	
	

	

	# Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
	[[ ` ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
		echo "${CONFIG} contains more than 8 domains - harness will timeout"
		return 1
	}

	

	

	

	LDAP_SERVER=$(getent hosts om_serv_master | awk '{print $1}' | tail -1)
	if [ -z ${LDAP_SERVER} ]; then
		echo "Error - unable to determine ip of om_serv_master"
		return 1
	fi

    # Replace parameters with the correct credentials in /usr/local/bin/expect file
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
            -e "s/LDAPSERVER/$LDAP_SERVER/g" \
            -e "s/TSTDOM/$TEST_DOMAIN/g" $ii > $ii.tmp || {
			echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
			return 1
		}
    done

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	>$OUTFILE

	LDAP_SERVER=$(getent hosts om_serv_master | awk '{print $1}' | tail -1)
	if [ -z ${LDAP_SERVER} ]; then
		echo "Error - unable to determine ip of om_serv_master"
		return 1
	fi
	LDAP_SERVER_2=$(getent hosts om_serv_slave | awk '{print $1}' | tail -1)
	if [ -z ${LDAP_SERVER_2} ]; then
		echo "Error - unable to determine ip of om_serv_slave"
		return 1
	fi

	echo "Test 1: add server to user profile"
	${AT_BIN}/con_ex.bsh -d 253_serv.add.in.tmp -o 253_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN} " -r
	/usr/local/bin/expect 253_expect.exp && {
		# adding server to user profile failed
		echo "Test 1:Attempt to add server to user profile failed - FAIL" >> $OUTFILE
	}

	echo "Test 2: add same server to user profile"
	${AT_BIN}/con_ex.bsh -d 253_serv.add.in.tmp -o 253_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN} " -r
	/usr/local/bin/expect 253_expect.exp && {
		# adding existing server to user profile failed - should just ignore
		echo "Test 2:Attempt to add existing server to user profile failed - FAIL" >> $OUTFILE
	}

	# replace the /usr/local/bin/expect template holders with 2 servers
    sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
        -e "s/^LDAPSERVER/$LDAP_SERVER,$LDAP_SERVER_2/g" \
        -e "s/to \.LDAPSERVER/to \.$LDAP_SERVER $LDAP_SERVER_2/g" \
        -e "s/TSTDOM/$TEST_DOMAIN/g" 253_serv.add.in > 253_serv.add.in.tmp || {
		echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
		return 1
		}

	echo "Test 3: add second server to user profile"
	${AT_BIN}/con_ex.bsh -d 253_serv.add.in.tmp -o 253_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN} " -r
	/usr/local/bin/expect 253_expect.exp && {
		# adding second server to user profile failed
		echo "Test 3:Attempt to add second server to user profile failed - FAIL" >> $OUTFILE
	}

	# replace the /usr/local/bin/expect template holders with 3 servers
    sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
        -e "s/^LDAPSERVER/$LDAP_SERVER,$LDAP_SERVER_2,$LDAP_SERVER/g" \
        -e "s/to \.LDAPSERVER/to \.$LDAP_SERVER $LDAP_SERVER_2 $LDAP_SERVER/g" \
        -e "s/TSTDOM/$TEST_DOMAIN/g" 253_serv.add.in > 253_serv.add.in.tmp || {
		echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
		return 1
		}

	echo "Test 4: try and add a third server to user profile - should fail"
	${AT_BIN}/con_ex.bsh -d 253_serv.add.in.tmp -o 253_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN} " -r
	/usr/local/bin/expect 253_expect.exp && {
		# adding third server to user profile succeeded
		echo "Test 4:Attempt to add third server to user profile succeeded - FAIL" >> $OUTFILE
	}

	# replace the /usr/local/bin/expect template holders with server with invalid IP address
    sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
        -e "s/^LDAPSERVER/$LDAP_SERVER_3/g" \
        -e "s/to \.LDAPSERVER/to \.$LDAP_SERVER_3/g" \
        -e "s/TSTDOM/$TEST_DOMAIN/g" 253_serv.add.in > 253_serv.add.in.tmp || {
		echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
		return 1
		}

	echo "Test 5: try to add a server with invalid Ip address"
	${AT_BIN}/con_ex.bsh -d 253_serv.add.in.tmp -o 253_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN} " -r
	/usr/local/bin/expect 253_expect.exp && {
		# adding third server to user profile succeeded
		echo "Test 5:Attempt to add third server to user profile succeeded - FAIL" >> $OUTFILE
	}

	# replace the /usr/local/bin/expect template holders with non-existent server 
    sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
        -e "s/^LDAPSERVER/$LDAP_SERVER_4/g" \
        -e "s/to \.LDAPSERVER/to \.$LDAP_SERVER_4/g" \
        -e "s/TSTDOM/$TEST_DOMAIN/g" 253_serv.add.in > 253_serv.add.in.tmp || {
		echo "Failed to replace /usr/local/bin/expect parameter holders in /usr/local/bin/expect input file $ii"
		return 1
		}

	echo "Test 6: try to add a non-existent server"
	${AT_BIN}/con_ex.bsh -d 253_serv.add.in.tmp -o 253_expect.exp -c "$LDAP_BIN/set_server_list.bsh -s -d ${TEST_DOMAIN} " -r
	/usr/local/bin/expect 253_expect.exp && {
		# adding third server to user profile succeeded
		echo "Test 6:Attempt to add third server to user profile succeeded - FAIL" >> $OUTFILE
	}


	# return 0 and let tc_postcon report errors
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	rc=0

	# report on any failed server add
	[[ -s $OUTFILE ]] && {
		echo "Server add attempt was unexpected:"
		cat $OUTFILE
		return 1
	}
	
	LDAP_SERVER=$(getent hosts om_serv_master | awk '{print $1}' | tail -1)
	if [ -z ${LDAP_SERVER} ]; then
		echo "Error - unable to determine ip of om_serv_master"
		return 1
	fi
	LDAP_SERVER_2=$(getent hosts om_serv_slave | awk '{print $1}' | tail -1)
	if [ -z ${LDAP_SERVER_2} ]; then
		echo "Error - unable to determine ip of om_serv_slave"
		rc=2
	fi

	# list the servers added to test domain and /usr/local/bin/expect both test servers
	echo "List the servers set on the test domain"
	/usr/bin/ldapsearch -D 'cn=Directory Manager' -w $LDAP_SUPERUSER_PASSWD -b cn=default,ou=profile,dc=1,dc=com objectclass=* defaultServerList | egrep "$LDAP_SERVER|$LDAP_SERVER_2" || {
		# List servers added to test domain failed
		echo "Could not find servers added to test domain - FAIL" 
		rc=3
	}

	return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	rc=0

	
	

	# remove the generated /usr/local/bin/expect files
	rm -f *tmp *exp *.tmp $OUTFILE || {
		echo "Failed to remove the generated working files"
		return 1
	}

	return $rc

}
