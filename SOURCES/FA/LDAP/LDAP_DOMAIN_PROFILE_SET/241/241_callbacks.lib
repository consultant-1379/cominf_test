#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAPSEARCH=/usr/bin/ldapsearch
LDAPS_PORT=636
LDAP_SERVER=omsrvm
LDAP_SERVER_2=omsrvs


OUTFILE="/tmp/tcid241.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
		LDAP_SERVER_UP || {
		echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	>$OUTFILE

	

	# make a secure connection to LDAP server
	echo "Test 1: make a secure connection to ${LDAP_SERVER}"
	${LDAPSEARCH} -h ${LDAP_SERVER} -p ${LDAPS_PORT} -Z -X -b "" -s base "objectclass=*" namingcontexts >/dev/null 2>&1 || {
		echo "Unable to make a secure LDAP connection to [${LDAP_SERVER}]." >>$OUTFILE
	}

	# make a secure connection to other LDAP server
	echo "Test 2: make a secure connection to ${LDAP_SERVER_2}"
	${LDAPSEARCH} -h ${LDAP_SERVER_2} -p ${LDAPS_PORT} -Z -X -b "" -s base "objectclass=*" namingcontexts >/dev/null 2>&1 || {
		echo "Unable to make a secure LDAP connection to [${LDAP_SERVER_2}]." >>$OUTFILE
	}

	# return 0 and let tc_postcon report errors
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# report on any failed server access
	[[ -s $OUTFILE ]] && {
		echo "Server access attempt was unexpected:"
		cat $OUTFILE
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	return 0

}
