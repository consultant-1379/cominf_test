#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 2012-06-06	xsimrea	Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

LDAP_BIN="/ericsson/sdee/bin"

CONFIG="/ericsson/sdee/ldap_domain_settings/"

TEST_DOMAIN="not_there.com"
TEST_ALIAS="tstalias"
TEST_ROLE="tstrole379"
OUTFILE="tmpout.tmp"

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

    
    
    

   

    # Ensure the enviornment does not exceed 8 domains in order to avoid timeout by the harness framework
    [[ `ls /ericsson/sdee/ldap_domain_settings/ | wc -l ` -ge 9 ]] && {
        echo "${CONFIG} contains more than 8 domains - harness will timeout"
        return 4
    }

    

    # Replace PASSWD and other fields in input file(s) with the correct credentials or data
    for ii in *.in; do
        sed -e "s/^PASSWD$/$LDAP_SUPERUSER_PASSWD/" \
            -e "s/TESTUSER/$OSS_USER/" \
            -e "s/TESTALIAS/$TEST_ALIAS/" \
            -e "s/TESTROLE/$TEST_ROLE/" \
            -e "s/TESTDOM/$TEST_DOMAIN/" $ii > $ii.tmp || {
            echo "Failed to replace LDAP superuser password holder etc in /usr/local/bin/expect input file $ii, rc $?"
            return 6
        }
    done

    return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

    LDAP_SERVER_UP || {
        echo "LDAP is not running. LDAP_SERVER_UP returned $?" 
        return 1
    }

    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

    >$OUTFILE

    # remove alias from specified non-existent domain
    echo "Test 1: Remove alias from non-existent ${TEST_DOMAIN} domain - supply domain and alias"
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o add_alias.exp -c "$LDAP_BIN/manage_COM.bsh -r role -d ${TEST_DOMAIN} -A ${TEST_ALIAS} -y " -r 
	/usr/local/bin/expect add_alias.exp && {
	# Failed to add alias
        echo "somehow Add alias ${TEST_ALIAS} for role ${TEST_ROLE} to ${TEST_DOMAIN} domain succeded - rc $?"
		return 8
    }
	

    # return 0 and let tc_postcon identify errors
    return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    rc=0
	
	CONSOLE_OUTPUT_CONTAINS "ERROR : checkOptionUsage: Domain [not_there.com] does not exist in LDAP." || { 
								echo "console output did not conatain message: ERROR : checkOptionUsage: Domain [not_there.com] does not exist in LDAP."
								rc=2
	}
    
    return $rc

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    rc=0
	# remove the test role that we added in setup
    ${AT_BIN}/con_ex.bsh -d justpasswd.in.tmp -o remove_role.exp -c "$LDAP_BIN/manage_COM.bsh -r role -R ${TEST_ROLE} -d ${TEST_DOMAIN}  -y " -r
    /usr/local/bin/expect remove_role.exp && {
        # Failed to remove role
        echo "Somehow remove role ${TEST_ROLE} from non existent ${TEST_DOMAIN}  domain name succeded - rc $?"
		return $?
    }
    # remove the generated working files
    rm -f *.tmp *.exp || {
        echo "Failed to remove the generated working files"
		return $?
    }

    return $rc

}
