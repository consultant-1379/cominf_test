#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

SMRS_PROPERTIES=/etc/opt/ericsson/nms_bismrs_mc/bismrs.properties

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

        . ${SMRS_PROPERTIES}
        . ${G_SMRSOSSETCDIR}/smrs_config
        . ${AT_LIB}/tst_SMRS.lib
        [ -z $SMRS_MASTER_IP ] && {
                echo "SMRS_Master is not configured"
                return 1
        }
        [ -z $NEDSS_TRAFFIC_IP ] && {
                echo "NEDSS is not configured"
                return 2
       }
	slave_count=${#SMRS_SLAVE_SERVICE_NAME[@]}
        [ $slave_count = 1 ] && {

                echo "ERROR Only one SLAVE SERVICE is present"
                return 3
        }
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	. ${SMRS_PROPERTIES}
	#Without -s option
        $G_SMRSOSSBINDIR/add_aif.sh -n GRAN -a g1_1414 -p shroot@1 || { 
		echo "Error while adding g1_1414 user" 
		return 4
	}
	#With -s option and valid slave
	$G_SMRSOSSBINDIR/add_aif.sh -n WRAN -a w1_1414 -p shroot@1 -s nedssv4 || {
		echo "Error while adding w1_1414 user to nedssv4" 
		return 5
	}
	#With invalid slave	
	$G_SMRSOSSBINDIR/add_aif.sh -n WRAN -a w2_1414 -p shroot@1 -s nedss | grep "Unable to determine IP for slave service" || return 6

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	
	#checking g1_1414 created on both slaveservices
	#ssh smrs_master grep g1_1414 /etc/shadow| grep LK || return 7 	
	${AT_BIN}/con_ex.bsh -d 1414_pass.in -o 1414_pass.exp -c "ssh nedss grep g1_1414 /etc/shadow| grep LK"  && return 8
	${AT_BIN}/con_ex.bsh -d 1414_pass.in -o 1414_pass.exp -c "ssh nedss grep w1_1414 /etc/shadow| grep LK"  && return 9
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	. ${SMRS_PROPERTIES}
        ${AT_BIN}/con_ex.bsh -d 1414_del1.in -o 1414_del1.exp -c "$G_SMRSOSSBINDIR/configure_smrs.sh delete aif"
        /usr/local/bin/expect 1414_del1.exp || {
                echo "ERROR Failed to delete g1_1414 user"
                return 7
        }
        ${AT_BIN}/con_ex.bsh -d 1414_del2.in -o 1414_del2.exp -c "$G_SMRSOSSBINDIR/configure_smrs.sh delete aif"
        /usr/local/bin/expect 1414_del2.exp || {
                echo "ERROR Failed to delete w1_1414 user"
                return 8
        }
	return 0

}
