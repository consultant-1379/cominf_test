#!/bin/bash

# TEST CASE SPEC FILE
# This file is generated/updated using the test framework web interface.
# Manual updates on test servers are lost when the test package is re-installed.
#
# Last modified: Monday 16th of December 2013 10:52:05
#

# These settings must be in BASH script format, they are sourced by other scripts.
SPEC_FA_NAME="SOLARIS10SMRS"
SPEC_UC_NAME="SOLARIS10SMRS_Auto_Integration_Features"
SPEC_TC_ID=1437
SPEC_TC_SLOGAN="add_aif.sh must be non interactive on the \'offline\' SMRS master server "
SPEC_TC_TYPE="FT"
SPEC_TC_POLARITY="positive"
SPEC_TC_PRIORITY="high"
SPEC_TC_AUTOMATED=1
SPEC_TC_DEPENDENT_ONLY=0
SPEC_TC_TIMEOUT=300
SPEC_TC_TEST_PASSCODE=0
SPEC_TC_AUTHOR="xnavema"
SPEC_TC_AUTOMATOR="xnavema"
# this parameter is not interpreted by harness
SPEC_TC_DISABLED=0

# Please do not remove the comment lines below.
# They are used as section locators by the test harness.

# BEGIN_PRE_CONDITIONS
#Before completing the test, ensure that all 'offline' NEDSS Servers have been added
#<PATH Under "Verification Specification for Cominf Feature Test for 14.0":Bi-directional SMRS Initial Installation/Adding Auto Integration Feature Users>
# END_PRE_CONDITIONS


# BEGIN_MANUAL_STEPS
#Perform a failover from the 'online' SMRS Master Server to the 'offline' server
#
#cd /opt/ericsson/nms_bismrs_mc/bin on the OSS Master
#
#add_aif.sh script must be run non-interactively from the command line with no prompts at all. 
#****As we need to test that the add_aif.sh script can be run non-interactively, don’t add a user as specified in the documentation with the configure_smrs.sh script but execute the add_aif script on its own.
#
#Each of these return codes need to be tested. 
#
#Return 0 – Success
#Return 1 – Fail
#Return 2 – Userid Already exists
#Return 3 – Userid not valid type
#Return 4 – Password not valid
#Return 5 – Group not valid
#Return 6 – Slave name not valid
#
#
# END_MANUAL_STEPS

# BEGIN_POST_CONDITIONS
#Acceptance Test.
#The add aif script can successfully add a user with a return code of 0 and can also filter out and provide feedback on unsuccessful executions with appropriate return codes.
#
# END_POST_CONDITIONS
