#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result
#Sourcing env file
. /var/tmp/platform_taf/harness/etc/DDC.env

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return $PASS

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

        #BEGIN PRE_CONDITIONS
        # Get Test Parameters
        PASS=0
        FAIL=1
        MYDATE=$(/bin/date +%d%m%y)
        SERV1DIR="/var/ericsson/ddc_data/"$SC1HOST"_TOR/$MYDATE/server"
        SERV2DIR="/var/ericsson/ddc_data/"$SC2HOST"_TOR/$MYDATE/server"

        # DDC Service is running on the SC in question
        $_ECHO "[SC-1] Checking DDC Service"
        #[[ $($_SSH $SC1HOST "$_PS -ef|$_EGREP -i /etc/init.d/ddc|$_GREP -v grep|$_WC -l") != 1 ]] && return $FAIL
        $_ECHO "[SC-2] Checking DDC Service"
        #[[ $($_SSH $SC2HOST "$_PS -ef|$_EGREP -i /etc/init.d/ddc|$_GREP -v grep|$_WC -l") != 1 ]] && return $FAIL

        #Check the amf_status.log file exists for SC1 and SC2
        if [ -f $SERV1DIR/amf_status.log ] && [ -f $SERV2DIR/amf_status.log ]; then
                $_ECHO "$SERV1DIR/amf_status.log"
                $_ECHO "$SERV2DIR/amf_status.log"
                return $PASS
        else
                $_ECHO "$SERV1DIR/amf_status.log"
                $_ECHO "$SERV2DIR/amf_status.log"
                return $FAIL
        fi

        return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
        MYDATE=$(/bin/date +%d%m%y)
        SERV1DIR="/var/ericsson/ddc_data/"$SC1HOST"_TOR/$MYDATE/server"
        SERV2DIR="/var/ericsson/ddc_data/"$SC2HOST"_TOR/$MYDATE/server"

        #Check the sar.txt file exists for SC1 and SC2
        if [ -f $SERV1DIR/sar.txt ] && [ -f $SERV2DIR/sar.txt ]; then
                VARSC1=$(/bin/awk '/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9] [A|P]M/' $SERV1DIR/sar.txt | wc -l)
                VARSC2=$(/bin/awk '/^[0-9][0-9]:[0-9][0-9]:[0-9][0-9] [A|P]M/' $SERV2DIR/sar.txt | wc -l)
                if [ $VARSC1 -eq 0] && [ $VARSC2 -eq 0 ]; then
                        $_ECHO "Date Format OK: $SERV1DIR/sar.txt"
                        $_ECHO "Date Format OK: $SERV2DIR/sar.txt"
                        return $PASS
                fi
        else
                $_ECHO "Date format in SC is AM/PM format"
                return $FAIL
        fi

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return $PASS

}
