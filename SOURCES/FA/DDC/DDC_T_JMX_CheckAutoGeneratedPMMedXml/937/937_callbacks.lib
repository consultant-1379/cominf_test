#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result
#Sourcing env file
. /var/tmp/platform_taf/harness/etc/DDC.env

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return $PASS

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
        
        # Define constants
        PASS=0
        FAIL=1

        for SC in $SC1HOST $SC2HOST
        do 
           # BEGIN_PRE_CONDITIONS
           # DDC Service is running on the SC in question
           echo "[$SC] Checking DDC Service"
           [[ $($_SSH $SC "$_PS -ef|$_EGREP -i /etc/init.d/ddc | $_GREP -v grep | $_WC -l") != 1 ]] && return $FAIL
     
           # Check if the PMMed JBOSS instance is running - if not exit test
           $_ECHO "[$SC] Checking PMMed JBOSS instances exist"
           [[ $($_SSH $SC "/usr/java/latest/bin/jps -v | $_GREP -i PMMed" | $_WC -l) != 1 ]] && return $FAIL
     
           # Check if the streaming rpm exists on the server.
           $_ECHO "[$SC] Checking Streaming solution ERICpmstreaming_CXP9030306 exists"
           $_SSH $SC "$_RPM -qa | $_GREP ERICpmstreaming_CXP9030306"  
           [ $? -ne 0 ] && $_ECHO "[$SC] Streaming solution does not exist"
        done

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
        
        # Define constants
        PASS=0
        FAIL=1
        JBOSSNATIVEPORT=9999
        JB_LOG_PATH="jboss.server.log.dir="

        # Get Test parameters
        MYDATE=$(/bin/date +%d%m%y)

        for SC in $SC1HOST $SC2HOST
        do
           SCHOST=SC
           JBOSSDIR="/var/ericsson/ddc_data/"$SCHOST"_TOR/$MYDATE/TOR/jboss"
     
           for PID in $($_SSH $SC $_LSOF -i :$JBOSSNATIVEPORT | $_EGREP -i listen | $AWK '$1 ~ /java/ {print $2}') ; do
                   # Get JBoss instance proc string for PMMed
                   PROCSTR=$($_SSH $SC "$_PS -ef | $_EGREP $PID | $_GREP PMMed | $_GREP -v grep")
     
                    for ARG in $($_ECHO $PROCSTR | $_AWK '{print}') ; do
                        if [[ $ARG =~ $JB_LOG_PATH ]] ; then
                            JBLOGLOCATION=$($_ECHO $ARG | $_AWK -F\= '{print $2}')
                        fi
                    done
           done
     
           $_ECHO "[$SC] Chcking $JBLOGLOCATION/metrics.csv exists"
           if [ -f $JBLOGLOCATION/metrics.csv ] ; then
                    $_ECHO "[$SC] Chcking $JBOSSDIR/metrics.csv exists"
                    [ ! -f $JBOSSDIR/metrics.csv ] && return $FAIL 
           else
                    $_ECHO "[$SC] $JBOSSDIR/metrics.csv does not exists"
           fi
        done
        
	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return $PASS

}
