#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result
#Sourcing env file
. /var/tmp/platform_taf/harness/etc/DDC.env

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

        # Define constants
        JBOSSNATIVEPORT=9999
        PASS=0
        FAIL=1

        # BEGIN_PRE_CONDITIONS
        for SC in $SC1HOST 
        do 
           # DDC Service is running on the SC in question
           $_ECHO "[$SC] Checking DDC Service"
           [[ $($_SSH $SC "$_PS -ef|$_EGREP -i /etc/init.d/ddc|$_GREP -v grep |$_WC -l") != 1 ]] && return $FAIL
     
           # Check JBOSS instance exist on the SC in question
           $_ECHO "[$SC] Checking JBOSS instances exist" 
           [[ $($_SSH $SC $_LSOF -i :$JBOSSNATIVEPORT | $_EGREP -i listen | $_AWK '$1 ~ /java/ { print $2 }' | $_WC -l) == 0 ]] && return $FAIL
        done
    
	return $PASS

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
        # Global Variables
        _PS=/bin/ps
        _EGREP=/bin/egrep
        _GREP=/bin/grep
        
        # Define constants
        PASS=0
        FAIL=1
        JBOSSNATIVEPORT=9999
        JB_NODE_NAME="jboss.node.name="

        # Get Test parameters
        MYDATE=$(/bin/date +%d%m%y)

        #===============================================================
        # START of foreach LOOP
        #===============================================================
        for SC in $SC1HOST
        do
            SCHOST=$($_GETENT hosts | $_EGREP -i $SC | $_AWK '{print $2}')
            XMLDIR="/var/ericsson/ddc_data/"$SCHOST"_TOR/$MYDATE/instr"

            #===========================================================
            # Check JBOSS instances are running on SC. If not FAIL, else
            # Stop DDC running on the SC
            #===========================================================
            $_ECHO "[$SC] Checking JBOSS instances exists on server"
            JBOSS_PID_LIST=$($_SSH $SC $_LSOF -i :$JBOSSNATIVEPORT | $_EGREP -i listen | $_AWK '$1 ~ /java/ {print $2}')
            if [[ -z $JBOSS_PID_LIST ]] ; then
                return $FAIL
            else
                $_ECHO "[$SC] Stopping DDC service on server"
                # Stop the DDC service
                $_SSH $SC "/sbin/service ddc stop"
                [ $? -ne 0 ] &&  return $FAIL
            fi

            # List of JBOSS instance names
            JBOSS_NAME_LIST=""

            #===========================================================
            # Aquire teh JBOSS instance name from the PID proc string 
            # and build up the JBOSS_NAME_LIST variable
            #===========================================================
            for PID in $JBOSS_PID_LIST ; do
                # Get JBoss instance proc string
                PROCSTR=$($_SSH $SC "$_PS -ef | $_EGREP $PID | $_GREP -v grep")

                for ARG in $(/bin/echo $PROCSTR | $_AWK '{print}') ; do
                    if [[ $ARG =~ $JB_LOG_PATH ]] ; then
                        # Append JBOSS instance name for VARIABLE JBOSS_NAME_LIST
                        JBOSS_NAME_LIST+=$(/bin/echo $ARG | $_AWK -F\= '{print $2}')
                    fi
                done 
            done

            #===========================================================
            # Remove XML files prior to restarting DDC service
            #===========================================================
            for NAME in JBOSS_NAME_LIST ; do
                $_ECHO "[$SC] Checking app_$NAME.xml exists"
                #if [[ $($_SSH $SC "$_LS -l $XMLDIR/app_$NAME.xml | $_WC -l") == 1 ]] ; then 
                #    $_SSH $SC "$_RM -f $XMLDIR/app_$NAME.xml"
                #fi
            done

            #===========================================================
            # Start DDC service
            #===========================================================
            $_ECHO "[$SC] Starting DDC Service"
            $_SSH $SC "/sbin/service ddc start" 
            [ $? -ne 0 ] && return $FAIL

            #===========================================================
            # Check JBOSS application files have been created
            #===========================================================
            for NAME in JBOSS_NAME_LIST ; do
                $_ECHO "[$SC] Checking app_$NAME.xml created"
                #if [[ $($_SSH $SC "$_LS -l $XMLDIR/app_$NAME.xml | $_WC -l") != 1 ]] ; then
                #   return $FAIL
                #fi
            done
        done
	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return $PASS

}
