#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result
#Sourcing env file
. /var/tmp/platform_taf/harness/etc/DDC.env

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return $PASS

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required
        # Define constants
        JBOSSNATIVEPORT=9999
        PASS=0
        FAIL=1

        # BEGIN_PRE_CONDITIONS
        # DDC Service is running on the SC in question
        $_ECHO "[SC-1] Checking DDC Service"
        #[[ $($_SSH $SC1HOST "$_PS -ef|$_EGREP -i /etc/init.d/ddc|$_GREP -v grep|$_WC -l") != 1 ]] && return $FAIL
        $_ECHO "[SC-2] Checking DDC Service"
        #[[ $($_SSH $SC2HOST "$_PS -ef|$_EGREP -i /etc/init.d/ddc|$_GREP -v grep|$_WC -l") != 1 ]] && return $FAIL

        # Check JBOSS instance exist on the SC in question
        $_ECHO "[SC-1] Checking JBOSS instances exist"
        [[ $($_SSH $SC1HOST $_LSOF -i :$JBOSSNATIVEPORT | $_EGREP -i listen | $_AWK '$1 ~ /java/ { print $2 }' | $_WC -l) == 0 ]] && return $FAIL
        $_ECHO "[SC-2] Checking JBOSS instances exist"
        [[ $($_SSH $SC2HOST $_LSOF -i :$JBOSSNATIVEPORT | $_EGREP -i listen | $_AWK '$1 ~ /java/ { print $2 }' | $_WC -l) == 0 ]] && return $FAIL

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required
        # Define constants 
        PASS=0
        FAIL=1
        JBOSSNATIVEPORT=9999
        JB_NODE_NAME="jboss.node.name="

        # Get Test parameters
        MYDATE=$(/bin/date +%d%m%y)
        XML1DIR="/var/ericsson/ddc_data/"$SC1HOST"_TOR/$MYDATE/instr"
        XML2DIR="/var/ericsson/ddc_data/"$SC2HOST"_TOR/$MYDATE/instr"

        
        for PID in $(/usr/bin/ssh sc-1 /usr/sbin/lsof -i :$JBOSSNATIVEPORT | /bin/egrep -i listen | /bin/awk '$1 ~ /java/ {print $2}') ; do 
                # Get JBoss instance proc string
                PROCSTR=$($_SSH $SC1HOST "$_PS -ef | $_EGREP $PID | $_GREP -v grep")
                
                for ARG in $($_ECHO $PROCSTR | $_AWK '{print}') ; do 
                    if [[ $ARG =~ $JB_NODE_NAME ]] ; then
                        JBINSTANCENAMETMP=$($_ECHO $ARG | $_AWK -F\= '{print $2}')
                        JBINSTANCENAME=${JBINSTANCENAMETMP//_jee_instance/}
                    fi
                done

                $_ECHO "[SC-1] Chcking $XML1DIR/$JBINSTANCENAME xml exists"
                if [ -f $XML1DIR/generic_$JBINSTANCENAME.xml ] ; then 
                    $_ECHO "generic_$JBINSTANCENAME.xml exists for SC-1" 
                else
                    $_ECHO "generic_$JBINSTANCENAME.xml does not exist for SC-1"
                    return $FAIL
                fi
                
        done


        for PID in $($_SSH $SC2HOST $_LSOF -i :$JBOSSNATIVEPORT | $_EGREP -i listen | $_AWK '$1 ~ /java/ {print $2}') ; do
                # Get JBoss instance proc string
                PROCSTR=$($_SSH $SC2HOST "$_PS -ef | $_EGREP $PID | $_GREP -v grep")

                for ARG in $($_ECHO $PROCSTR | $_AWK '{print}') ; do
                    if [[ $ARG =~ $JB_NODE_NAME ]] ; then
                        JBINSTANCENAMETMP=$($_ECHO $ARG | $_AWK -F\= '{print $2}')
                        JBINSTANCENAME=${JBINSTANCENAMETMP//_jee_instance/}
                    fi
                done

                $_ECHO "[SC-2] Chcking $XML2DIR/$JBINSTANCENAME xml exists"
                if [ -f $XML2DIR/generic_$JBINSTANCENAME.xml ] ; then
                    $_ECHO "generic_$JBINSTANCENAME.xml exists for SC-2"
                else
                    $_ECHO "generic_$JBINSTANCENAME.xml does not exist SC-2"
                    return $FAIL
                fi

        done

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required

	return $PASS

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return $PASS

}
