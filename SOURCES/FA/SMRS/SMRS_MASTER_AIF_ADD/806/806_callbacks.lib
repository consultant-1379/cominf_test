#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to cleanup after TC

# All callbacks must PASS for a TC PASS result

# NEED TO SORT OT GRAN SUPPORT
#userlist=(aifuser1:LRAN aifuser2:GRAN aifuser3:WRAN)
userlist=(aifuser1:LRAN aifuser3:WRAN)
SSH_SCRIPT=/opt/ericsson/nms_bismrs_mc/bin/ssh_setup.sh

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	for user in ${userlist[@]}
	do
		u=$(echo $user | awk -F: '{print $1}')
		n=$(echo $user | awk -F: '{print $2}')
		sed -e "s/__NET_TYPE__/$n/g" -e "s/__USERNAME__/$u/g" in.template > $u.in

		ssh smrs_master "grep -w $u /etc/passwd" > /dev/null && {
			echo user $u exists on smrs_master
			return 1
		}

	done

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	cmd="/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add aif"

	for user in ${userlist[@]}
    do
		u=$(echo $user | awk -F: '{print $1}')
		n=$(echo $user | awk -F: '{print $2}')

		${AT_BIN}/con_ex.bsh -d $u.in -o $u.exp -c "${cmd}" || {
			echo "Failed to create expect script, rc $?"; return 2
		}

		/usr/local/bin/expect $u.exp || {
			echo failed to add aifuser $u, $n
			return 3
		}
	done

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	for user in ${userlist[@]}
    do
		u=$(echo $user | awk -F: '{print $1}')
		
		# make sure user has sftp access
		CHECK_SFTP_AIF smrs_master $u passw0rd || {
			echo $u unable to sftp to smrs_master
			return 4
		}

		#make sure user cannot ssh into smrs master
		$SSH_SCRIPT "ssh $u@smrs_master" ls passw0rd && {
			echo $u is able to ssh to smrs_master
			return 5
		}
	done

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete
	# Change return code as required

	return 0

}
