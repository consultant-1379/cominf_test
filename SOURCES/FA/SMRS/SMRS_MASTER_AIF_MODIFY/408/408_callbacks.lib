#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 13/09/2012	xsimrea		Run "modify_aif.bsh -a aif_user -p valid_password" as nmsadm

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup()		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

# global Variables for this test - must be same as in "modify as root" test
AIFUSR=saraif
AIFPASSWD1=shroot12
AIFPASSWD2=passw0rd
AIFPASSWD3=secret01

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0	failure
 
tc_precon() {

	# User created in "modify as root" test, and password left as $AIFPASSWD2

	# Get NEDSS IP value for this slave
	NEDSS_IP=$(GET_SLAVE_SUBENTRY nedssv4 NEDSS_IP) || { echo "Problem, $NEDSS_IP, rc $?"; return 4; }

	# Check that AIF user exists
	CHECK_SFTP_AIF smrs_master $AIFUSR $AIFPASSWD1 $NEDSS_IP || { echo "Cannot SFTP as AIF user $AIFUSR to smrs_master/nedss, error $SFTP_AIF_ERR, rc $?"; return 3; }

	# Check that we can log in to smrsuser on smrs_master as nmsadm without a password
	cat > tstlogin.tmp <<EOF
ssword
\003
EOF
	${AT_BIN}/con_ex.bsh -d tstlogin.in -o tstlogin.exp -c "su nmsadm -c \"ssh smrsuser@smrs_master echo Simon Test\"" || {
		echo "Failed to create nms login expect script, rc $?"; return 4
	}
	/usr/local/bin/expect tstlogin.exp > tstout.tmp
	grep "Simon Test" tstout.tmp || {
			echo "Failed to log in to smrsuser as nmsadm"; return 5
	}


	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE	success
# != SPEC_TC_TEST_PASSCODE	failure
 
tc_test() {
	# Mark output of smlog so can see if done restart
	SMLOG_MARK_STATUS

	sleep 2 # avoid log clashes

	# Run modify command to change password as nmsadm user
	su - nmsadm -c "/opt/ericsson/nms_bismrs_mc/bin/modify_aif.sh -a $AIFUSR -p $AIFPASSWD3" || { echo "Failed to modify password for AIF user $AIFUSR, rc $?"; return 3; }
	
	# Prove BI_SMRS_MC has NOT been restarted 
	SMLOG_SEARCH_FROM_MARK "SMRS reconfig"
	retval=$?
	[ $retval -ne 1 ] && { echo "Either smlog search failed or bismsrs restarted $retval"; return 4; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0	failure

tc_postcon() {

	# Get NEDSS IP value for this slave
	NEDSS_IP=$(GET_SLAVE_SUBENTRY nedssv4 NEDSS_IP) || { echo "Problem, $NEDSS_IP, rc $?"; return 4; }

	# make sure we can sftp with the new password
	CHECK_SFTP_AIF smrs_master $AIFUSR $AIFPASSWD3 $NEDSS_IP || { echo "Cannot SFTP as AIF user $AIFUSR to smrs_master/nedss with new password, error $SFTP_AIF_ERR, rc $?"; return 5; }

	# make sure we cannot sftp with the old passwords
	CHECK_SFTP_AIF smrs_master $AIFUSR $AIFPASSWD1 $NEDSS_IP && { echo "Can still SFTP as AIF user $AIFUSR to smrs_master/nedss with old password"; return 6; }
	#CHECK_SFTP_AIF smrs_master $AIFUSR $AIFPASSWD1 $NEDSS_IP && { echo "Can still SFTP as AIF user $AIFUSR to smrs_master/nedss with original password"; return 7; }

	# Check for errors or warnings
	# Check contents of /var/opt/ericsson/log/modify_aif.sh_log_<date>
	# Assume the last one that matches the pattern is our file
	filename=$(ls -rt /var/opt/ericsson/log/modify_aif.sh_log_* | tail -1)
	grep -i error $filename
	retval=$?
	[ $retval -ne 1 ] && { echo "Error in modify_aif log, see above $retval"; return 19; }
	# Don't want warnings except the ones about permanently added ip address to
	# known hosts
	grep -v "Warning: Permanently added" $filename | grep -v "WARNING Failed to lock .* account" | grep -i warning
	retval=$?
	[ $retval -ne 1 ] && { echo "Warning in modify_aif log, see above $retval"; return 20; }

	POSIX_USER_EXISTS $AIFUSR && { echo "User should not exist on OSS"; return 21; }

	CONSOLE_OUTPUT_CONTAINS "Attempting a cold restart of BI_SMRS_MC" && { echo "Log indicates unwanted restart of BI_SMRS"; return 22; }

	# Check that nmsadm owns, and can write to, smrs_config file
	smrs_config=/etc/opt/ericsson/nms_bismrs_mc/smrs_config
	smrs_config_owner=$(ls -l $smrs_config | awk '{print $3}')
	[ "$smrs_config_owner" = "nmsadm" ] || { echo "User nmsadm does not own $smrs_config - is owned by $smrs_config_owner"; return 23; }
	su nmsadm -c "test -w $smrs_config" || { echo "User nmsadm cannot write to $smrs_config file"; return 24; }

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0	failure

tc_cleanup() {

	return 0

}
