#!/bin/bash
#################################################################################
#
#
#	   COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#	   The copyright to the document(s) herein is the property of
#	   Ericsson Radio Systems AB, Sweden.
#
#	   The document(s) may be used and/or copied only with the written
#	   permission from Ericsson Radio Systems AB or in accordance with
#	   the terms and conditions stipulated in the agreement/contract
#	   under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 18/09/2012	xsimrea		Run "modify_aif.sh -a aif_user" as root and expect failure

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup()		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

# global Variables for this test
AIFUSR=saraif
AIFPASSWD1=shroot12
AIFPASSWD2=passw0rd
AIFPASSWD3=secret01

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0	failure
 
tc_precon() {

	grep smrs_master "/etc/inet/hosts" || { echo "No smrs_master created"; return 1; }

	# Ensure that AIF user password is known
	/opt/ericsson/nms_bismrs_mc/bin/modify_aif.sh -a $AIFUSR -p $AIFPASSWD1 || { echo "Failed to initialise password for AIF user $AIFUSR, rc $?"; return 3; }

	# Check that we can connect to AIF user
	#CHECK_SFTP_AIF smrs_master $AIFUSR $AIFPASSWD1 || { echo "Cannot SFTP as AIF user $AIFUSR to smrs_master, error $SFTP_AIF_ERR, rc $?"; return 3; }	# TODO add NEDSS here as 4th parm?

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#	SPEC_TC_TEST_PASSCODE	success
# != SPEC_TC_TEST_PASSCODE	failure
 
tc_test() {
	# Run modify command without password parameter
	/opt/ericsson/nms_bismrs_mc/bin/modify_aif.sh -a $AIFUSR && { echo "Erroneously succeeded in modifying password for AIF user $AIFUSR"; return 3; }
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0	failure

tc_postcon() {


	# make sure we can still sftp with the old password
	CHECK_SFTP_AIF smrs_master $AIFUSR $AIFPASSWD1 || { echo "Cannot SFTP as AIF user $AIFUSR to smrs_master with old password, error $SFTP_AIF_ERR, rc $?"; return 5; }  # TODO add NEDSS here as 4th parm?

	# make sure we cannot sftp with the new password
	CHECK_SFTP_AIF smrs_master $AIFUSR $AIFPASSWD2 && { echo "Problem, can now SFTP as AIF user $AIFUSR to smrs_master with new password"; return 6; }	# TODO add NEDSS here as 4th parm?

	# Check whether we do get an error message
	# Check contents of /var/opt/ericsson/log/modify_aif.sh_log_<date>
	# Assume the last one that matches the pattern is our file
	filename=$(ls -rt /var/opt/ericsson/log/modify_aif.sh_log_* | tail -1)
	grep -i error $filename || {
		echo "Problem, no errors in log $filename"
		echo "Message log at time $(date) contains:"
		cat $filename
		echo "End of log"
		: return 19
	}

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0	failure

tc_cleanup() {

	return 0

}
