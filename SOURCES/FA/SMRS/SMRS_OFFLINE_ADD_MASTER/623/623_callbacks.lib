#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


G_DEFAULT_PASSWD=shroot
G_SCRIPTUNDERTEST=configure_smrs.sh
G_SCRIPTDIR=/opt/ericsson/nms_bismrs_mc/bin/
G_LOGDIR=/var/opt/ericsson/log/



# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	#PREPARE_SMRS
	return $?

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	SMRS_MASTER_IS_INSTALLED || { echo "ERROR: SMRS Master is not installed" ; return 1; }
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
tc_test() {
	local filePrefix=addOfflineMaster
	local offlineMasterCfgMaintDuplicate=offline_smrs_master_config.$(hostname).maint.ip
	local offlineMasterCfgTrafficDuplicate=offline_smrs_master_config.$(hostname).traffic.pip

	# Test Duplicate Maintenance IP
	COMMAND_STRING="${G_SCRIPTDIR}/${G_SCRIPTUNDERTEST} add offline_smrs_master -f $offlineMasterCfgMaintDuplicate"

	echo "INFO: testing $COMMAND_STRING" 

	local output
	output=$($COMMAND_STRING < <(echo $G_DEFAULT_PASSWD; echo $G_DEFAULT_PASSWD) 2>/dev/null)
	local cmdStatus=$?
	local grepString="ERROR ONLINE_SMRS_MASTER_MAINT_IP and OFFLINE_SMRS_MASTER_MAINT_IP parameters cannot be the same"
	grep  "$grepString" <<< "$output" > /dev/null
	local grepStatus=$?

	[ $cmdStatus -eq 0 ]  && { echo "ERROR: Command exited with 0 (maint)" ; return 1; }
	[ $grepStatus -eq 0 ] || { echo "ERROR: Error not reported correctly (maint)" ; return 1; }

	# Test Duplicate Traffic IP
	COMMAND_STRING="${G_SCRIPTDIR}/${G_SCRIPTUNDERTEST} add offline_smrs_master -f $offlineMasterCfgTrafficDuplicate"

	echo "INFO: testing $COMMAND_STRING"

	output=$($COMMAND_STRING < <(echo $G_DEFAULT_PASSWD; echo $G_DEFAULT_PASSWD) 2>/dev/null)
	cmdStatus=$?
	grepString="ERROR ONLINE_SMRS_MASTER_TRAFFIC_PIP and OFFLINE_SMRS_MASTER_TRAFFIC_PIP parameters cannot be the same"
	grep  "$grepString" <<< "$output" > /dev/null
	grepStatus=$?

	[ $cmdStatus -eq 0 ]  && { echo "ERROR: Command exited with 0 (traffic)" ; return 1; }
	[ $grepStatus -eq 0 ] || { echo "ERROR: Error not reported correctly (traffic)" ; return 1; }

	echo "INFO: Duplicate IP testing completed ok"
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {
	return 0
}
