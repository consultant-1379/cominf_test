#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################



G_DEFAULT_PASSWD=shroot
G_SCRIPTUNDERTEST=configure_smrs.sh
G_SCRIPTDIR=/opt/ericsson/nms_bismrs_mc/bin/
G_LOGDIR=/var/opt/ericsson/log/


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	# Coded to fail in case TC_AUTOMATED=1 before automation completed
	# Change return code as required

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	SMRS_MASTER_IS_INSTALLED || { echo "ERROR: SMRS Master is not installed"; return 1; }
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	

	filePrefix=addOfflineMaster
	offlineMasterCfg=offline_smrs_master_config.$(hostname)

	# Use here document to generate input file
# ----- START HERE DOCUMENT -----
	cat > ${filePrefix}.in << EOF || { echo "ERROR: failed to make expect template file ${filePrefix}.in" ; return 1; }
What is the root account password of OSS Master*
$G_DEFAULT_PASSWD
What is the root account password of offline SMRS MASTER?
$G_DEFAULT_PASSWD
EOF
# ----- END HERE DOCUMENT -----

	# Generate expect script from input file
	COMMAND_STRING="${G_SCRIPTDIR}/${G_SCRIPTUNDERTEST} add offline_smrs_master -f $offlineMasterCfg"

	${AT_BIN}/con_ex.bsh -d ${filePrefix}.in -o ${filePrefix}.exp -c "$COMMAND_STRING" -r || {
		echo "ERROR: Could not create input file ${filePrefix}.in"
		return 1
	}

	echo "INFO: testing $COMMAND_STRING"
	/usr/local/bin/expect ${filePrefix}.exp > /dev/null 2>&1 || {
		echo "ERROR: Test failed with $?"
		return 1
	}

	[ $(egrep -c "ERROR|WARNING" $(ls -tr $G_LOGDIR/add_offline_master.sh_log* | tail -1)) -eq 0 ] || {
		echo "ERROR: Errors or Warnings found in log file $(ls -tr $G_LOGDIR/add_offline_master.sh_log* | tail -1)" 
		return 1
	}
	echo "INFO: command completed successfully"
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	local offlineMasterMaint=$(OFFLINE_MASTER_MAINT_IP)
	local smrsMasterMaint=$(SMRS_MASTER_MAINT_IP)
	local vip=$(SMRS_MASTER_IP)

	local onlineMasterHostname=$(HA_ONLINE_MASTER_HOSTNAME)
	local offlineMasterHostname=$(HA_OFFLINE_MASTER_HOSTNAME)

	local onlineTrafficIP=$(SMRS_MASTER_TRAFFIC_IP)
	local offlineTrafficIP=$(OFFLINE_MASTER_TRAFFIC_IP)

	# Check OSS to SMRS Masters connectivity is ok
	ssh $vip ls > /dev/null 2>&1              || { 
		echo "ERROR: Failed to ssh from OSS Master to VIP $vip"; return 1; 
	}
	ssh $smrsMasterMaint ls > /dev/null 2>&1    || { 
		echo "ERROR: Failed to ssh from OSS Master to Online Master Maintenance IP $smrsMasterMaint"; return 1; 
	}
	ssh $offlineMasterMaint ls > /dev/null 2>&1 || { 
		echo "ERROR: Failed to ssh from OSS Master to Offline Master Maintenance IP $offlineMasterMaint"; return 1; 
	}
	ssh $onlineTrafficIP ls > /dev/null 2>&1    || { 
		echo "ERROR: Failed to ssh from OSS Master to Online Master Traffic IP $onlineTrafficIP"; return 1; 
	}
	ssh $offlineTrafficIP ls > /dev/null 2>&1   || { 
		echo "ERROR: Failed to ssh from OSS Master to Offline Master Traffic IP $offlineTrafficIP"; return 1; 
	}

	# Check connectivity from Online SMRS Master to Offline SMRS Master
	ssh smrs_master "ssh $offlineMasterMaint ls " > /dev/null 2>&1  || {
		echo "ERROR: Failed to ssh from Online Master to Offline Master Maintenance IP $offlineMasterMaint"; return 1;
	}
	ssh smrs_master "ssh $offlineTrafficIP ls " > /dev/null 2>&1 || {
		echo "ERROR: Failed to ssh from Online Master to Offline Master Traffic IP $offlineTrafficIP"; return 1;
	}


	# Check connectivity from Offline SMRS Master to Online SMRS Master
	ssh $offlineMasterMaint "ssh $vip ls " > /dev/null 2>&1 || {
		echo "ERROR: Failed to ssh from Offline Master to Online Master VIP $vip"; return 1;
	}
	ssh $offlineMasterMaint "ssh $smrsMasterMaint ls " > /dev/null 2>&1 || {
		echo "ERROR: Failed to ssh from Offline Master to Online Master Maintenance IP $smrsMasterMaint"; return 1;
	}

	ssh $offlineTrafficIP "ssh $onlineTrafficIP ls " > /dev/null 2>&1 || {
		echo "ERROR: Failed to ssh from Offline Master to Online Master Traffic IP $onlineTrafficIP"; return 1;
	}

	local output=$(ssh $offlineTrafficIP "crontab -l" 2>/dev/null )
	grep -v \# <<< "$output" | grep ha_failover.sh >/dev/null 2>&1 || { echo "ERROR: no cron entry for ha_failover.sh script"; return 1; }
	grep -v \# <<< "$output" | grep ha_sync.sh >/dev/null 2>&1 ||  { echo "ERROR: no cron entry for ha_synch.sh script"; return 1; }
	# stn_cleanup.sh

	
	local hostEntry=$(grep smrs_master /etc/inet/hosts | awk ' { print $1 } ')
	[ "$hostEntry" = "$vip" ] || { echo "ERROR: OSS Master hosts file entry for SMRS Master does not use VIP address"; return 1; }
	
	hostEntry=$(ssh smrs_master "grep smrs_master /etc/inet/hosts" 2>/dev/null| awk '{ print $1 }' )
	[ "$hostEntry" = "$vip" ] || { echo "ERROR: SMRS Master hosts file entry for SMRS Master does not use VIP address"; return 1; }

	hostEntry=$(ssh $offlineTrafficIP "grep smrs_master /etc/inet/hosts" 2>/dev/null| awk '{ print $1 }' )
	[ "$hostEntry" = "$vip" ] || { echo "ERROR: Offline Master hosts file entry for SMRS Master does not use VIP address"; return 1; }

	

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	
	return 0

}
