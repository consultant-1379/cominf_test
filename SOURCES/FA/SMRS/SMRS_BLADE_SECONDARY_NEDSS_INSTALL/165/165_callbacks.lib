#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 03-08-12     xkalbha   initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {


	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

    # Check if  smrs_master has been already setup
    grep "smrs_master" /etc/inet/hosts >& /dev/null || { echo "Failed to find smrs_master in /etc/inet/hosts on OSS Master"; return 1; }

    #  Check have nedss config file for this OSS master
    name=`hostname`
    filename="2nedss_config.$name" #2nedss_interface_config.ossmaster
    [ -r $filename ] || { echo "NEDSS config $filename does not exist"; return 2; }

	# need to ensure that the nedss has a secondary interface configured
	source 2nedss_config.$(hostname)
	interface_config=2nedss_interface_config.$(hostname)
	scp -o "BatchMode=yes" $interface_config smrs_master:/tmp
	#ssh -o 'BatchMode=yes' smrs_master "scp /tmp/$interface_config $NEDSS_PRIMARY_TRAFFIC_IP:/etc/sysconfig/network-scripts/ifcfg-eth1"
	#ssh -o 'BatchMode=yes' smrs_master "ssh $NEDSS_PRIMARY_TRAFFIC_IP 'ifdown eth1;ifup eth1'"
	#[ $(hostname) == "atrcxb1192" ] && {
	#	ssh -o "BatchMode=yes" smrs_master 'ssh 192.168.0.8 "arping -c 4 -w 20 -s 10.45.201.129 10.45.201.1"'
	#}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
    #Copy to nedss_config.valid correct nedss file 
    name=`hostname`
    filename="2nedss_config.$name" 
    cp $filename "2nedss_config.valid"


	# Add NEDSS command is defined and run

    /opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add nedss -f 2nedss_config.valid

    [ $? -eq 0 ] || { echo main command to add nedss failed; return 1; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {


	# I. check ntp to see if NEDSS gets time from OM primary

	OM_PRIMARY_IP=$(grep "smrs_master" /etc/inet/hosts | awk '{print $1}')
	
	ssh smrs_master
	[ $? -eq 0 ] || { echo ssh to smrs_master failed; return 1; } 

    NEDSS_2ndIP=$(awk -F= '/^NEDSS_TRAFFIC_IP/ {print $2}' 2nedss_config.valid)
   

    ssh smrs_master ssh ${NEDSS_2ndIP} <<EOF

	ntpq -pn 2>/dev/null |awk '\$4 ~ /^u\$/{print \$1}' | grep smrs_master 
	[ \$? -eq 0 ] || { exit 19; }
    exit 0
EOF
    [ $? -eq 0 ] ||  { echo OM Primary was not found in the up stream NTP servers for NEDSS; return 1; }

	# II. checking time by ssh to om primary, NEDSS and then om primary and check times

	# trying to get date on om primary
	
	dateOnPrimaryBegin=$( ssh smrs_master date -u +%d%m%y)
    
    [ $? -eq 0 ] || { echo "ssh to OM Primary to get begin date  failed"; return 1; }

	# trying to get date on nedss

	dateOnNedss=$(ssh smrs_master ssh ${NEDSS_2ndIP} date -u +%d%m%y)

    [ $? -eq 0 ] || { echo "ssh to nedss to get date  failed"; return 1; }
    
    # trying to get date on om primary
	
    dateOnPrimaryEnd=$(ssh smrs_master date -u +%d%m%y)

    [ $? -eq 0 ] || { echo "ssh to OM Primary to get end date  failed"; return 1; }

	# comapring times to see if NTP synchronization works correctly
	[ "${dateOnPrimaryBegin}" -le "${dateOnNedss}" -a "${dateOnNedss}" -le "${dateOnPrimaryEnd}" ] || { echo "NTP synchrinization failure;date on NEDSS was not in synch with that of OM Primary"; return 1; }
	
	# III. Checking NFS mounts

	ssh smrs_master ssh ${NEDSS_2ndIP} mount >> mount.data
	[ $? -eq 0  ] || { echo " running mount command on NEDSS failed"; return 1; }

    
	grep  " /export/GRAN " mount.data
    [ $? -eq 0  ] || { echo " GRAN filesystem check on NEDSS failed"; return 1; }

	
	grep  " /export/WRAN " mount.data
    [ $? -eq 0  ] || { echo " WRAN filesystem check on NEDSS failed"; return 1; }

	grep  " /export/LRAN " mount.data
    [ $? -eq 0  ] || { echo " LRAN filesystem check on NEDSS failed"; return 1; }

	grep  " /export/CORE " mount.data
    [ $? -eq 0  ] || { echo " CORE filesystem check on NEDSS failed"; return 1; }

	#shane
	#ssh smrs_master ssh ${NEDSS_2ndIP}  cat /etc/auto.master | grep auto.smrs 
    #[ $? -eq 0  ] || { echo " auto.master on NEDSS does not point to auto.smrs"; return 1; }
    #
	#exportsNo=$(ssh smrs_master ssh ${NEDSS_2ndIP}  cat /etc/auto.smrs|wc -l)
    #
    #[ $exportsNo -eq 4 ]
    #[ $? -eq 0  ] || { echo " auto.smrs on NEDSS does not seem to have been pupolated correctly"; return 1; }

	# IV. check file system contents on NEDSS to see if the same as OM_Primary

    ssh smrs_master mount | grep /export/GRAN > /tmp/fs_cont_omprimary
	ssh smrs_master ssh ${NEDSS_IP} mount | grep /export/GRAN > /tmp/fs_cont_nedss	

	ssh smrs_master mount | grep /export/WRAN >> /tmp/fs_cont_omprimary
	ssh smrs_master ssh ${NEDSS_IP} mount | grep /export/WRAN >> /tmp/fs_cont_nedss	

	ssh smrs_master mount | grep /export/LRAN >> /tmp/fs_cont_omprimary
	ssh smrs_master ssh ${NEDSS_IP} mount | grep /export/LRAN >> /tmp/fs_cont_nedss	

	ssh smrs_master mount | grep /export/CORE >> /tmp/fs_cont_omprimary
	ssh smrs_master ssh ${NEDSS_IP} mount | grep /export/CORE >> /tmp/fs_cont_nedss	
	
	# nedss.fs file contains all the directories to exist after adding NEDSS on both SMRS Master and NEDSS
	cat /tmp/fs_cont_omprimary | /usr/xpg4/bin/grep -f nedss.fs > /tmp/ompriN1.fs

	cat /tmp/fs_cont_nedss| /usr/xpg4/bin/grep -f nedss.fs > /tmp/nedssN1.fs

	diff /tmp/nedssN1.fs /tmp/ompriN1.fs
	[ $? -eq 0 ] || { echo "filesystem check on SMRS Master and NEDSS failed"; return 11; }
    # V. Check TFTP service is enabled on NEDSS

    
    ssh smrs_master ssh ${NEDSS_2ndIP} <<EOF

    # create a test file under /export/GRAN/tftp for testing
    touch /export/GRAN/tftp/test.xkalbha    

	# VI. Check syslog  config and operation

 # check if syslog is running on NEDSS
    ps -ea | grep syslogd || { echo syslog is not running on NEDSS \$?, Test failed; exit 3; }

        # check syslog works

	NEDSS_TRAFFIC_HOSTNAME=\$(uname -n)	
        if [ -s /export/GRAN/syslog/\${NEDSS_TRAFFIC_HOSTNAME}_local7.info ]
        then
                lines=\$(cat /export/GRAN/syslog/\${NEDSS_TRAFFIC_HOSTNAME}_local7.info|wc -l)

                logger -t smrs -p local7.info "xkalbha"
                sleep 5
                sed 1,\${lines}d /export/GRAN/syslog/\${NEDSS_TRAFFIC_HOSTNAME}_local7.info >>/tmp/syslog.log
                grep xkalbha /tmp/syslog.log
                retval=\$?
                rm -f /tmp/syslog.log
                [ \$retval -eq 0 ] || { echo syslog did not work on NEDSS, Test failed; exit 1; }

        else
                logger -t smrs -p local7.info "xkalbha"
                sleep 5
                grep xkalbha  /export/GRAN/syslog/\${NEDSS_TRAFFIC_HOSTNAME}_local7.info
                [ \$? -eq 0 ] || { echo syslog did not work on NEDSS, Test failed; exit 4; }

        fi
EOF
	retval=$?
	[ $retval -eq 0 ] || { echo "syslog test failed $retval"; return 1; }

	rm -f test.xkalbha
    echo get test.xkalbha|tftp ${NEDSS_2ndIP}  
	[ -f test.xkalbha ] || { echo tftp test failed; return 13; }
    # cleanup
    ssh smrs_master ssh ${NEDSS_2ndIP} rm -f /export/GRAN/tftp/test.xkalbha

	# VII. Check add nedss log for no error

    [ $? -eq 0 ] || { echo "exit command to return to OSS Master to check add nedss log file failed"; return 1; }
 
	logFile=$(ls -lrt /var/opt/ericsson/log/add_nedss.sh_log_*|tail -1|awk '{print $9}')

	grep "ERROR" $logFile
	[ $? -eq 0 ] && { echo ERROR found in the add nedss log file, Test failed; return 1; }

    grep "WARNING" $logFile
    [ $? -eq 0 ] && { echo WARNING found in the add nedss log file, Test failed; return 1; }


	# IX. check /etc/inet/hosts on OM Primary  for NEDSS entry
	ssh smrs_master cat /etc/inet/hosts  | grep ${NEDSS_2ndIP}
    [ $? -eq 0 ] || { echo NEDSS was not found in the /etc/inet/hosts on OM_PRIMARY, Test failed; return 1; }

	# X. check /etc/inet/hosts on NEDSS for OM Primary entry
 	ssh smrs_master  ssh ${NEDSS_2ndIP} cat /etc/inet/hosts  | grep smrs_master
    [ $? -eq 0 ] || { echo OM_PRIMARY was not found in the /etc/inet/hosts on NEDSS, Test failed; return 1; }


	

	

	# cleanup test.xkalbha
	ssh smrs_master ssh ${NEDSS_2ndIP} rm -f /export/GRAN/tftp/test.xkalbha
	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

    # SMRS cleanup is performed via the test suite

    #rm -f /tmp/fs_cont_nedss 
    #rm -f /tmp/fs_cont_omprimary
    #rm -f mount.data
    #rm -f test.xkalbha
	#rm -f 165.exp
	#rm -f ssh.log
    #rm -f 2nedss_config.valid
	return 0

}
