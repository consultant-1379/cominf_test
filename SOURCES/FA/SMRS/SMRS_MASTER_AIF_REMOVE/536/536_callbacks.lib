#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

# DEFINITIONS
source /etc/opt/ericsson/nms_bismrs_mc/smrs_config
USER=nexist538

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	grep -w smrs_master /etc/inet/hosts || {
		echo smrs_master is not defined in /etc/inet/hosts
		return 1
	}

	grep NEDSS_TRAFFIC_IP /etc/opt/ericsson/nms_bismrs_mc/smrs_config || {
		echo no nedss traffic ips configured in /etc/opt/ericsson/nms_bismrs_mc/smrs_config
		return 1
	}

	grep $USER /etc/passwd && {
		echo $USER exists on $(hostname)
		return 1
	}


	ssh -o "BatchMode=yes" smrs_master "grep $USER /etc/passwd" && {
		echo $USER exists on smrs_master
		return 1
	}

	for ip in ${NEDSS_TRAFFIC_IP[@]}
    do
		ssh -o "BatchMode=yes" smrs_master "ssh -o 'BatchMode=yes' $ip grep $USER /etc/passwd" && {
			echo $USER exists on $ip
			return 1
		}
	done

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	/opt/ericsson/nms_bismrs_mc/bin/del_aif.sh -a $USER >>  output.log && {
		echo deleted $USER, this should not have happened
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Coded to fail in case TC_AUTOMATED=1 before automation complete.
	# Change return code as required
	
	#CONSOLE_OUTPUT_CONTAINS "ERROR del_aif.sh: \[User \"nexist538\" does not exist on smrs_master\]: FATAL: exit code: 2" || {
	grep -i "User \"nexist538\" does not exist on smrs_master" output.log || {
	echo "No error message"
		return 1
	}

	return 0
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {


	return 0

}
