#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 13/07/12	xkalbha		Initial version testing with checking NTP

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	#PREPARE_SMRS
	
	
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	TEST_SOLARIS || { echo "Not Solaris"; return 1; }
	# Check that have smrs_user_config file for this box
	name=`hostname`
	filename="smrs_user_config.$name"
	[ -r $filename ] || { echo "SMRS config $filename does not exist"; return 2; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	${AT_BIN}/con_ex.bsh -d login.in -o expect.exp -c "ssh omsrvm mkdir /export/GRAN/nedssv4 "
	/usr/local/bin/expect expect.exp  
	
	${AT_BIN}/con_ex.bsh -d login.in -o expect.exp -c "ssh omsrvm mkdir /export/WRAN"
	/usr/local/bin/expect expect.exp 
	${AT_BIN}/con_ex.bsh -d login.in -o expect.exp -c "ssh omsrvm mkdir /export/WRAN/nedssv4"
	/usr/local/bin/expect expect.exp
	
	${AT_BIN}/con_ex.bsh -d login.in -o expect.exp -c "ssh omsrvm mkdir /export/WRAN/nedssv6"
	/usr/local/bin/expect expect.exp
	
	${AT_BIN}/con_ex.bsh -d login.in -o expect.exp -c "ssh omsrvm mkdir /export/LRAN/nedssv4"
	/usr/local/bin/expect expect.exp  
	${AT_BIN}/con_ex.bsh -d login.in -o expect.exp -c "ssh omsrvm mkdir /export/GRAN/nedssv6"
	/usr/local/bin/expect expect.exp 
	svcadm enable smrs_nfs
	
	# Mark the bismrs_events.log so know if errors occur
	LOG_MARK_STATUS /var/opt/ericsson/log/bismrs_events.log 1

	name=`hostname`
	filename="smrs_user_config.$name"
	cp $filename smrs_user_config
	#echo "Config file using is: "
	#cat $filename

	#Make the NTP server that the OSS master use is not same as OM primary
	# First keep copies of ntp files on this box and remote OM primary
    cp /etc/inet/ntp.conf ntp_oss.orig
    PRIMIP=`grep ^SMRS_MASTER_IP smrs_user_config 2> /dev/null | awk -F '{print $2}'`
	scp smrs_master '/etc/inet/ntp.conf' ntp_remote.orig
	# Now alter Solaris box to use different NTP server - this is Simon's VM
	svcadm disable ntp
	sed 's/server .*/server 10.45.201.180/' /etc/inet/ntp.conf > ntp.tmp && mv ntp.tmp /etc/inet/ntp.conf
	svcadm enable ntp
	
	


	# Add the smrs master
	
	/opt/ericsson/nms_bismrs_mc/bin/add_smrs_master.sh -a add -f smrs_user_config -p shroot -r shroot123 
	retval=$?
	[ $retval -ne 0 ] && { echo "add_smrs_master failed $retval. Attempting again";
	/opt/ericsson/nms_bismrs_mc/bin/add_smrs_master.sh -a add -f smrs_user_config -p shroot -r shroot123 || 
		{ echo "add_smrs_master failed twice.";  return 1;}
	}

	# Check for errors
	LOG_SEARCH_FROM_MARK /var/opt/ericsson/log/bismrs_events.log error 1
	retval=$?
	[ $retval -eq 0 ] && { echo "error found in bismrs_events.log $retval"; return 4; }
	[ $retval -ne 1 ] && { echo "Search failed in bismrs_events.log $retval"; return 4; }
	LOG_SEARCH_FROM_MARK /var/opt/ericsson/log/bismrs_events.log warning 1
	retval=$?
	[ $retval -eq 0 ] && { echo "warning found in bismrs_events.log $retval"; return 5; }
	[ $retval -ne 1 ] && { echo "Search failed in bismrs_events.log $retval"; return 5; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {
	
	
	#scp /etc/inet/ntp.conf root@smrs_master:/etc/inet/ntp_remote.orig || { echo "Unable to scp to SMRS master"; return 1; }	
	#ssh smrs_master
	diff /etc/inet/ntp.conf /etc/inet/ntp_remote.orig
	#retval=$?
	#[ $retval -ne 0 ] && { echo "NTP on OM primary has altered, see above $retval"; return 2; }		
	#exit
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Put OSS master back to using its NTP server
    svcadm disable ntp
    cp ntp_oss.orig /etc/inet/ntp.conf
    svcadm enable ntp

	# Remove temporary files
	#rm -f smrs_user_config
	#rm -f ntp_remote.orig
	#rm -f ntp_orig.orig

	# Cleanup the system so nolonger a SMRS master
	##CLEANUP_SMRS  smrs_master oss1 y y y y
	return $?

}
