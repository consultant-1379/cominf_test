#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 24/07/12	xkalbha		Initial version testing with PERFORMARNEIMPORTS as no

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {
	#PREPARE_SMRS
	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	TEST_SOLARIS || { echo "Not Solaris"; return 1; }
	
	

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	
	
	# Mark the bismrs_events.log so know if errors occur
	LOG_MARK_STATUS /var/opt/ericsson/log/bismrs_events.log 1

	name=`hostname`
	filename="smrs_user_config.$name"
	cp $filename smrs_user_config
	#echo "Config file using is: "
	#cat $filename
	${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "ssh omsrvm mkdir /export/GRAN/nedssv4"
	/usr/local/bin/expect expect.exp  
	
	${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "ssh omsrvm mkdir /export/LRAN/nedssv4"
	/usr/local/bin/expect expect.exp 
	
	
	svcadm enable smrs_nfs
    # Run con_ex.bsh to create expect script
    # 68.in is checked into GIT and has the name and prompt values
	cmd='/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add smrs_master -f smrs_user_config'
    ${AT_BIN}/con_ex.bsh -d 68.in -o 68.exp -c "${cmd}"
    retval=$?
    [ $retval -ne 0 ] && { echo Failed to create expect script $retval; return 2; }

	/usr/local/bin/expect 68.exp
	#/opt/ericsson/nms_bismrs_mc/bin/add_smrs_master.sh -a add -f smrs_user_config -p shroot -r shroot123
	retval=$?
	[ $retval -ne 0 ] && { echo "add_smrs_master failed $retval. Attempting again" ;
	/usr/local/bin/expect 68.exp || { echo "add_smrs_master failed twice" ; return 1 ;}
	}
	
	#IS_SERVER_SSH_CONTACTABLE smrs_master
	#[ $? -eq 0 ] || { echo ssh to smrs_master failed; return 1; } 

	
	# Check for errors
	LOG_SEARCH_FROM_MARK /var/opt/ericsson/log/bismrs_events.log error 1
	retval=$?
	[ $retval -eq 0 ] && { echo "error found in bismrs_events.log $retval"; return 4; }
	[ $retval -ne 1 ] && { echo "Search failed in bismrs_events.log $retval"; return 4; }
	LOG_SEARCH_FROM_MARK /var/opt/ericsson/log/bismrs_events.log warning 1
	retval=$?
	[ $retval -eq 0 ] && { echo "warning found in bismrs_events.log $retval"; return 5; }
	[ $retval -ne 1 ] && { echo "Search failed in bismrs_events.log $retval"; return 5; }

	ssh smrs_master "pkg list | grep Ericbismrsmc" && { echo "Found SMRS package in master"; return 2; }
	
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Cleanup the system so nolonger a SMRS master
	retval=0

    #PRIMIP=`grep ^SMRS_MASTER_IP smrs_user_config 2> /dev/null | awk -F= '{print $2}'`
	##CLEANUP_SMRS  smrs_master oss y y y y
	#retval=$?

	# Remove temporary files
	rm -f smrs_user_config
	rm -f 68.exp
	return $retval

}
