#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 26/07/2013	xkalbha	Initial test to prove stn_cleanup cleans files

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()			# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Check is set up as smrs_master, quick check for smrs_master in /etc/inet/hosts
	grep "smrs_master" /etc/inet/hosts >& /dev/null || { echo "Failed to find smrs_master in /etc/inet/hosts"; return 1; }
	return 0	
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	# All bits to create old file and expect it to be deleted, need to wait
	# until later sprint, as we need SMRS slaves for that
	# For now will just prove stn_cleanup doesn't error

	# Create old file in /export/GRAN/AIF on OM primary
	#scp oldfile.txt root@smrs_master:/export/GRAN/AIF || { echo "Failed to copy file to remote box"; return 1; }
	# Make file old date
	#ssh root@smrs_master 'touch -t 12010112300 /export/GRAN/AIF/oldfile.txt' || { echo "Failed to make file old"; return 2; }
	# Check file is there
	#ssh root@smrs_master 'ls /export/GRAN/AIF/oldfile.txt' || { echo "File is not present"; return 3; }

	# Mark number of lines in stn_cleanup.sh.log 
	ssh root@smrs_master 'wc -l < /ericsson/smrs/log/stn_cleanup.sh.log' > stn_line_no.txt

	# Call stn_cleanup
	ssh root@smrs_master /ericsson/smrs/bin/stn_cleanup.sh || { echo "Failed to call stn_cleanup.sh"; return 4; }
	return 0;
	
}
	
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	

	return 0;
}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Clean up temporary files
	rm -f stn_line_no.txt
	
	return 0

}
