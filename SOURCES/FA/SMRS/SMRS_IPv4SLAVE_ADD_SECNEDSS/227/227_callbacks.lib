#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure
tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
tc_precon() {

	# Check that test is running on a Solaris machine
	TEST_SOLARIS || {
		echo "Not running on Solaris OS"
		return 1
	}

	# Check that the smrs_slave_config file exist in the test directory for this machine
	filename="smrs_slave_config.$(hostname)"
	[ -r $filename ] || {
		echo "SMRS config file, $filename does not exist"
		return 2
	}

	# Select config file to use and copy it
	cp "smrs_slave_config.$(hostname)" smrs_slave_config

	primary_nedss_ip=$(awk -F= '$1~/SMRS_SLAVE_NEDSS_IP/{print $2;exit}' smrs_slave_config)
	ssh smrs_master "ping -c4 $primary_nedss_ip" &>/dev/null|| {
		echo "SMRS slave ($primary_nedss_ip) is not alive"
		return 3
	}

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
tc_test() {

	# Create and run expect script to add smrs slave (on OM primary)
	${AT_BIN}/con_ex.bsh -d add_smrs_slave.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add slave_service -f smrs_slave_config"
	/usr/local/bin/expect expect.exp && {
		echo "add slave_service succeeded with same name as primary NEDSS"
		return 1
	}

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	# Check contents of /var/opt/ericsson/log/add_smrs_slave.sh_log_<date>
	# Assume the most recent one that matches the pattern is the correct file
	filename=$(ls -rt /var/opt/ericsson/log/add_smrs_slave.sh_log_*|tail -1)
	grep "ERROR Slave service .* already exists with same profile. This service must be deleted before proceeding." $filename >/dev/null|| {
		echo "Specific error (Slave service... already exists) not found in $(basename $filename) log"
		cat $filename
		return 1
	}
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# Remove temporary files
	rm -f smrs_slave_config
	return 0

}
