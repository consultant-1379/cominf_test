#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 10-08-12 	xkalbha		Initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {


	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {
	#  Check have SMRS hosts ip file for this OSS maser
        name=`hostname`
        filename="smrs.hosts.ip.$name"
        [ -r $filename ] || { echo "  SMRS hosts ip file $filename does not exist"; return 2; }
        #Copy to smrs.hosts.ip file
        cp $filename "smrs.hosts.ip"

        nedss_ip=$(awk 'NR==2' smrs.hosts.ip)

	# updating config file with correct ip and mount names for the current environment
	sed -e "s/^SMRS_SLAVE_NEDSS_IP=.*$/SMRS_SLAVE_NEDSS_IP=${nedss_ip}/" \
		smrs_slave_config.valid > smrs_slave_config.valid.tmp
	numlines=$(cat smrs.hosts.ip | wc -l) 
	if [ $numlines -gt 3 ]; then
		host_gran=$(awk 'NR==4' smrs.hosts.ip)
		host_wran=$(awk 'NR==5' smrs.hosts.ip)
		host_lran=$(awk 'NR==6' smrs.hosts.ip)
		host_core=$(awk 'NR==7' smrs.hosts.ip)
		sed -e "s,^SMRS_SLAVE_GRAN_NAS_SHARE_NAME=.*$,SMRS_SLAVE_GRAN_NAS_SHARE_NAME=${host_gran}," \
			-e "s,^SMRS_SLAVE_WRAN_NAS_SHARE_NAME=.*$,SMRS_SLAVE_WRAN_NAS_SHARE_NAME=${host_wran}," \
			-e "s,^SMRS_SLAVE_LRAN_NAS_SHARE_NAME=.*$,SMRS_SLAVE_LRAN_NAS_SHARE_NAME=${host_lran}," \
			-e "s,^SMRS_SLAVE_CORE_NAS_SHARE_NAME=.*$,SMRS_SLAVE_CORE_NAS_SHARE_NAME=${host_core}," \
			smrs_slave_config.valid.tmp > smrs_slave_config.valid2
	else
		# Do not want any lines with NAS_SHARE_NAME
		grep -v "NAS_SHARE_NAME" smrs_slave_config.valid.tmp > smrs_slave_config.valid2
		echo "# Specify following if using OM_SERVICES" >> smrs_slave_config.valid2

	fi
	rm smrs_slave_config.valid.tmp

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

		#CHECK_SLAVE_EXISTS nedssv4 || { echo "nedssv4 doesnt exists in smrs_config"; 

        cmd='/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add slave_service -f smrs_slave_config.valid2'

        ${AT_BIN}/con_ex.bsh -d 213.in -o 213.exp -c "${cmd}"
        retval=$?
        [ $retval -ne 0 ] && { echo Failed to create expect script $retval; return 2; }

        /usr/local/bin/expect 213.exp

	[ $? -eq 0 ] && { echo "running main command returned 0 while NEDSS had more network elemnet types than SMRS Master" ; return 1; }
	
		#}
		
		
		
		
	return 0 

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	CONSOLE_OUTPUT_CONTAINS "ERROR Network(s)[GRAN CORE] not enabled on the OSS"
	[ $? -eq 0 ] || { echo "output did not contain the Error message: ERROR Network(s)[GRAN] not enabled on"; return 2; }

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	# rm -f 213.exp
	return 0

}
