#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# 23-07-12	xkalbha	  initial version

# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {


	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {


	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {
	
	${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add nedss -f nedss_config1.invalid"
	/usr/local/bin/expect expect.exp 
	
    ${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add nedss -f nedss_config2.invalid"
	/usr/local/bin/expect expect.exp
	
	${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add nedss -f nedss_config3.invalid"
	/usr/local/bin/expect expect.exp
	
	${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add nedss -f nedss_config4.invalid"
	/usr/local/bin/expect expect.exp
	
	${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add nedss -f nedss_config5.invalid"
	/usr/local/bin/expect expect.exp
	
	${AT_BIN}/con_ex.bsh -d add_smrs.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh add nedss -f nedss_config6.invalid"
	/usr/local/bin/expect expect.exp
	
	
	
	
	
	
	
	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

    CONSOLE_OUTPUT_CONTAINS "ERROR Invalid NEDSS_TRAFFIC_IP parameter 10.10.10. in the config file nedss_config1.invalid."
	[ $? -eq 0 ] || { echo "config file validation failed"; return 1; }

    CONSOLE_OUTPUT_CONTAINS "ERROR Invalid NEDSS_TRAFFIC_IP parameter 10.10.10.10.10 in the config file nedss_config2.invalid."
	[ $? -eq 0 ] || { echo "config file validation failed"; return 2; }

    CONSOLE_OUTPUT_CONTAINS "ERROR Invalid NEDSS_TRAFFIC_IP parameter a.10.10.10 in the config file nedss_config3.invalid."
	[ $? -eq 0 ] || { echo "config file validation failed"; return 3; }

    CONSOLE_OUTPUT_CONTAINS "ERROR Invalid NEDSS_TRAFFIC_IP parameter 0001.10.10.10 in the config file nedss_config4.invalid."
	[ $? -eq 0 ] || { echo "config file validation failed"; return 4; }

    CONSOLE_OUTPUT_CONTAINS "ERROR Invalid NEDSS_TRAFFIC_IP parameter 10.10.10.256 in the config file nedss_config5.invalid."
	[ $? -eq 0 ] || { echo "config file validation failed"; return 5; }

    CONSOLE_OUTPUT_CONTAINS "ERROR Required parameter NEDSS_TRAFFIC_IP missing in the config file nedss_config6.invalid."
	[ $? -eq 0 ] || { echo "config file validation failed"; return 6; }

    

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {


	return 0

}
