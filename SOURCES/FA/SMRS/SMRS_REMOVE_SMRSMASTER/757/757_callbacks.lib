#!/bin/bash
#################################################################################
#
#
#       COPYRIGHT (C) ERICSSON RADIO SYSTEMS AB, Sweden
#
#       The copyright to the document(s) herein is the property of
#       Ericsson Radio Systems AB, Sweden.
#
#       The document(s) may be used and/or copied only with the written
#       permission from Ericsson Radio Systems AB or in accordance with
#       the terms and conditions stipulated in the agreement/contract
#       under which the document(s) have been supplied.
#
#################################################################################


# ATCOMINF Test Callback Library

# Revision History
# <date>	<signum>	<details>
# 20121121	xkalbha		Initial version
# Complete the callbacks in this library to automate the test case.
#
# Callbacks are stateless, it is not possible to set a global variable in one callback 
# and access it it in another.
#
# Callbacks are called by the test harness in the following order:
#
# tc_setup() 		# Called only for independent TC execution mode to setup TC
# tc_precon()		# Conditions that should exist before TC can run
# tc_test()		# Runs the test for this TC
# tc_postcon()		# Conditions that should/should not exist after successful TC 
# tc_cleanup()		# Called only for independent TC execution mode to clenup after TC

# All callbacks must PASS for a TC PASS result

#################################################################################
#
# CALLBACK: TC_SETUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_setup() {

	return 0

}
#################################################################################

#################################################################################
#
# CALLBACK: TC_PRECON
#
# This callback function checks the correct conditions exist to run the TC.
#
# Return or exit codes:
#  0	success
# >0 	failure
 
tc_precon() {

	# Replace PASSWD with the correct credentials
	for ii in *.in; do
		sed "s/^PASSWD$/$SMRS_MASTER_ROOTPW/" $ii > $ii.tmp
	done

	source /etc/opt/ericsson/nms_bismrs_mc/smrs_config

	# record smrs_masters ip for postcon testing
	grep -w smrs_master /etc/inet/hosts | awk '{print $1}'> smrs_master.ip.tmp

	# record nas IP, and SMRS_MASTER_IP for postcon testing
	echo NAS1_IP=$NAS1_IP > bismrsproperties.tmp
	echo SMRS_MASTER_IP=$SMRS_MASTER_IP >> bismrsproperties.tmp

	
	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_TEST
#
# This callback function runs the test.
# The harness compares the return code to the SPEC_TC_TEST_PASSCODE value set in the test spec.
#
# Return or exit codes:
#    SPEC_TC_TEST_PASSCODE 	success
# != SPEC_TC_TEST_PASSCODE 	failure
 
tc_test() {

	source /etc/opt/ericsson/nms_bismrs_mc/smrs_config
	echo "Logging in to /LRAN on SMRS Master and stay logged in while delete smrs server is executed... "

	ssh $SMRS_MASTER_IP "cd /LRAN; pwd; sleep 300 &" &
        [ $? -eq 0 ] || {
		echo "ssh to $SMRS_MASTER_IP to open a file failed"
		return 1
		}

	echo "Writing the PID of the backgrounded sleep process to file sleep_pid.tmp "
	echo $! > sleep_pid.tmp

	
	${AT_BIN}/con_ex.bsh -d 757_delete_smrs_master.in -o expect.exp -c "/opt/ericsson/nms_bismrs_mc/bin/configure_smrs.sh delete smrs_master"
    /usr/local/bin/expect expect.exp && {
		return 0
	}

	return 1

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_POSTCON
#
# This callback function checks expected results.
#
# Return or exit codes:
#  0	success
# >0 	failure

tc_postcon() {

	CONSOLE_OUTPUT_CONTAINS "WARNING umount of /export/LRAN failed" || { echo "Message not found: WARNING unmount of /export/LRAN failed"; return 1; }

	#CONSOLE_OUTPUT_CONTAINS "INFO Deleted LV /dev/smrspool/lran_common" || { echo "Message not found: INFO Deleted LV /dev/smrspool/lran_common"; return 2; }


	# check the hosts file
	grep -w smrs_master /etc/inet/hosts && {
		echo smrs_master still exists in hosts
		return 3
	}

	# ensure we cant ssh to what was the smrs master without a password
	ip=$(cat smrs_master.ip.tmp)
	ssh -o "BatchMode=yes" $ip ls && {
		echo still able to ssh to $ip
		return 4
	}

	# check for existence of nms and aif groups
	/usr/local/bin/expect ssh_setup.sh ssh "$ip egrep -w 'nms|aif' /etc/group" shroot && {
		echo error with groups on $ip
		return 5
	}

	# check for existence of smrsuser on what was previously the smrs_master
	/usr/local/bin/expect ssh_setup.sh ssh "$ip egrep -w 'smrsuser' /etc/passwd" shroot && {
		echo smrsuser still exists on $ip
		return 6
	}

	/usr/local/bin/expect ssh_setup.sh ssh "$ip egrep 'coresmo|gransmo|l-smobackup|l-smoconfig|l-smokeystore|l-smoswstore|smo-backup|smo-config|smo-keystore|smo-swstore' /etc/passwd" shroot && {
		echo smo user still exists on $ip
		return 7
	}

	egrep "coresmo|gransmo|l-smobackup|l-smoconfig|l-smokeystore|l-smoswstore|smo-backup|smo-config|smo-keystore|smo-swstore" /etc/passwd && {
		echo smo user still exists on OSS master
		return 8
	}

	# check for existence of users in ONRM database
	/opt/ericsson/nms_cif_cs/etc/unsupported/bin/cstest -s ONRM_CS lt FtpService  | grep . && {
		echo entries still exist in ONRM
		return 9
	}

	source bismrsproperties.tmp
	# check lvm mounts and relevant files for clean-up
	${AT_BIN}/con_ex.bsh -d ssh.in.tmp -o expect.exp -c "ssh root@$SMRS_MASTER_IP \"vgs\""
	/usr/local/bin/expect expect.exp  | grep smrspool && {
		echo "smrspool not deleted from smrs master $SMRS_MASTER_IP, Test Failed, rc $?"
		return 10
	}
			
	${AT_BIN}/con_ex.bsh -d ssh.in.tmp -o expect.exp -c "ssh root@$SMRS_MASTER_IP \"test -s /etc/exports \""
	/usr/local/bin/expect expect.exp && {
		echo "/etc/exports not empty on smrs master $SMRS_MASTER_IP, Test Failed, rc $?"
		return 11
	}
	
	sleep 5
	${AT_BIN}/con_ex.bsh -d ssh.in.tmp -o expect.exp -c "ssh root@$SMRS_MASTER_IP \" mount \""
	/usr/local/bin/expect expect.exp  | grep smrspool && {
		echo "All SMRS mounts not unmounted on smrs master $SMRS_MASTER_IP, Test Failed, rc $?"
		return 12
	}
	${AT_BIN}/con_ex.bsh -d ssh.in.tmp -o expect.exp -c "ssh root@$SMRS_MASTER_IP \" cat /etc/vfstab \""
	/usr/local/bin/expect expect.exp  | grep smrspool && {
		echo "All SMRS mounts not deleted from  /etc/vfstab on smrs master $SMRS_MASTER_IP, Test Failed, rc $?"
		return 13
	}
	${AT_BIN}/con_ex.bsh -d ssh.in.tmp -o expect.exp -c "ssh root@$SMRS_MASTER_IP \" mount \""
	/usr/local/bin/expect expect.exp  | grep "smrs_master:" && {
		echo "At least one smrs NFS share (of format: smrs master:/share_name) still exist on  $SMRS_MASTER_IP, Test Failed, rc $?"
		return 14
	}



	echo "Killing the backgrounded sleep process if it's still running..."
	SLEEP_PID=$(cat sleep_pid.tmp)
	if [ -n “$SLEEP_PID” ]; then
        	if kill -0 $SLEEP_PID; then
			echo "SIGKILL signal being sent to process with PID $SLEEP_PID "
        		kill -9 $SLEEP_PID
		fi
	fi

	return 0

}
#################################################################################


#################################################################################
#
# CALLBACK: TC_CLEANUP
#
# This callback function is only called if the harness execution mode is 'AT_INDEPENDENT'
# 
# This callback restores the target system to the state it was in before the TC 
# was run. It rolls back changes made by callbacks tc_setup() and tc_test()
# 
# Return or exit codes:
#  0	success
# >0 	failure

tc_cleanup() {

	return 0

}
